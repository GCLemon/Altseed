・ファイル名
ファイル名はace.○○.h / ace.○○.cppとする。
外部のアーカイブとリンクした時に、オブジェクト名が衝突するのを防ぐためである。

・ディレクトリ
今回の開発は非常にファイルが増えると予想される。
最低でもおおまかな区分けでディレクトリを分離する。
1つのクラスが多数のプラットフォームに分岐する場合、クラス単位でディレクトリを分離する。
IDEのフィルタはディレクトリと同じ構成にする。
ディレクトリ名は先頭大文字を推奨する。

・ネームスペース
全て、ace直下とする。これはSWIGはネームスペースを無視するため、他の言語に移植する際に影響が出にくくするためである。

・includeパス
すべての区切り文字は/とする。これは\だとgccでコンパイルできないからである。

・ファイルの文字コード
cp932とする。utf8BOM付はgccでコンパイルできず、utf8BOM無しはWindowsでの扱いに困るためである。

・継承されるクラスについて
必ず、継承されるクラスは仮想デストラクタを設ける。
仮想デストラクタを持たないクラスを基底クラスにすると、派生クラスのデストラクタしか呼ばれず、見つけにくいメモリリークを引き起こす。
仮想デストラクタを持たないクラスは継承禁止とする。

・C言語由来のヘッダ(limits.hやstring.h)
limits.hやstring.hでなく、先頭にcをつけ、.hを抜かしたclimits, cstring等を使用する。
こちらはC++固有の機能を用いた最適化や安全策を設けている場合がある。

・クラス内のstatic関数
不必要なケースを除き、クラス内にstatic関数を用意するのではなく、汎用化して関数として使用できるようにする。

・構造体の参照
プリミティブな構造体を参照を渡すために引数に取る場合、無効を表すケースを除いてポインタではなく参照を渡すようにする。
渡した参照元が先に消えるような設計にはそもそもしないようにする。

・const
可能な限り、constをつける。特に、引数のポインタ、参照、Getterには可能な限りつける。

・コメント
Doxygenに対応させる。

・命名規則
CamelCase

クラス名は先頭大文字

プライベートや引数は先頭小文字

メンバ変数の先頭はm_
グローバル変数の先頭はg_
enum型の先頭はe

{
は、下げる。


関数等の間は
//-----------------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------------
で分離

・boost
Coreのユーザーに提示されない部分にのみヘッダーオンリーで使用可

・C++11
gcc4.7、clang3.2、msvc2013全てでサポートされている文法は使用可能
ライブラリはNDKとiPhoneの更新具合に依存する。

-クラスの内側で定義したクラステンプレートの特殊化
クラスの内側で定義したクラステンプレートを特殊化は禁止する
参照先　http://d.hatena.ne.jp/matsutakegohan1/20071001/1191245392
実はVisualStudio独自の拡張なので使用しては行けない。

