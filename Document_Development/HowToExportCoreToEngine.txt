Coreは最終的にDLLやSharedObject（以下DLLに統一）にコンパイルされる。
そのため、著しくCoreに記述した機能を外にだす方法は制限される。
それは、DLL内の外に見える関数はC言語と同じ扱いを受けるからである。
そのため、クラスのインスタンスをポインタとして返す関数を宣言し、そのポインタから実行する必要がある。
なお、外部でのdeleteも厳禁である。そのため、delete thisでクラスのインスタンスは削除する必要がある。

■　C++の場合
DLLから外に見える関数は実質、CreateCoreのみである。
そのため、他のクラスを使用するには
１．CoreにCreate関数を実装する。
２．Coreの内部で生成してGet関数を用意し、クラスのポインタを返す。
の２つがある。

前者を選択する場合、必ずクラスのインスタンスの寿命はCoreより短くなくてはならない。
（EngineでCoreのインスタンスが消されるときにDLL自体を解放するため）
後者の場合も同様に、Coreのインスタンスが消えるときにはクラスのインスタンスも消さなければならない。
前者の場合は、Coreの参照をもっておき、参照カウンタを増やしておくと理想的である。
後者の場合は、C++のEngineに、Coreのインスタンス削除と同じタイミングでクラスのインスタンスにアクセスできなくするといいだろう。

C#との兼ね合いを考えると、必ず生成されるクラスは内部で生成し、Get関数を用意したほうがいい。

とりあえず、Coreにいずれかの関数のインターフェースを書き、Core_Impに実装したとする。

次に、
generateCoreToEngineHeader.py
にヘッダの情報を追加する。
これは、CoreからEngineに向けてのヘッダ生成である。
ここにはインターフェースにあたるクラスを記述したヘッダのみ追加可能である。
追加する際の順番は重要である。クラス間の関係を考えて追加する。
追加した後、pythonを用いてこのスクリプトを実行する。
実行に成功すれば、ace.CoreToEngine.hにクラスの情報が記述される。

後は、Engineクラスのメンバ変数にCoreが存在するので、Engineの初期化時と終了時に、グローバルを経由するなどとしてユーザーが使用可能する。

最後に、
Engineのヘッダ生成である。
Engineのlib内部では使用できるが、ユーザーはCoreのヘッダを見れるわけではないので、ユーザーがみるヘッダを生成する必要がある。

generateEngineHeader.py
にヘッダ情報を追加する。
ここにはインターフェースにあたるクラスを記述したヘッダのみ追加可能である。
追加する際の順番は重要である。クラス間の関係を考えて追加する。
そして、最後に実行する。

*幾つかの点で、Create関数を用意すべき位置を指定ミスしており、申し訳ございません。Engineで直接使うクラスの場合は、Create関数はCoreにないといけないようです。


■　C#の場合
C#の場合は、***_Impクラスを直接使用する。
C++からC#へは、swigを経由してラッパーコードを自動生成する。

まず、ace_cs.iにクラス情報を記述する。
最上部の、
%{
の中に、coreのdll_cs.cxxに追加されるヘッダ部分を記述する。
基本的にはcore/以下のinludeを書けばよい。

一番下に
%include "***"
というのがあるので、ここに外部に出力するヘッダファイルを追記する。
いずれのヘッダファイルも、順番は重要である。

必要な場合は、***_Impクラスだけでなく、***の方も追加してよい。

そして、swig.batを実行する。そうすると、c++側とC#側に直接のラッパーコードが生成が生成される。
後は、仕様に合わせてC#のコードを記述すればよい。

なお、C#側に生成されたラッパーコードはとりあえず使用できるが、解放周りがGC時、もしくはDispose時に解放になってるため、うまく扱う必要がある。

このラッパーコード生成の際、内容によっては更に追記する必要がある。

・・・そのうち記述する。

関数が新しくインスタンスを生成する場合、
%newobject ace::Core::Create***;
といった記述を%includeする前に必要である。
これは、SWIGはインスタンスのポインタを返す関数の場合、標準ではどこかにメモリが確保されており、ネイティブ側で最終的に削除する、と考えるからである。
newobject を指定した場合、SWIGが生成したラッパーがGCされた時、もしくはDisposeされた時にメモリが解放されるようになる。
ただし、今回のプロジェクトの場合、Releaseで参照カウンタが0になった時に破棄が多いため、この機能を殆ど使うことがない。

SWIGで、外部に出力したくない部分は、
#ifndef SWIG #endif
で囲む。


C#への出力は色々ノウハウが必要なため、問題が起きたらswdに尋ねてください。