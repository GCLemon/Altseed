using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ace
{
	public class EngineOption
	{
		/// <summary>
		/// フルスクリーンで起動するか?
		/// </summary>
		public bool IsFullScreen = false;

		/// <summary>
		/// 描画に使用するデバイス
		/// </summary>
		public GraphicsDeviceType GraphicsDevice = GraphicsDeviceType.Default;

		/// <summary>
		/// リソースの再読み込みを有効にするかどうか?
		/// </summary>
		public bool IsReloadingEnabled = false;

		/// <summary>
		/// 起動時に自動的に生成されるシーンとレイヤーの種類
		/// </summary>
		public AutoGeneratedLayerType AutoGeneratedLayer = AutoGeneratedLayerType.Layer2D;
	};

	public class Engine
	{
		static swig.Core_Imp core = null;
		static swig.LayerProfiler layerProfiler = null;

		/// <summary>
		/// 現在描画対象となっているシーンを表す ace.Scene クラスのインスタンスを取得します。
		/// </summary>
		public static Scene CurrentScene { get; private set; }
		public static Log Logger { get; private set; }
		public static Profiler Profiler { get; private set; }
		public static Keyboard Keyboard { get; private set; }
		public static Mouse Mouse { get; private set; }
		public static JoystickContainer JoystickContainer { get; private set; }
		public static Sound Sound { get; private set; }
		public static Graphics Graphics { get; private set; }
		public static AnimationSystem AnimationSystem { get; private set; }
		public static File File { get; private set; }

		/// <summary>
		/// プロファイリング結果を画面に表示するかどうかを表す真偽値を取得または設定する。
		/// </summary>
		public static bool ProfilerIsVisible
		{
			get { return core.GetProfilerVisibility(); }
			set { core.SetProfilerVisibility(value); }
		}

		internal static ObjectSystemFactory ObjectSystemFactory { get; private set; }
		private static Scene nextScene;
		private static Scene previousScene;
		private static Transition transition;

		/// <summary>
		/// 初期化を行う。
		/// </summary>
		/// <param name="title">タイトル</param>
		/// <param name="width">横幅</param>
		/// <param name="height">縦幅</param>
		/// <param name="option">オプション</param>
		/// <returns>成否</returns>
		public static bool Initialize(string title, int width, int height, EngineOption option)
		{
			if(core != null) return false;

			if (!Particular.Helper.CheckInitialize()) return false;

			try
			{
				core = swig.Core_Imp.CreateCore();
			}
			catch (System.TypeInitializationException)
			{
				// DLLが見つからないケース
				return false;
			}

			var graphicsType = option.GraphicsDevice;
			if(graphicsType == GraphicsDeviceType.Default)
			{
				graphicsType = Particular.Helper.GetDefaultDevice();
			}

			var coreOption = new swig.CoreOption();
			coreOption.GraphicsDevice = (swig.GraphicsDeviceType)option.GraphicsDevice;
			coreOption.IsFullScreen = option.IsFullScreen;
			coreOption.IsReloadingEnabled = option.IsReloadingEnabled;

			var result = core.Initialize(title, width, height, coreOption);

			if(result)
			{
				GC.Initialize();
				SetupMembers();

				if(option.AutoGeneratedLayer == AutoGeneratedLayerType.Layer2D)
				{
					var scene = new Scene();
					var layer = new Layer2D();
					scene.AddLayer(layer);
					ChangeScene(scene);
				}
				else if(option.AutoGeneratedLayer == AutoGeneratedLayerType.Layer3D)
				{
					var scene = new Scene();
					var layer = new Layer3D();
					scene.AddLayer(layer);
					ChangeScene(scene);
				}

				return true;
			}
			else
			{
				core.Release();
				core = null;
				return false;
			}
		}

		/// <summary>
		/// 外部ウインドウにゲーム画面を表示する初期化を行う。
		/// </summary>
		/// <param name="handle1">ハンドル1</param>
		/// <param name="handle2">ハンドル2</param>
		/// <param name="width">横幅</param>
		/// <param name="height">縦幅</param>
		/// <param name="option">オプション</param>
		/// <returns>成否</returns>
		public static bool InitializeByExternalWindow(IntPtr handle1, IntPtr handle2, int width, int height, EngineOption option)
		{
			if(core != null) return false;

			if(!Particular.Helper.CheckInitialize()) return false;

			try
			{
				core = swig.Core_Imp.CreateCore();
			}
			catch (System.TypeInitializationException)
			{
				// DLLが見つからないケース
				return false;
			}

			var graphicsType = option.GraphicsDevice;
			if(graphicsType == GraphicsDeviceType.Default)
			{
				graphicsType = Particular.Helper.GetDefaultDevice();
			}

			var coreOption = new swig.CoreOption();
			coreOption.GraphicsDevice = (swig.GraphicsDeviceType)option.GraphicsDevice;
			coreOption.IsFullScreen = option.IsFullScreen;
			coreOption.IsReloadingEnabled = option.IsReloadingEnabled;

			var result = core.InitializeByExternalWindow(handle1, handle2, width, height, coreOption);

			if(result)
			{
				GC.Initialize();
				SetupMembers();

				if(option.AutoGeneratedLayer == AutoGeneratedLayerType.Layer2D)
				{
					var scene = new Scene();
					var layer = new Layer2D();
					scene.AddLayer(layer);
					ChangeScene(scene);
				}
				else if(option.AutoGeneratedLayer == AutoGeneratedLayerType.Layer3D)
				{
					var scene = new Scene();
					var layer = new Layer3D();
					scene.AddLayer(layer);
					ChangeScene(scene);
				}

				return true;
			}
			else
			{
				core.Release();
				core = null;
				return false;
			}
		}

		/// <summary>
		/// イベントを実行し、進行可否を判断する。
		/// </summary>
		/// <returns>進行可能か?</returns>
		public static bool DoEvents()
		{
			if(core == null) return false;

			GC.Update();

			bool mes = core.DoEvents();

			if(Mouse != null)
			{
				Mouse.RefreshAllState();
			}

			if(transition != null)
			{
				if(transition.SwigObject.GetIsSceneChanged() && nextScene != null)
				{
					if(CurrentScene != null)
					{
						CurrentScene.CallChanging();
					}
					previousScene = CurrentScene;
					CurrentScene = nextScene;
					core.ChangeScene(nextScene.CoreScene);
					nextScene = null;
				}

				if(transition.SwigObject.GetIsFinished())
				{
					if(previousScene != null)
					{
						previousScene.CallDestroy();
						previousScene = null;
					}

					transition = null;
					CurrentScene.CallTransitionFinished();
				}
			}
			else
			{
				if(nextScene != null)
				{
					if(CurrentScene != null)
					{
						CurrentScene.CallChanging();
						CurrentScene.CallDestroy();
					}

					CurrentScene = nextScene;
					core.ChangeScene(nextScene.CoreScene);
					nextScene = null;
				}

			}

			return mes;
		}

		/// <summary>
		/// 更新処理を行う。
		/// </summary>
		public static void Update()
		{
			if(core == null) return;

			core.BeginDrawing();

			layerProfiler.Refresh();

			if(CurrentScene != null)
			{
				CurrentScene.Update();

				foreach(var item in CurrentScene.Layers)
				{
					layerProfiler.Record(item.Name, item.ObjectCount, item.TimeForUpdate);
				}
			}

			if(transition != null)
			{
				transition.OnUpdate();
			}

			if(CurrentScene != null)
			{
				CurrentScene.Draw();
			}

			if(transition != null)
			{
				swig.CoreScene prevScene = null;
				swig.CoreScene curScene = null;

				if(CurrentScene != null)
				{
					curScene = CurrentScene.CoreScene;
				}

				if(previousScene != null)
				{
					prevScene = previousScene.CoreScene;
				}

				if(transition.SwigObject.GetIsSceneChanged())
				{
					core.DrawSceneToWindowWithTransition(curScene, prevScene, transition.SwigObject);
				}
				else
				{
					core.DrawSceneToWindowWithTransition(null, curScene, transition.SwigObject);
				}

			}
			else
			{
				if(CurrentScene != null)
				{
					core.DrawSceneToWindow(CurrentScene.CoreScene);
				}
			}

			core.Draw();

			core.EndDrawing();

		}

		/// <summary>
		/// 終了処理を行う。
		/// </summary>
		public static void Terminate()
		{
			if(core == null) return;

			if(CurrentScene != null)
			{
				CurrentScene.CallDestroy();
			}

			if(nextScene != null)
			{
				nextScene.CallDestroy();
			}

			if(previousScene != null)
			{
				previousScene.CallDestroy();
			}


			CurrentScene = null;
			nextScene = null;
			previousScene = null;
			transition = null;

			GC.Terminate();

			core.Terminate();
			core.Release();
			core = null;

			Mouse = null;

			var refCount = swig.ace_core.GetGlobalReferenceCount__();

			if(refCount > 0)
			{
				//Console.WriteLine("未開放のインスタンスが{0}個存在します。", refCount);
				throw new Exception(string.Format("未開放のインスタンスが{0}個存在します。", refCount));
			}
		}

		/// <summary>
		/// 一番最初に追加された2Dレイヤーにオブジェクトを追加する。
		/// </summary>
		/// <param name="o">オブジェクト</param>
		/// <returns>成否</returns>
		public static bool AddObject2D(Object2D o)
		{
			Scene scene = null;

			if(CurrentScene != null)
			{
				scene = CurrentScene;
			}
			else if(nextScene != null)
			{
				scene = nextScene;
			}

			if(scene == null) return false;

			var layers = scene.Layers;

			foreach(var layer in layers)
			{
				if(layer.LayerType == LayerType.Layer2D)
				{
					var layer2d = (Layer2D)layer;
					layer2d.AddObject(o);
					return true;
				}
			}

			return false;
		}

		/// <summary>
		/// 一番最初に追加された2Dレイヤーにオブジェクトを削除する。
		/// </summary>
		/// <param name="o">オブジェクト</param>
		/// <returns>成否</returns>
		public static bool RemoveObject2D(Object2D o)
		{
			Scene scene = null;

			if(CurrentScene != null)
			{
				scene = CurrentScene;
			}
			else if(nextScene != null)
			{
				scene = nextScene;
			}

			if(scene == null) return false;

			var layers = scene.Layers;

			foreach(var layer in layers)
			{
				if(layer.LayerType == LayerType.Layer2D)
				{
					var layer2d = (Layer2D)layer;
					layer2d.RemoveObject(o);
					return true;
				}
			}

			return false;
		}

		/// <summary>
		/// 一番最初に追加された3Dレイヤーにオブジェクトを追加する。
		/// </summary>
		/// <param name="o">オブジェクト</param>
		/// <returns>成否</returns>
		public static bool AddObject3D(Object3D o)
		{
			Scene scene = null;

			if(CurrentScene != null)
			{
				scene = CurrentScene;
			}
			else if(nextScene != null)
			{
				scene = nextScene;
			}

			if(scene == null) return false;

			var layers = scene.Layers;

			foreach(var layer in layers)
			{
				if(layer.LayerType == LayerType.Layer3D)
				{
					var layer3d = (Layer3D)layer;
					layer3d.AddObject(o);
					return true;
				}
			}

			return false;
		}

		/// <summary>
		/// 一番最初に追加された3Dレイヤーにオブジェクトを削除する。
		/// </summary>
		/// <param name="o">オブジェクト</param>
		/// <returns>成否</returns>
		public static bool RemoveObject3D(Object3D o)
		{
			Scene scene = null;

			if(CurrentScene != null)
			{
				scene = CurrentScene;
			}
			else if(nextScene != null)
			{
				scene = nextScene;
			}

			if(scene == null) return false;

			var layers = scene.Layers;

			foreach(var layer in layers)
			{
				if(layer.LayerType == LayerType.Layer3D)
				{
					var layer3d = (Layer3D)layer;
					layer3d.RemoveObject(o);
					return true;
				}
			}

			return false;
		}

		/// <summary>
		/// 描画する対象となるシーンを変更する。
		/// </summary>
		/// <param name="scene">次のシーン</param>
		public static void ChangeScene(Scene scene)
		{
			nextScene = scene;
		}

		/// <summary>
		/// 描画する対象となるシーンを画面遷移効果ありで変更する。
		/// </summary>
		/// <param name="scene">次のシーン</param>
		/// <param name="transition">画面遷移効果</param>
		public static void ChangeSceneWithTransition(Scene scene, Transition transition)
		{
			nextScene = scene;
			Engine.transition = transition;
		}

		/// <summary>
		/// ウインドウを閉じる。
		/// </summary>
		public static void Close()
		{
			core.Close();
		}

		/// <summary>
		/// スクリーンショットをpngとして保存する。
		/// </summary>
		/// <param name="path">出力先</param>
		public static void TakeScreenshot(string path)
		{
			core.TakeScreenshot(path);
		}

		/// <summary>
		/// 1フレームで経過した実時間(秒)を取得、または設定する。
		/// </summary>
		/// <remarks>
		/// 基本的に開発者は使用する取得のみで設定する必要はない。
		/// 何らかの理由で無理やり経過時間を指定する場合に使用する。
		/// </remarks>
		public static float DeltaTime
		{
			get
			{
				return core.GetDeltaTime();
			}
			set
			{
				core.SetDeltaTime(value);
			}
		}

		/// <summary>
		/// 現在のFPSを取得する。
		/// </summary>
		public static float CurrentFPS
		{
			get
			{
				return core.GetCurrentFPS();
			}
		}

		/// <summary>
		/// 目標FPSを取得、または設定する。
		/// </summary>
		public static int TargetFPS
		{
			get
			{
				return core.GetTargetFPS();
			}
			set
			{
				core.SetTargetFPS(value);
			}
		}

		/// <summary>
		/// 間を指定可能なオブジェクトの実時間あたりの進行速度を取得、または設定する。
		/// </summary>
		public static float TimeSpan
		{
			get
			{
				return core.GetTimeSpan();
			}
			set
			{
				core.SetTimeSpan(value);
			}
		}

		/// <summary>
		/// フレームレートの制御方法を取得、または設定する。
		/// </summary>
		public static FramerateMode FramerateMode
		{
			get
			{
				return (FramerateMode)core.GetFramerateMode();
			}
			set
			{
				core.SetFramerateMode((swig.FramerateMode)value);
			}
		}

		/// <summary>
		/// ウインドウズの場合、ウインドウハンドルを取得する。
		/// </summary>
		public static IntPtr WindowHandle
		{
			get
			{
				return core.GetWindowHandle();
			}
		}

		private static void SetupMembers()
		{
			CurrentScene = null;
			Logger = new Log(core.GetLogger());
			Keyboard = new Keyboard(core.GetKeyboard());

			if(core.GetMouse() != null)
			{
				Mouse = new Mouse(core.GetMouse());
			}

			if(core.GetFile() != null)
			{
				File = new File(core.GetFile());
			}

			if(core.GetJoystickContainer() != null)
			{
				JoystickContainer = new JoystickContainer(core.GetJoystickContainer());
			}

			Sound = new Sound(core.GetSound());
			Graphics = new Graphics(core.GetGraphics_Imp());
			ObjectSystemFactory = new ace.ObjectSystemFactory(core.GetObjectSystemFactory());
			Profiler = new Profiler(core.GetProfiler());
			AnimationSystem = new AnimationSystem(core.GetAnimationSyatem());

			layerProfiler = core.GetLayerProfiler();
		}

		/// <summary>
		/// ウィンドウのサイズを取得する。
		/// </summary>
		/// <returns>ウィンドウのサイズ</returns>
		public static Vector2DI WindowSize
		{
			get
			{
				return core.GetWindowSize();
			}
		}
	}
}
