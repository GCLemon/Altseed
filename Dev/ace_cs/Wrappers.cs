using System;
namespace ace {
	/// <summary>
	/// 回転行列の計算順序 
	///	</summary>
	public enum RotationOrder : int
	{
		/// <summary>
		/// 
		/// </summary>
		QUATERNION = ace.swig.RotationOrder.QUATERNION,
		/// <summary>
		/// 
		/// </summary>
		XZY = ace.swig.RotationOrder.XZY,
		/// <summary>
		/// 
		/// </summary>
		XYZ = ace.swig.RotationOrder.XYZ,
		/// <summary>
		/// 
		/// </summary>
		ZXY = ace.swig.RotationOrder.ZXY,
		/// <summary>
		/// 
		/// </summary>
		ZYX = ace.swig.RotationOrder.ZYX,
		/// <summary>
		/// 
		/// </summary>
		YXZ = ace.swig.RotationOrder.YXZ,
		/// <summary>
		/// 
		/// </summary>
		YZX = ace.swig.RotationOrder.YZX,
		/// <summary>
		/// 
		/// </summary>
		AXIS = ace.swig.RotationOrder.AXIS,
	}

	/// <summary>
	/// キー間の補間方法 
	///	</summary>
	public enum InterpolationType : int
	{
		/// <summary>
		/// 次のキーまで定数で補間 
		/// </summary>
		Constant = ace.swig.InterpolationType.Constant,
		/// <summary>
		/// 次のキーまで線形で補間 
		/// </summary>
		Linear = ace.swig.InterpolationType.Linear,
		/// <summary>
		/// 次のキーまで三次方程式で補間 
		/// </summary>
		Cubic = ace.swig.InterpolationType.Cubic,
	}

	/// <summary>
	/// 起動時に自動的に生成されるレイヤーの種類 
	///	</summary>
	public enum AutoGeneratedLayerType : int
	{
		/// <summary>
		/// 
		/// </summary>
		Layer2D = ace.swig.AutoGeneratedLayerType.Layer2D,
		/// <summary>
		/// 
		/// </summary>
		Layer3D = ace.swig.AutoGeneratedLayerType.Layer3D,
		/// <summary>
		/// 
		/// </summary>
		None = ace.swig.AutoGeneratedLayerType.None,
	}

	/// <summary>
	/// レイヤーの種類 
	///	</summary>
	public enum LayerType : int
	{
		/// <summary>
		/// 
		/// </summary>
		Layer2D = ace.swig.LayerType.Layer2D,
		/// <summary>
		/// 
		/// </summary>
		Layer3D = ace.swig.LayerType.Layer3D,
	}

	/// <summary>
	/// 
	///	</summary>
	public enum WritingDirection : int
	{
		/// <summary>
		/// 
		/// </summary>
		Vertical = ace.swig.WritingDirection.Vertical,
		/// <summary>
		/// 
		/// </summary>
		Horizontal = ace.swig.WritingDirection.Horizontal,
	}

	/// <summary>
	/// フレームレートの制御方法 
	///	</summary>
	public enum FramerateMode : int
	{
		/// <summary>
		/// 固定フレームレート 
		/// </summary>
		Constant = ace.swig.FramerateMode.Constant,
		/// <summary>
		/// 可変フレームレート 
		/// </summary>
		Variable = ace.swig.FramerateMode.Variable,
	}

	/// <summary>
	/// 
	///	</summary>
	public enum TextureFormat : int
	{
		/// <summary>
		/// 
		/// </summary>
		R8G8B8A8_UNORM = ace.swig.TextureFormat.R8G8B8A8_UNORM,
		/// <summary>
		/// 
		/// </summary>
		R32G32B32A32_FLOAT = ace.swig.TextureFormat.R32G32B32A32_FLOAT,
		/// <summary>
		/// 
		/// </summary>
		R8G8B8A8_UNORM_SRGB = ace.swig.TextureFormat.R8G8B8A8_UNORM_SRGB,
		/// <summary>
		/// 
		/// </summary>
		R16G16_FLOAT = ace.swig.TextureFormat.R16G16_FLOAT,
		/// <summary>
		/// 
		/// </summary>
		R8_UNORM = ace.swig.TextureFormat.R8_UNORM,
		/// <summary>
		/// 
		/// </summary>
		BC1 = ace.swig.TextureFormat.BC1,
		/// <summary>
		/// 
		/// </summary>
		BC2 = ace.swig.TextureFormat.BC2,
		/// <summary>
		/// 
		/// </summary>
		BC3 = ace.swig.TextureFormat.BC3,
		/// <summary>
		/// 
		/// </summary>
		BC1_SRGB = ace.swig.TextureFormat.BC1_SRGB,
		/// <summary>
		/// 
		/// </summary>
		BC2_SRGB = ace.swig.TextureFormat.BC2_SRGB,
		/// <summary>
		/// 
		/// </summary>
		BC3_SRGB = ace.swig.TextureFormat.BC3_SRGB,
	}

	/// <summary>
	/// 
	///	</summary>
	public enum TextureClassType : int
	{
		/// <summary>
		/// 
		/// </summary>
		Texture2D = ace.swig.TextureClassType.Texture2D,
		/// <summary>
		/// 
		/// </summary>
		RenderTexture2D = ace.swig.TextureClassType.RenderTexture2D,
		/// <summary>
		/// 
		/// </summary>
		CubemapTexture = ace.swig.TextureClassType.CubemapTexture,
		/// <summary>
		/// 
		/// </summary>
		DepthBuffer = ace.swig.TextureClassType.DepthBuffer,
	}

	/// <summary>
	/// 描画時のブレンドモードを表す列挙体 
	///	</summary>
	public enum AlphaBlendMode : int
	{
		/// <summary>
		/// 不透明 
		/// </summary>
		Opacity = ace.swig.AlphaBlendMode.Opacity,
		/// <summary>
		/// 透明 
		/// </summary>
		Blend = ace.swig.AlphaBlendMode.Blend,
		/// <summary>
		/// 加算 
		/// </summary>
		Add = ace.swig.AlphaBlendMode.Add,
		/// <summary>
		/// 減算 
		/// </summary>
		Sub = ace.swig.AlphaBlendMode.Sub,
		/// <summary>
		/// 乗算 
		/// </summary>
		Mul = ace.swig.AlphaBlendMode.Mul,
		/// <summary>
		/// 全加算(内部処理用) 
		/// </summary>
		AddAll = ace.swig.AlphaBlendMode.AddAll,
	}

	/// <summary>
	/// 
	///	</summary>
	public enum TextureFilterType : int
	{
		/// <summary>
		/// 
		/// </summary>
		Nearest = ace.swig.TextureFilterType.Nearest,
		/// <summary>
		/// 
		/// </summary>
		Linear = ace.swig.TextureFilterType.Linear,
	}

	/// <summary>
	/// 
	///	</summary>
	public enum TextureWrapType : int
	{
		/// <summary>
		/// 
		/// </summary>
		Repeat = ace.swig.TextureWrapType.Repeat,
		/// <summary>
		/// 
		/// </summary>
		Clamp = ace.swig.TextureWrapType.Clamp,
	}

	/// <summary>
	/// 
	///	</summary>
	public enum CullingType : int
	{
		/// <summary>
		/// 
		/// </summary>
		Front = ace.swig.CullingType.Front,
		/// <summary>
		/// 
		/// </summary>
		Back = ace.swig.CullingType.Back,
		/// <summary>
		/// 
		/// </summary>
		Double = ace.swig.CullingType.Double,
	}

	/// <summary>
	/// 描画方法 
	///	</summary>
	public enum GraphicsDeviceType : int
	{
		/// <summary>
		/// 実行環境で最も安定している描画方法(初期化時に使用) 
		/// </summary>
		Default = ace.swig.GraphicsDeviceType.Default,
		/// <summary>
		/// DirectX11. 
		/// </summary>
		DirectX11 = ace.swig.GraphicsDeviceType.DirectX11,
		/// <summary>
		/// OpenGL. 
		/// </summary>
		OpenGL = ace.swig.GraphicsDeviceType.OpenGL,
	}

	/// <summary>
	/// 
	///	</summary>
	public enum Object2DType : int
	{
		/// <summary>
		/// 
		/// </summary>
		Unknown = ace.swig.Object2DType.Unknown,
		/// <summary>
		/// 
		/// </summary>
		Texture = ace.swig.Object2DType.Texture,
		/// <summary>
		/// 
		/// </summary>
		Camera = ace.swig.Object2DType.Camera,
		/// <summary>
		/// 
		/// </summary>
		Effect = ace.swig.Object2DType.Effect,
		/// <summary>
		/// 
		/// </summary>
		Text = ace.swig.Object2DType.Text,
		/// <summary>
		/// 
		/// </summary>
		Map = ace.swig.Object2DType.Map,
		/// <summary>
		/// 
		/// </summary>
		Geometry = ace.swig.Object2DType.Geometry,
	}

	/// <summary>
	/// 
	///	</summary>
	public enum RenderedObject3DType : int
	{
		/// <summary>
		/// 
		/// </summary>
		Unknown = ace.swig.RenderedObject3DType.Unknown,
		/// <summary>
		/// 
		/// </summary>
		Mesh = ace.swig.RenderedObject3DType.Mesh,
		/// <summary>
		/// 
		/// </summary>
		Camera = ace.swig.RenderedObject3DType.Camera,
		/// <summary>
		/// 
		/// </summary>
		Effect = ace.swig.RenderedObject3DType.Effect,
		/// <summary>
		/// 
		/// </summary>
		DirectionalLight = ace.swig.RenderedObject3DType.DirectionalLight,
		/// <summary>
		/// 
		/// </summary>
		MassObject = ace.swig.RenderedObject3DType.MassObject,
		/// <summary>
		/// 
		/// </summary>
		Terrain = ace.swig.RenderedObject3DType.Terrain,
	}

	/// <summary>
	/// シェーダーに対して外部から設定可能なプロパティの変数の種類 
	///	</summary>
	public enum ShaderVariableType : int
	{
		/// <summary>
		/// 
		/// </summary>
		Unknown = ace.swig.ShaderVariableType.Unknown,
		/// <summary>
		/// 
		/// </summary>
		Float = ace.swig.ShaderVariableType.Float,
		/// <summary>
		/// 
		/// </summary>
		Vector2DF = ace.swig.ShaderVariableType.Vector2DF,
		/// <summary>
		/// 
		/// </summary>
		Vector3DF = ace.swig.ShaderVariableType.Vector3DF,
		/// <summary>
		/// 
		/// </summary>
		Vector4DF = ace.swig.ShaderVariableType.Vector4DF,
		/// <summary>
		/// 
		/// </summary>
		Vector4DF_Array = ace.swig.ShaderVariableType.Vector4DF_Array,
		/// <summary>
		/// 
		/// </summary>
		Matrix44 = ace.swig.ShaderVariableType.Matrix44,
		/// <summary>
		/// 
		/// </summary>
		Matrix44_Array = ace.swig.ShaderVariableType.Matrix44_Array,
		/// <summary>
		/// 
		/// </summary>
		Texture2D = ace.swig.ShaderVariableType.Texture2D,
		/// <summary>
		/// 
		/// </summary>
		CubemapTexture = ace.swig.ShaderVariableType.CubemapTexture,
	}

	/// <summary>
	/// 3D描画時に表示されるバッファ 
	///	</summary>
	public enum VisualizedBufferType : int
	{
		/// <summary>
		/// 
		/// </summary>
		FinalImage = ace.swig.VisualizedBufferType.FinalImage,
		/// <summary>
		/// 
		/// </summary>
		DiffuseColor = ace.swig.VisualizedBufferType.DiffuseColor,
		/// <summary>
		/// 
		/// </summary>
		SpecularColor = ace.swig.VisualizedBufferType.SpecularColor,
		/// <summary>
		/// 
		/// </summary>
		Normal = ace.swig.VisualizedBufferType.Normal,
		/// <summary>
		/// 
		/// </summary>
		Smoothness = ace.swig.VisualizedBufferType.Smoothness,
		/// <summary>
		/// 
		/// </summary>
		Environment = ace.swig.VisualizedBufferType.Environment,
		/// <summary>
		/// 
		/// </summary>
		Occlusion = ace.swig.VisualizedBufferType.Occlusion,
	}

	/// <summary>
	/// マウスボタンの押し状態を示す列挙型 
	///	</summary>
	public enum MouseButtonState : int
	{
		/// <summary>
		/// ボタンをこのフレームで押した状態 
		/// </summary>
		Push = ace.swig.MouseButtonState.Push,
		/// <summary>
		/// ボタンをこのフレームで離した状態 
		/// </summary>
		Release = ace.swig.MouseButtonState.Release,
		/// <summary>
		/// ボタンを離し続けている状態 
		/// </summary>
		Free = ace.swig.MouseButtonState.Free,
		/// <summary>
		/// ボタンを押し続けている状態 
		/// </summary>
		Hold = ace.swig.MouseButtonState.Hold,
	}

	/// <summary>
	/// ACEで扱うキーボードのキー一覧 
	///	</summary>
	public enum Keys : int
	{
		/// <summary>
		/// 
		/// </summary>
		Unknown = ace.swig.Keys.Unknown,
		/// <summary>
		/// 
		/// </summary>
		Space = ace.swig.Keys.Space,
		/// <summary>
		/// 
		/// </summary>
		Apostrophe = ace.swig.Keys.Apostrophe,
		/// <summary>
		/// 
		/// </summary>
		Comma = ace.swig.Keys.Comma,
		/// <summary>
		/// 
		/// </summary>
		Minus = ace.swig.Keys.Minus,
		/// <summary>
		/// 
		/// </summary>
		Period = ace.swig.Keys.Period,
		/// <summary>
		/// 
		/// </summary>
		Slash = ace.swig.Keys.Slash,
		/// <summary>
		/// 
		/// </summary>
		Num0 = ace.swig.Keys.Num0,
		/// <summary>
		/// 
		/// </summary>
		Num1 = ace.swig.Keys.Num1,
		/// <summary>
		/// 
		/// </summary>
		Num2 = ace.swig.Keys.Num2,
		/// <summary>
		/// 
		/// </summary>
		Num3 = ace.swig.Keys.Num3,
		/// <summary>
		/// 
		/// </summary>
		Num4 = ace.swig.Keys.Num4,
		/// <summary>
		/// 
		/// </summary>
		Num5 = ace.swig.Keys.Num5,
		/// <summary>
		/// 
		/// </summary>
		Num6 = ace.swig.Keys.Num6,
		/// <summary>
		/// 
		/// </summary>
		Num7 = ace.swig.Keys.Num7,
		/// <summary>
		/// 
		/// </summary>
		Num8 = ace.swig.Keys.Num8,
		/// <summary>
		/// 
		/// </summary>
		Num9 = ace.swig.Keys.Num9,
		/// <summary>
		/// 
		/// </summary>
		Semicolon = ace.swig.Keys.Semicolon,
		/// <summary>
		/// 
		/// </summary>
		Equal = ace.swig.Keys.Equal,
		/// <summary>
		/// 
		/// </summary>
		A = ace.swig.Keys.A,
		/// <summary>
		/// 
		/// </summary>
		B = ace.swig.Keys.B,
		/// <summary>
		/// 
		/// </summary>
		C = ace.swig.Keys.C,
		/// <summary>
		/// 
		/// </summary>
		D = ace.swig.Keys.D,
		/// <summary>
		/// 
		/// </summary>
		E = ace.swig.Keys.E,
		/// <summary>
		/// 
		/// </summary>
		F = ace.swig.Keys.F,
		/// <summary>
		/// 
		/// </summary>
		G = ace.swig.Keys.G,
		/// <summary>
		/// 
		/// </summary>
		H = ace.swig.Keys.H,
		/// <summary>
		/// 
		/// </summary>
		I = ace.swig.Keys.I,
		/// <summary>
		/// 
		/// </summary>
		J = ace.swig.Keys.J,
		/// <summary>
		/// 
		/// </summary>
		K = ace.swig.Keys.K,
		/// <summary>
		/// 
		/// </summary>
		L = ace.swig.Keys.L,
		/// <summary>
		/// 
		/// </summary>
		M = ace.swig.Keys.M,
		/// <summary>
		/// 
		/// </summary>
		N = ace.swig.Keys.N,
		/// <summary>
		/// 
		/// </summary>
		O = ace.swig.Keys.O,
		/// <summary>
		/// 
		/// </summary>
		P = ace.swig.Keys.P,
		/// <summary>
		/// 
		/// </summary>
		Q = ace.swig.Keys.Q,
		/// <summary>
		/// 
		/// </summary>
		R = ace.swig.Keys.R,
		/// <summary>
		/// 
		/// </summary>
		S = ace.swig.Keys.S,
		/// <summary>
		/// 
		/// </summary>
		T = ace.swig.Keys.T,
		/// <summary>
		/// 
		/// </summary>
		U = ace.swig.Keys.U,
		/// <summary>
		/// 
		/// </summary>
		V = ace.swig.Keys.V,
		/// <summary>
		/// 
		/// </summary>
		W = ace.swig.Keys.W,
		/// <summary>
		/// 
		/// </summary>
		X = ace.swig.Keys.X,
		/// <summary>
		/// 
		/// </summary>
		Y = ace.swig.Keys.Y,
		/// <summary>
		/// 
		/// </summary>
		Z = ace.swig.Keys.Z,
		/// <summary>
		/// 
		/// </summary>
		LeftBracket = ace.swig.Keys.LeftBracket,
		/// <summary>
		/// 
		/// </summary>
		Backslash = ace.swig.Keys.Backslash,
		/// <summary>
		/// 
		/// </summary>
		RightBracket = ace.swig.Keys.RightBracket,
		/// <summary>
		/// 
		/// </summary>
		GraveAccent = ace.swig.Keys.GraveAccent,
		/// <summary>
		/// 
		/// </summary>
		World1 = ace.swig.Keys.World1,
		/// <summary>
		/// 
		/// </summary>
		World2 = ace.swig.Keys.World2,
		/// <summary>
		/// 
		/// </summary>
		Escape = ace.swig.Keys.Escape,
		/// <summary>
		/// 
		/// </summary>
		Enter = ace.swig.Keys.Enter,
		/// <summary>
		/// 
		/// </summary>
		Tab = ace.swig.Keys.Tab,
		/// <summary>
		/// 
		/// </summary>
		Backspace = ace.swig.Keys.Backspace,
		/// <summary>
		/// 
		/// </summary>
		Insert = ace.swig.Keys.Insert,
		/// <summary>
		/// 
		/// </summary>
		Delete = ace.swig.Keys.Delete,
		/// <summary>
		/// 
		/// </summary>
		Right = ace.swig.Keys.Right,
		/// <summary>
		/// 
		/// </summary>
		Left = ace.swig.Keys.Left,
		/// <summary>
		/// 
		/// </summary>
		Down = ace.swig.Keys.Down,
		/// <summary>
		/// 
		/// </summary>
		Up = ace.swig.Keys.Up,
		/// <summary>
		/// 
		/// </summary>
		PageUp = ace.swig.Keys.PageUp,
		/// <summary>
		/// 
		/// </summary>
		PageDown = ace.swig.Keys.PageDown,
		/// <summary>
		/// 
		/// </summary>
		Home = ace.swig.Keys.Home,
		/// <summary>
		/// 
		/// </summary>
		End = ace.swig.Keys.End,
		/// <summary>
		/// 
		/// </summary>
		CapsLock = ace.swig.Keys.CapsLock,
		/// <summary>
		/// 
		/// </summary>
		ScrollLock = ace.swig.Keys.ScrollLock,
		/// <summary>
		/// 
		/// </summary>
		NumLock = ace.swig.Keys.NumLock,
		/// <summary>
		/// 
		/// </summary>
		PrintScreen = ace.swig.Keys.PrintScreen,
		/// <summary>
		/// 
		/// </summary>
		Pause = ace.swig.Keys.Pause,
		/// <summary>
		/// 
		/// </summary>
		F1 = ace.swig.Keys.F1,
		/// <summary>
		/// 
		/// </summary>
		F2 = ace.swig.Keys.F2,
		/// <summary>
		/// 
		/// </summary>
		F3 = ace.swig.Keys.F3,
		/// <summary>
		/// 
		/// </summary>
		F4 = ace.swig.Keys.F4,
		/// <summary>
		/// 
		/// </summary>
		F5 = ace.swig.Keys.F5,
		/// <summary>
		/// 
		/// </summary>
		F6 = ace.swig.Keys.F6,
		/// <summary>
		/// 
		/// </summary>
		F7 = ace.swig.Keys.F7,
		/// <summary>
		/// 
		/// </summary>
		F8 = ace.swig.Keys.F8,
		/// <summary>
		/// 
		/// </summary>
		F9 = ace.swig.Keys.F9,
		/// <summary>
		/// 
		/// </summary>
		F10 = ace.swig.Keys.F10,
		/// <summary>
		/// 
		/// </summary>
		F11 = ace.swig.Keys.F11,
		/// <summary>
		/// 
		/// </summary>
		F12 = ace.swig.Keys.F12,
		/// <summary>
		/// 
		/// </summary>
		F13 = ace.swig.Keys.F13,
		/// <summary>
		/// 
		/// </summary>
		F14 = ace.swig.Keys.F14,
		/// <summary>
		/// 
		/// </summary>
		F15 = ace.swig.Keys.F15,
		/// <summary>
		/// 
		/// </summary>
		F16 = ace.swig.Keys.F16,
		/// <summary>
		/// 
		/// </summary>
		F17 = ace.swig.Keys.F17,
		/// <summary>
		/// 
		/// </summary>
		F18 = ace.swig.Keys.F18,
		/// <summary>
		/// 
		/// </summary>
		F19 = ace.swig.Keys.F19,
		/// <summary>
		/// 
		/// </summary>
		F20 = ace.swig.Keys.F20,
		/// <summary>
		/// 
		/// </summary>
		F21 = ace.swig.Keys.F21,
		/// <summary>
		/// 
		/// </summary>
		F22 = ace.swig.Keys.F22,
		/// <summary>
		/// 
		/// </summary>
		F23 = ace.swig.Keys.F23,
		/// <summary>
		/// 
		/// </summary>
		F24 = ace.swig.Keys.F24,
		/// <summary>
		/// 
		/// </summary>
		F25 = ace.swig.Keys.F25,
		/// <summary>
		/// 
		/// </summary>
		Keypad0 = ace.swig.Keys.Keypad0,
		/// <summary>
		/// 
		/// </summary>
		Keypad1 = ace.swig.Keys.Keypad1,
		/// <summary>
		/// 
		/// </summary>
		Keypad2 = ace.swig.Keys.Keypad2,
		/// <summary>
		/// 
		/// </summary>
		Keypad3 = ace.swig.Keys.Keypad3,
		/// <summary>
		/// 
		/// </summary>
		Keypad4 = ace.swig.Keys.Keypad4,
		/// <summary>
		/// 
		/// </summary>
		Keypad5 = ace.swig.Keys.Keypad5,
		/// <summary>
		/// 
		/// </summary>
		Keypad6 = ace.swig.Keys.Keypad6,
		/// <summary>
		/// 
		/// </summary>
		Keypad7 = ace.swig.Keys.Keypad7,
		/// <summary>
		/// 
		/// </summary>
		Keypad8 = ace.swig.Keys.Keypad8,
		/// <summary>
		/// 
		/// </summary>
		Keypad9 = ace.swig.Keys.Keypad9,
		/// <summary>
		/// 
		/// </summary>
		KeypadDecimal = ace.swig.Keys.KeypadDecimal,
		/// <summary>
		/// 
		/// </summary>
		KeypadDivide = ace.swig.Keys.KeypadDivide,
		/// <summary>
		/// 
		/// </summary>
		KeypadMultiply = ace.swig.Keys.KeypadMultiply,
		/// <summary>
		/// 
		/// </summary>
		KeypadSubstract = ace.swig.Keys.KeypadSubstract,
		/// <summary>
		/// 
		/// </summary>
		KeypadAdd = ace.swig.Keys.KeypadAdd,
		/// <summary>
		/// 
		/// </summary>
		KeypadEnter = ace.swig.Keys.KeypadEnter,
		/// <summary>
		/// 
		/// </summary>
		KeypadEqual = ace.swig.Keys.KeypadEqual,
		/// <summary>
		/// 
		/// </summary>
		LeftShift = ace.swig.Keys.LeftShift,
		/// <summary>
		/// 
		/// </summary>
		LeftControl = ace.swig.Keys.LeftControl,
		/// <summary>
		/// 
		/// </summary>
		LeftAlt = ace.swig.Keys.LeftAlt,
		/// <summary>
		/// 
		/// </summary>
		LeftWin = ace.swig.Keys.LeftWin,
		/// <summary>
		/// 
		/// </summary>
		RightShift = ace.swig.Keys.RightShift,
		/// <summary>
		/// 
		/// </summary>
		RightControl = ace.swig.Keys.RightControl,
		/// <summary>
		/// 
		/// </summary>
		RightAlt = ace.swig.Keys.RightAlt,
		/// <summary>
		/// 
		/// </summary>
		RightWin = ace.swig.Keys.RightWin,
		/// <summary>
		/// 
		/// </summary>
		Menu = ace.swig.Keys.Menu,
		/// <summary>
		/// 
		/// </summary>
		Last = ace.swig.Keys.Last,
		/// <summary>
		/// 
		/// </summary>
		MAX = ace.swig.Keys.MAX,
	}

	/// <summary>
	/// キーボードの押下状態を示す列挙型 
	///	</summary>
	public enum KeyState : int
	{
		/// <summary>
		/// キーをこのフレームで押した状態 
		/// </summary>
		Push = ace.swig.KeyState.Push,
		/// <summary>
		/// キーをこのフレームで離した状態 
		/// </summary>
		Release = ace.swig.KeyState.Release,
		/// <summary>
		/// キーを押し続けている状態 
		/// </summary>
		Hold = ace.swig.KeyState.Hold,
		/// <summary>
		/// キーを離し続けている状態 
		/// </summary>
		Free = ace.swig.KeyState.Free,
	}

	/// <summary>
	/// ジョイスティックのボタンの押し状態を示す列挙型 
	///	</summary>
	public enum JoystickButtonState : int
	{
		/// <summary>
		/// ボタンをこのフレームで押した状態 
		/// </summary>
		Push = ace.swig.JoystickButtonState.Push,
		/// <summary>
		/// ボタンをこのフレームで離した状態 
		/// </summary>
		Release = ace.swig.JoystickButtonState.Release,
		/// <summary>
		/// ボタンを離し続けている状態 
		/// </summary>
		Free = ace.swig.JoystickButtonState.Free,
		/// <summary>
		/// ボタンを押し続けている状態 
		/// </summary>
		Hold = ace.swig.JoystickButtonState.Hold,
	}

	/// <summary>
	/// 
	///	</summary>
	public enum LogLevel : int
	{
		/// <summary>
		/// 
		/// </summary>
		Error = ace.swig.LogLevel.Error,
		/// <summary>
		/// 
		/// </summary>
		Critical = ace.swig.LogLevel.Critical,
		/// <summary>
		/// 
		/// </summary>
		Warning = ace.swig.LogLevel.Warning,
		/// <summary>
		/// 
		/// </summary>
		Information = ace.swig.LogLevel.Information,
		/// <summary>
		/// 
		/// </summary>
		All = ace.swig.LogLevel.All,
	}

	/// <summary>
	/// 図形の種類 
	///	</summary>
	public enum ShapeType : int
	{
		/// <summary>
		/// 円 
		/// </summary>
		CircleShape = ace.swig.ShapeType.CircleShape,
		/// <summary>
		/// 弧 
		/// </summary>
		ArcShape = ace.swig.ShapeType.ArcShape,
		/// <summary>
		/// 線分 
		/// </summary>
		LineShape = ace.swig.ShapeType.LineShape,
		/// <summary>
		/// 矩形 
		/// </summary>
		RectangleShape = ace.swig.ShapeType.RectangleShape,
		/// <summary>
		/// 三角形 
		/// </summary>
		TriangleShape = ace.swig.ShapeType.TriangleShape,
		/// <summary>
		/// 多角形 
		/// </summary>
		PolygonShape = ace.swig.ShapeType.PolygonShape,
	}

	/// <summary>
	/// 
	///	</summary>
	public enum ChildMode : int
	{
		/// <summary>
		/// 
		/// </summary>
		Position = ace.swig.ChildMode.Position,
		/// <summary>
		/// 
		/// </summary>
		All = ace.swig.ChildMode.All,
		/// <summary>
		/// 
		/// </summary>
		Nothing = ace.swig.ChildMode.Nothing,
	}

	/// <summary>
	/// 
	/// </summary>
	public partial class Accessor
	{
		private ace.swig.Accessor coreInstance;


	}


	/// <summary>
	/// 
	/// </summary>
	public partial class Option
	{
		private ace.swig.CoreOption coreInstance;


	}


	/// <summary>
	/// 参照カウンタのインターフェース 
	/// </summary>
	public partial class IReference
	{
		private ace.swig.IReference coreInstance;

		/// <summary>
		/// 参照カウンタを取得する。
		/// </summary>
		public int Ref
		{
			get { return coreInstance.GetRef(); }
		}


		/// <summary>
		/// 参照カウンタを加算する。 
		/// </summary>
		/// <returns>加算後の参照カウンタ </returns>
		public int AddRef()
		{
			return coreInstance.AddRef();
		}

		/// <summary>
		/// 参照カウンタを減算する。0になった時、インスタンスを削除する。 
		/// </summary>
		/// <returns>減算後の参照カウンタ </returns>
		public int Release()
		{
			return coreInstance.Release();
		}

	}


	/// <summary>
	/// 参照カウンタオブジェクト 
	/// </summary>
	public partial class ReferenceObject
	{
		private ace.swig.ReferenceObject coreInstance;

		/// <summary>
		/// 参照カウンタを取得する。
		/// </summary>
		public int Ref
		{
			get { return coreInstance.GetRef(); }
		}


		/// <summary>
		/// 参照カウンタを加算する。 
		/// </summary>
		/// <returns>加算後の参照カウンタ </returns>
		public int AddRef()
		{
			return coreInstance.AddRef();
		}

		/// <summary>
		/// 参照カウンタを減算する。0になった時、インスタンスを削除する。 
		/// </summary>
		/// <returns>減算後の参照カウンタ </returns>
		public int Release()
		{
			return coreInstance.Release();
		}

	}


	/// <summary>
	/// 
	/// </summary>
	public partial class StructTranslator
	{
		private ace.swig.StructTranslator coreInstance;


		/// <summary>
		/// 
		/// </summary>
		/// <param name="x"></param>
		/// <param name="y"></param>
		public static void EnqueueVector2DF(float x, float y)
		{
			StructTranslator.EnqueueVector2DF(x, y);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="x"></param>
		/// <param name="y"></param>
		/// <param name="z"></param>
		public static void EnqueueVector3DF(float x, float y, float z)
		{
			StructTranslator.EnqueueVector3DF(x, y, z);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="x"></param>
		/// <param name="y"></param>
		/// <param name="z"></param>
		/// <param name="w"></param>
		public static void EnqueueVector4DF(float x, float y, float z, float w)
		{
			StructTranslator.EnqueueVector4DF(x, y, z, w);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="x"></param>
		/// <param name="y"></param>
		public static void EnqueueVector2DI(int x, int y)
		{
			StructTranslator.EnqueueVector2DI(x, y);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="r"></param>
		/// <param name="g"></param>
		/// <param name="b"></param>
		/// <param name="a"></param>
		public static void EnqueueColor(int r, int g, int b, int a)
		{
			StructTranslator.EnqueueColor(r, g, b, a);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="x"></param>
		/// <param name="y"></param>
		/// <param name="w"></param>
		/// <param name="h"></param>
		public static void EnqueueRectF(float x, float y, float w, float h)
		{
			StructTranslator.EnqueueRectF(x, y, w, h);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="x"></param>
		/// <param name="y"></param>
		/// <param name="w"></param>
		/// <param name="h"></param>
		public static void EnqueueRectI(int x, int y, int w, int h)
		{
			StructTranslator.EnqueueRectI(x, y, w, h);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="m00"></param>
		/// <param name="m01"></param>
		/// <param name="m02"></param>
		/// <param name="m03"></param>
		/// <param name="m10"></param>
		/// <param name="m11"></param>
		/// <param name="m12"></param>
		/// <param name="m13"></param>
		/// <param name="m20"></param>
		/// <param name="m21"></param>
		/// <param name="m22"></param>
		/// <param name="m23"></param>
		/// <param name="m30"></param>
		/// <param name="m31"></param>
		/// <param name="m32"></param>
		/// <param name="m33"></param>
		public static void EnqueueMatrix44(float m00, float m01, float m02, float m03, float m10, float m11, float m12, float m13, float m20, float m21, float m22, float m23, float m30, float m31, float m32, float m33)
		{
			StructTranslator.EnqueueMatrix44(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="kv_x"></param>
		/// <param name="kv_y"></param>
		/// <param name="lh_x"></param>
		/// <param name="lh_y"></param>
		/// <param name="rh_x"></param>
		/// <param name="rh_y"></param>
		/// <param name="i"></param>
		public static void EnqueueFCurveKeyframe(float kv_x, float kv_y, float lh_x, float lh_y, float rh_x, float rh_y, int i)
		{
			StructTranslator.EnqueueFCurveKeyframe(kv_x, kv_y, lh_x, lh_y, rh_x, rh_y, i);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public static float DequeueFloat()
		{
			return StructTranslator.DequeueFloat();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public static int DequeueInt()
		{
			return StructTranslator.DequeueInt();
		}

	}


	/// <summary>
	/// 
	/// </summary>
	public partial class Window
	{
		private ace.swig.Window_Imp coreInstance;

		/// <summary>
		/// 
		/// </summary>
		public ace.Vector2DI Size
		{
			get { return coreInstance.GetSize(); }
		}


	}


}
