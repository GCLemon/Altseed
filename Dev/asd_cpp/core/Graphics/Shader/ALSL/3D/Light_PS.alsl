
float calcD_GGX(float roughness, float dotNH)
{
	float alpha = roughness*roughness;
	float alphaSqr = alpha*alpha;
	float pi = 3.14159;
	float denom = dotNH * dotNH *(alphaSqr-1.0) + 1.0;
	return (alpha / denom) * (alpha / denom) / pi;
}

float calcF(float F0, float dotLH)
{
	float dotLH5 = pow(1.0f-dotLH,5);
	return F0 + (1.0-F0)*(dotLH5);
}

float calcG_Schlick(float roughness, float dotNV, float dotNL)
{
	// UE4
	float k = (roughness + 1.0) * (roughness + 1.0) / 8.0;
	// float k = roughness * roughness / 2.0;

	float gV = dotNV*(1.0 - k) + k;
	float gL = dotNL*(1.0 - k) + k;

	return 1.0 / (gV * gL);
}

/*
	optimized-ggx.hlsl
	AUTHOR: John Hable

	F0はフレネル反射係数　非金属なら0.05程度、金属なら0.9程度
*/
float calcLightingGGX(float3 N, float3 V, float3 L, float roughness, float F0)
{
	float3 H = normalize(V+L);

	#ifdef OPENGL
	float dotNL = clamp( dot(N,L), 0.0, 1.0);
	float dotLH = clamp( dot(L,H), 0.0, 1.0);
	float dotNH = clamp( dot(N,H), 0.0, 1.0) - 0.001;
	float dotNV = clamp( dot(N,V), 0.0, 1.0) + 0.001;
	#endif

	#ifdef DIRECTX
	float dotNL = saturate( dot(N,L) );
	float dotLH = saturate( dot(L,H) );
	float dotNH = saturate( dot(N,H) ) - 0.001;
	float dotNV = saturate( dot(N,V) ) + 0.001;
	#endif

	float D = calcD_GGX(roughness, dotNH);
	float F = calcF(F0, dotLH);
	float G = calcG_Schlick(roughness, dotNV, dotNL);

	return dotNL * D * F * G / 4.0;
}

float3 calcAmbientColor(float3 upDir, float3 normal)
{
	float3 color = float3(0.0,0.0,0.0);
	float NoU = dot(normal,upDir);
	color.xyz = color.xyz + skyLightColor * max(NoU+1,0.0) / 2.0;
	color.xyz = color.xyz + groundLightColor * max(-NoU+1,0.0) / 2.0;
	return color;
}

float3 calcDirectionalLightDiffuseColor(float3 diffuseColor, float3 normal, float3 lightDir, float shadow, float ao)
{
	float3 color = float3(0.0,0.0,0.0);

	float NoL = dot(normal,lightDir);
	color.xyz = directionalLightColor * max(NoL,0.0) * shadow * ao / 3.14;
	color.xyz = color.xyz * diffuseColor.xyz;
	return color;
}

float3 calcDirectionalLightSpecularColor(float3 specularColor, float3 normal, float3 viewDir, float3 lightDir, float smoothness, float fresnel, float shadow, float ao)
{
	float roughness = 1.0 - smoothness;
	roughness = max(roughness, 0.08);
	roughness = min(roughness, 0.92);

	float3 specular;
	specular.x = calcLightingGGX(normal, viewDir, lightDir, roughness, specularColor.x);
	specular.y = calcLightingGGX(normal, viewDir, lightDir, roughness, specularColor.y);
	specular.z = calcLightingGGX(normal, viewDir, lightDir, roughness, specularColor.z);

	specular = specular * shadow * ao;
	specular.xyz = directionalLightColor * specular.xyz;

	float NoL = dot(normal, lightDir);
	specular.xyz = specular.xyz  * max(NoL, 0.000000);

	return specular;
}

float VSM(float2 moments, float t)
{
	float ex = moments.x;
	float ex2 = moments.y;

	float p = 0.0;
	if (t <= ex) p = 1.0;

	float variance = ex2 - ex * ex;
	variance = max(variance, 0.00002);

	float d = t - ex;
	float p_max = variance / (variance + d * d);
	return max(p, p_max);
}

float3 CalcDiffuseColor(float3 baseColor, float metalness)
{
	return baseColor * (1.0-metalness);
}

float3 CalcSpecularColor(float3 baseColor, float metalness)
{
	float3 minColor = float3(0.04, 0.04, 0.04);
	return minColor.xyz * (1.0-metalness) + baseColor.xyz * metalness;
}