/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_asd_core(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_asd_core(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_asd_core(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


/* Callback for returning strings to C# without leaking memory */

#include <stdint.h>
#include <string>

namespace asd
{
#ifdef _WIN32
typedef wchar_t achar;
typedef std::wstring astring;
#else 
typedef char16_t achar;
typedef std::basic_string<char16_t> astring;
#endif
};

typedef void * (SWIGSTDCALL* SWIG_CSharpWStringHelperCallback)(const ::asd::achar *);
static SWIG_CSharpWStringHelperCallback SWIG_csharp_wstring_callback = NULL;


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterWStringCallback_asd_core(SWIG_CSharpWStringHelperCallback callback) {
  SWIG_csharp_wstring_callback = callback;
}



#include "dll.h"



#include <stdint.h>		// Use the C99 official header


#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <string>

SWIGINTERN std::vector< uint8_t > *new_std_vector_Sl_uint8_t_Sg___SWIG_2(int capacity){
        std::vector< unsigned char >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< unsigned char >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN unsigned char std_vector_Sl_uint8_t_Sg__getitemcopy(std::vector< uint8_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN unsigned char const &std_vector_Sl_uint8_t_Sg__getitem(std::vector< uint8_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__setitem(std::vector< uint8_t > *self,int index,unsigned char const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__AddRange(std::vector< uint8_t > *self,std::vector< unsigned char > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< unsigned char > *std_vector_Sl_uint8_t_Sg__GetRange(std::vector< uint8_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< unsigned char >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__Insert(std::vector< uint8_t > *self,int index,unsigned char const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__InsertRange(std::vector< uint8_t > *self,int index,std::vector< unsigned char > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__RemoveAt(std::vector< uint8_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__RemoveRange(std::vector< uint8_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< unsigned char > *std_vector_Sl_uint8_t_Sg__Repeat(unsigned char const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< unsigned char >(count, value);
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__Reverse__SWIG_0(std::vector< uint8_t > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__Reverse__SWIG_1(std::vector< uint8_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__SetRange(std::vector< uint8_t > *self,int index,std::vector< unsigned char > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_uint8_t_Sg__Contains(std::vector< uint8_t > *self,unsigned char const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_uint8_t_Sg__IndexOf(std::vector< uint8_t > *self,unsigned char const &value){
        int index = -1;
        std::vector< unsigned char >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_uint8_t_Sg__LastIndexOf(std::vector< uint8_t > *self,unsigned char const &value){
        int index = -1;
        std::vector< unsigned char >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_uint8_t_Sg__Remove(std::vector< uint8_t > *self,unsigned char const &value){
        std::vector< unsigned char >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_VectorUint8_Clear(void * jarg1) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorUint8_Add(void * jarg1, unsigned char jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((unsigned char const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VectorUint8_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  result = ((std::vector< uint8_t > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VectorUint8_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  result = ((std::vector< uint8_t > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorUint8_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (std::vector< unsigned char >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorUint8__SWIG_0() {
  void * jresult ;
  std::vector< uint8_t > *result = 0 ;
  
  result = (std::vector< uint8_t > *)new std::vector< uint8_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorUint8__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< uint8_t > *arg1 = 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint8_t > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< uint8_t > *)new std::vector< uint8_t >((std::vector< uint8_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorUint8__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< uint8_t > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< uint8_t > *)new_std_vector_Sl_uint8_t_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_VectorUint8_getitemcopy(void * jarg1, int jarg2) {
  unsigned char jresult ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  unsigned char result;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (unsigned char)std_vector_Sl_uint8_t_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_VectorUint8_getitem(void * jarg1, int jarg2) {
  unsigned char jresult ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  unsigned char *result = 0 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (unsigned char *) &std_vector_Sl_uint8_t_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorUint8_setitem(void * jarg1, int jarg2, unsigned char jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  unsigned char *arg3 = 0 ;
  unsigned char temp3 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned char)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint8_t_Sg__setitem(arg1,arg2,(unsigned char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorUint8_AddRange(void * jarg1, void * jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char > *arg2 = 0 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (std::vector< unsigned char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_uint8_t_Sg__AddRange(arg1,(std::vector< unsigned char > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorUint8_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< unsigned char > *result = 0 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< unsigned char > *)std_vector_Sl_uint8_t_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorUint8_Insert(void * jarg1, int jarg2, unsigned char jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  unsigned char *arg3 = 0 ;
  unsigned char temp3 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned char)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint8_t_Sg__Insert(arg1,arg2,(unsigned char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorUint8_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned char > *arg3 = 0 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_uint8_t_Sg__InsertRange(arg1,arg2,(std::vector< unsigned char > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorUint8_RemoveAt(void * jarg1, int jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_uint8_t_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorUint8_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_uint8_t_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorUint8_Repeat(unsigned char jarg1, int jarg2) {
  void * jresult ;
  unsigned char *arg1 = 0 ;
  int arg2 ;
  unsigned char temp1 ;
  std::vector< unsigned char > *result = 0 ;
  
  temp1 = (unsigned char)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned char > *)std_vector_Sl_uint8_t_Sg__Repeat((unsigned char const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorUint8_Reverse__SWIG_0(void * jarg1) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  std_vector_Sl_uint8_t_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorUint8_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_uint8_t_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorUint8_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned char > *arg3 = 0 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_uint8_t_Sg__SetRange(arg1,arg2,(std::vector< unsigned char > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorUint8_Contains(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  bool result;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_uint8_t_Sg__Contains(arg1,(unsigned char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorUint8_IndexOf(void * jarg1, unsigned char jarg2) {
  int jresult ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  int result;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_uint8_t_Sg__IndexOf(arg1,(unsigned char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorUint8_LastIndexOf(void * jarg1, unsigned char jarg2) {
  int jresult ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  int result;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_uint8_t_Sg__LastIndexOf(arg1,(unsigned char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorUint8_Remove(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  bool result;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_uint8_t_Sg__Remove(arg1,(unsigned char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorUint8(void * jarg1) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderSettings_IsLightweightMode_set(void * jarg1, unsigned int jarg2) {
  asd::RenderSettings *arg1 = (asd::RenderSettings *) 0 ;
  bool arg2 ;
  
  arg1 = (asd::RenderSettings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsLightweightMode = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RenderSettings_IsLightweightMode_get(void * jarg1) {
  unsigned int jresult ;
  asd::RenderSettings *arg1 = (asd::RenderSettings *) 0 ;
  bool result;
  
  arg1 = (asd::RenderSettings *)jarg1; 
  result = (bool) ((arg1)->IsLightweightMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderSettings_VisualizedBuffer_set(void * jarg1, int jarg2) {
  asd::RenderSettings *arg1 = (asd::RenderSettings *) 0 ;
  asd::VisualizedBufferType arg2 ;
  
  arg1 = (asd::RenderSettings *)jarg1; 
  arg2 = (asd::VisualizedBufferType)jarg2; 
  if (arg1) (arg1)->VisualizedBuffer = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RenderSettings_VisualizedBuffer_get(void * jarg1) {
  int jresult ;
  asd::RenderSettings *arg1 = (asd::RenderSettings *) 0 ;
  asd::VisualizedBufferType result;
  
  arg1 = (asd::RenderSettings *)jarg1; 
  result = (asd::VisualizedBufferType) ((arg1)->VisualizedBuffer);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RenderSettings() {
  void * jresult ;
  asd::RenderSettings *result = 0 ;
  
  result = (asd::RenderSettings *)new asd::RenderSettings();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RenderSettings(void * jarg1) {
  asd::RenderSettings *arg1 = (asd::RenderSettings *) 0 ;
  
  arg1 = (asd::RenderSettings *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IReference_AddRef(void * jarg1) {
  int jresult ;
  asd::IReference *arg1 = (asd::IReference *) 0 ;
  int result;
  
  arg1 = (asd::IReference *)jarg1; 
  result = (int)(arg1)->AddRef();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IReference_GetRef(void * jarg1) {
  int jresult ;
  asd::IReference *arg1 = (asd::IReference *) 0 ;
  int result;
  
  arg1 = (asd::IReference *)jarg1; 
  result = (int)(arg1)->GetRef();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IReference_Release(void * jarg1) {
  int jresult ;
  asd::IReference *arg1 = (asd::IReference *) 0 ;
  int result;
  
  arg1 = (asd::IReference *)jarg1; 
  result = (int)(arg1)->Release();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IReference(void * jarg1) {
  asd::IReference *arg1 = (asd::IReference *) 0 ;
  
  arg1 = (asd::IReference *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ReferenceObject() {
  void * jresult ;
  asd::ReferenceObject *result = 0 ;
  
  result = (asd::ReferenceObject *)new asd::ReferenceObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ReferenceObject(void * jarg1) {
  asd::ReferenceObject *arg1 = (asd::ReferenceObject *) 0 ;
  
  arg1 = (asd::ReferenceObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ReferenceObject_AddRef(void * jarg1) {
  int jresult ;
  asd::ReferenceObject *arg1 = (asd::ReferenceObject *) 0 ;
  int result;
  
  arg1 = (asd::ReferenceObject *)jarg1; 
  result = (int)(arg1)->AddRef();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ReferenceObject_GetRef(void * jarg1) {
  int jresult ;
  asd::ReferenceObject *arg1 = (asd::ReferenceObject *) 0 ;
  int result;
  
  arg1 = (asd::ReferenceObject *)jarg1; 
  result = (int)(arg1)->GetRef();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ReferenceObject_Release(void * jarg1) {
  int jresult ;
  asd::ReferenceObject *arg1 = (asd::ReferenceObject *) 0 ;
  int result;
  
  arg1 = (asd::ReferenceObject *)jarg1; 
  result = (int)(arg1)->Release();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Window_DoEvent(void * jarg1) {
  unsigned int jresult ;
  asd::Window *arg1 = (asd::Window *) 0 ;
  bool result;
  
  arg1 = (asd::Window *)jarg1; 
  result = (bool)(arg1)->DoEvent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Window_SetTitle(void * jarg1, ::asd::achar * jarg2) {
  asd::Window *arg1 = (asd::Window *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  
  arg1 = (asd::Window *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  (arg1)->SetTitle((asd::achar const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Window_Close(void * jarg1) {
  asd::Window *arg1 = (asd::Window *) 0 ;
  
  arg1 = (asd::Window *)jarg1; 
  (arg1)->Close();
}


SWIGEXPORT asd::Vector2DI_R SWIGSTDCALL CSharp_Window_GetSize(void * jarg1) {
  asd::Vector2DI_R jresult ;
  asd::Window *arg1 = (asd::Window *) 0 ;
  asd::Vector2DI result;
  
  arg1 = (asd::Window *)jarg1; 
  result = ((asd::Window const *)arg1)->GetSize();
  {
    assert(sizeof(asd::Vector2DI)==sizeof(asd::Vector2DI_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DI_R)); 
  }
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Window_GetWindowHandle(void * jarg1) {
  void * jresult ;
  asd::Window *arg1 = (asd::Window *) 0 ;
  void *result = 0 ;
  
  arg1 = (asd::Window *)jarg1; 
  result = (void *)((asd::Window const *)arg1)->GetWindowHandle();
  {
    jresult = result; 
  }
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Window_Imp_Create__SWIG_0(int jarg1, int jarg2, ::asd::achar * jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  int32_t arg1 ;
  int32_t arg2 ;
  asd::achar *arg3 = (asd::achar *) 0 ;
  asd::Log *arg4 = (asd::Log *) 0 ;
  bool arg5 ;
  asd::Window_Imp *result = 0 ;
  
  arg1 = (int32_t)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (asd::achar *)jarg3; 
  arg4 = (asd::Log *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (asd::Window_Imp *)asd::Window_Imp::Create(arg1,arg2,(asd::achar const *)arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Window_Imp_Create__SWIG_1(int jarg1, int jarg2, ::asd::achar * jarg3, void * jarg4) {
  void * jresult ;
  int32_t arg1 ;
  int32_t arg2 ;
  asd::achar *arg3 = (asd::achar *) 0 ;
  asd::Log *arg4 = (asd::Log *) 0 ;
  asd::Window_Imp *result = 0 ;
  
  arg1 = (int32_t)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (asd::achar *)jarg3; 
  arg4 = (asd::Log *)jarg4; 
  result = (asd::Window_Imp *)asd::Window_Imp::Create(arg1,arg2,(asd::achar const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Window_Imp_Create__SWIG_2(int jarg1, int jarg2, ::asd::achar * jarg3) {
  void * jresult ;
  int32_t arg1 ;
  int32_t arg2 ;
  asd::achar *arg3 = (asd::achar *) 0 ;
  asd::Window_Imp *result = 0 ;
  
  arg1 = (int32_t)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (asd::achar *)jarg3; 
  result = (asd::Window_Imp *)asd::Window_Imp::Create(arg1,arg2,(asd::achar const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT asd::Vector2DI_R SWIGSTDCALL CSharp_Window_Imp_GetSize(void * jarg1) {
  asd::Vector2DI_R jresult ;
  asd::Window_Imp *arg1 = (asd::Window_Imp *) 0 ;
  asd::Vector2DI result;
  
  arg1 = (asd::Window_Imp *)jarg1; 
  result = ((asd::Window_Imp const *)arg1)->GetSize();
  {
    assert(sizeof(asd::Vector2DI)==sizeof(asd::Vector2DI_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DI_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Log(void * jarg1) {
  asd::Log *arg1 = (asd::Log *) 0 ;
  
  arg1 = (asd::Log *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Log_Write__SWIG_0(void * jarg1, ::asd::achar * jarg2, int jarg3) {
  asd::Log *arg1 = (asd::Log *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::LogLevel arg3 ;
  
  arg1 = (asd::Log *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (asd::LogLevel)jarg3; 
  (arg1)->Write((asd::achar const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Log_Write__SWIG_1(void * jarg1, ::asd::achar * jarg2) {
  asd::Log *arg1 = (asd::Log *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  
  arg1 = (asd::Log *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  (arg1)->Write((asd::achar const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Log_WriteLine__SWIG_0(void * jarg1, ::asd::achar * jarg2, int jarg3) {
  asd::Log *arg1 = (asd::Log *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::LogLevel arg3 ;
  
  arg1 = (asd::Log *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (asd::LogLevel)jarg3; 
  (arg1)->WriteLine((asd::achar const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Log_WriteLine__SWIG_1(void * jarg1, ::asd::achar * jarg2) {
  asd::Log *arg1 = (asd::Log *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  
  arg1 = (asd::Log *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  (arg1)->WriteLine((asd::achar const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Log_WriteStrongly__SWIG_0(void * jarg1, ::asd::achar * jarg2, int jarg3) {
  asd::Log *arg1 = (asd::Log *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::LogLevel arg3 ;
  
  arg1 = (asd::Log *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (asd::LogLevel)jarg3; 
  (arg1)->WriteStrongly((asd::achar const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Log_WriteStrongly__SWIG_1(void * jarg1, ::asd::achar * jarg2) {
  asd::Log *arg1 = (asd::Log *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  
  arg1 = (asd::Log *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  (arg1)->WriteStrongly((asd::achar const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Log_WriteLineStrongly__SWIG_0(void * jarg1, ::asd::achar * jarg2, int jarg3) {
  asd::Log *arg1 = (asd::Log *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::LogLevel arg3 ;
  
  arg1 = (asd::Log *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (asd::LogLevel)jarg3; 
  (arg1)->WriteLineStrongly((asd::achar const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Log_WriteLineStrongly__SWIG_1(void * jarg1, ::asd::achar * jarg2) {
  asd::Log *arg1 = (asd::Log *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  
  arg1 = (asd::Log *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  (arg1)->WriteLineStrongly((asd::achar const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Log_WriteHeading__SWIG_0(void * jarg1, ::asd::achar * jarg2, int jarg3) {
  asd::Log *arg1 = (asd::Log *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::LogLevel arg3 ;
  
  arg1 = (asd::Log *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (asd::LogLevel)jarg3; 
  (arg1)->WriteHeading((asd::achar const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Log_WriteHeading__SWIG_1(void * jarg1, ::asd::achar * jarg2) {
  asd::Log *arg1 = (asd::Log *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  
  arg1 = (asd::Log *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  (arg1)->WriteHeading((asd::achar const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Log_WriteHorizontalRule__SWIG_0(void * jarg1, int jarg2) {
  asd::Log *arg1 = (asd::Log *) 0 ;
  asd::LogLevel arg2 ;
  
  arg1 = (asd::Log *)jarg1; 
  arg2 = (asd::LogLevel)jarg2; 
  (arg1)->WriteHorizontalRule(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Log_WriteHorizontalRule__SWIG_1(void * jarg1) {
  asd::Log *arg1 = (asd::Log *) 0 ;
  
  arg1 = (asd::Log *)jarg1; 
  (arg1)->WriteHorizontalRule();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Log_BeginTable__SWIG_0(void * jarg1, int jarg2) {
  asd::Log *arg1 = (asd::Log *) 0 ;
  asd::LogLevel arg2 ;
  
  arg1 = (asd::Log *)jarg1; 
  arg2 = (asd::LogLevel)jarg2; 
  (arg1)->BeginTable(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Log_BeginTable__SWIG_1(void * jarg1) {
  asd::Log *arg1 = (asd::Log *) 0 ;
  
  arg1 = (asd::Log *)jarg1; 
  (arg1)->BeginTable();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Log_EndTable__SWIG_0(void * jarg1, int jarg2) {
  asd::Log *arg1 = (asd::Log *) 0 ;
  asd::LogLevel arg2 ;
  
  arg1 = (asd::Log *)jarg1; 
  arg2 = (asd::LogLevel)jarg2; 
  (arg1)->EndTable(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Log_EndTable__SWIG_1(void * jarg1) {
  asd::Log *arg1 = (asd::Log *) 0 ;
  
  arg1 = (asd::Log *)jarg1; 
  (arg1)->EndTable();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Log_ChangeRow__SWIG_0(void * jarg1, int jarg2) {
  asd::Log *arg1 = (asd::Log *) 0 ;
  asd::LogLevel arg2 ;
  
  arg1 = (asd::Log *)jarg1; 
  arg2 = (asd::LogLevel)jarg2; 
  (arg1)->ChangeRow(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Log_ChangeRow__SWIG_1(void * jarg1) {
  asd::Log *arg1 = (asd::Log *) 0 ;
  
  arg1 = (asd::Log *)jarg1; 
  (arg1)->ChangeRow();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Log_ChangeColumn__SWIG_0(void * jarg1, int jarg2) {
  asd::Log *arg1 = (asd::Log *) 0 ;
  asd::LogLevel arg2 ;
  
  arg1 = (asd::Log *)jarg1; 
  arg2 = (asd::LogLevel)jarg2; 
  (arg1)->ChangeColumn(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Log_ChangeColumn__SWIG_1(void * jarg1) {
  asd::Log *arg1 = (asd::Log *) 0 ;
  
  arg1 = (asd::Log *)jarg1; 
  (arg1)->ChangeColumn();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Log_GetIsValid(void * jarg1) {
  unsigned int jresult ;
  asd::Log *arg1 = (asd::Log *) 0 ;
  bool result;
  
  arg1 = (asd::Log *)jarg1; 
  result = (bool)(arg1)->GetIsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Log_SetOutputLevel(void * jarg1, int jarg2) {
  asd::Log *arg1 = (asd::Log *) 0 ;
  asd::LogLevel arg2 ;
  
  arg1 = (asd::Log *)jarg1; 
  arg2 = (asd::LogLevel)jarg2; 
  (arg1)->SetOutputLevel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Profiler_Start(void * jarg1, int jarg2) {
  asd::Profiler *arg1 = (asd::Profiler *) 0 ;
  int arg2 ;
  
  arg1 = (asd::Profiler *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Start(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Profiler_End(void * jarg1, int jarg2) {
  asd::Profiler *arg1 = (asd::Profiler *) 0 ;
  int arg2 ;
  
  arg1 = (asd::Profiler *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->End(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LayerProfiler_Record(void * jarg1, ::asd::achar * jarg2, int jarg3, int jarg4) {
  asd::LayerProfiler *arg1 = (asd::LayerProfiler *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (asd::LayerProfiler *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->Record((asd::achar const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LayerProfiler_Refresh(void * jarg1) {
  asd::LayerProfiler *arg1 = (asd::LayerProfiler *) 0 ;
  
  arg1 = (asd::LayerProfiler *)jarg1; 
  (arg1)->Refresh();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LayerProfiler_Imp_Create() {
  void * jresult ;
  asd::LayerProfiler_Imp *result = 0 ;
  
  result = (asd::LayerProfiler_Imp *)asd::LayerProfiler_Imp::Create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LayerProfiler_Imp_Record(void * jarg1, ::asd::achar * jarg2, int jarg3, int jarg4) {
  asd::LayerProfiler_Imp *arg1 = (asd::LayerProfiler_Imp *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (asd::LayerProfiler_Imp *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->Record((asd::achar const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LayerProfiler_Imp_Refresh(void * jarg1) {
  asd::LayerProfiler_Imp *arg1 = (asd::LayerProfiler_Imp *) 0 ;
  
  arg1 = (asd::LayerProfiler_Imp *)jarg1; 
  (arg1)->Refresh();
}


SWIGEXPORT int SWIGSTDCALL CSharp_MiddleButton_GetButtonState(void * jarg1) {
  int jresult ;
  asd::MiddleButton *arg1 = (asd::MiddleButton *) 0 ;
  asd::MouseButtonState result;
  
  arg1 = (asd::MiddleButton *)jarg1; 
  result = (asd::MouseButtonState)((asd::MiddleButton const *)arg1)->GetButtonState();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MiddleButton_GetRotation(void * jarg1) {
  double jresult ;
  asd::MiddleButton *arg1 = (asd::MiddleButton *) 0 ;
  double result;
  
  arg1 = (asd::MiddleButton *)jarg1; 
  result = (double)((asd::MiddleButton const *)arg1)->GetRotation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MiddleButton__SWIG_0(int jarg1, double jarg2) {
  void * jresult ;
  asd::MouseButtonState arg1 ;
  double arg2 ;
  asd::MiddleButton *result = 0 ;
  
  arg1 = (asd::MouseButtonState)jarg1; 
  arg2 = (double)jarg2; 
  result = (asd::MiddleButton *)new asd::MiddleButton(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MiddleButton__SWIG_1() {
  void * jresult ;
  asd::MiddleButton *result = 0 ;
  
  result = (asd::MiddleButton *)new asd::MiddleButton();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MiddleButton(void * jarg1) {
  asd::MiddleButton *arg1 = (asd::MiddleButton *) 0 ;
  
  arg1 = (asd::MiddleButton *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SideButton_GetButtonState(void * jarg1) {
  int jresult ;
  asd::SideButton *arg1 = (asd::SideButton *) 0 ;
  asd::MouseButtonState result;
  
  arg1 = (asd::SideButton *)jarg1; 
  result = (asd::MouseButtonState)((asd::SideButton const *)arg1)->GetButtonState();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SideButton__SWIG_0() {
  void * jresult ;
  asd::SideButton *result = 0 ;
  
  result = (asd::SideButton *)new asd::SideButton();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SideButton__SWIG_1(int jarg1, unsigned int jarg2) {
  void * jresult ;
  asd::MouseButtonState arg1 ;
  bool arg2 ;
  asd::SideButton *result = 0 ;
  
  arg1 = (asd::MouseButtonState)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (asd::SideButton *)new asd::SideButton(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SideButton(void * jarg1) {
  asd::SideButton *arg1 = (asd::SideButton *) 0 ;
  
  arg1 = (asd::SideButton *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mouse_GetLeftButton(void * jarg1) {
  void * jresult ;
  asd::Mouse *arg1 = (asd::Mouse *) 0 ;
  asd::SideButton *result = 0 ;
  
  arg1 = (asd::Mouse *)jarg1; 
  result = (asd::SideButton *)((asd::Mouse const *)arg1)->GetLeftButton();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mouse_GetRightButton(void * jarg1) {
  void * jresult ;
  asd::Mouse *arg1 = (asd::Mouse *) 0 ;
  asd::SideButton *result = 0 ;
  
  arg1 = (asd::Mouse *)jarg1; 
  result = (asd::SideButton *)((asd::Mouse const *)arg1)->GetRightButton();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mouse_GetMiddleButton(void * jarg1) {
  void * jresult ;
  asd::Mouse *arg1 = (asd::Mouse *) 0 ;
  asd::MiddleButton *result = 0 ;
  
  arg1 = (asd::Mouse *)jarg1; 
  result = (asd::MiddleButton *)((asd::Mouse const *)arg1)->GetMiddleButton();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT asd::Vector2DF_R SWIGSTDCALL CSharp_Mouse_GetPosition(void * jarg1) {
  asd::Vector2DF_R jresult ;
  asd::Mouse *arg1 = (asd::Mouse *) 0 ;
  asd::Vector2DF result;
  
  arg1 = (asd::Mouse *)jarg1; 
  result = ((asd::Mouse const *)arg1)->GetPosition();
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Mouse(void * jarg1) {
  asd::Mouse *arg1 = (asd::Mouse *) 0 ;
  
  arg1 = (asd::Mouse *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyboard_GetKeyState(void * jarg1, int jarg2) {
  int jresult ;
  asd::Keyboard *arg1 = (asd::Keyboard *) 0 ;
  asd::Keys arg2 ;
  asd::KeyState result;
  
  arg1 = (asd::Keyboard *)jarg1; 
  arg2 = (asd::Keys)jarg2; 
  result = (asd::KeyState)((asd::Keyboard const *)arg1)->GetKeyState(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Keyboard(void * jarg1) {
  asd::Keyboard *arg1 = (asd::Keyboard *) 0 ;
  
  arg1 = (asd::Keyboard *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Joystick(void * jarg1) {
  asd::Joystick *arg1 = (asd::Joystick *) 0 ;
  
  arg1 = (asd::Joystick *)jarg1; 
  delete arg1;
}


SWIGEXPORT ::asd::achar * SWIGSTDCALL CSharp_Joystick_GetJoystickName(void * jarg1) {
  ::asd::achar * jresult ;
  asd::Joystick *arg1 = (asd::Joystick *) 0 ;
  asd::achar *result = 0 ;
  
  arg1 = (asd::Joystick *)jarg1; 
  result = (asd::achar *)(arg1)->GetJoystickName();
  jresult = (::asd::achar *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Joystick_GetButtonsCount(void * jarg1) {
  int jresult ;
  asd::Joystick *arg1 = (asd::Joystick *) 0 ;
  int result;
  
  arg1 = (asd::Joystick *)jarg1; 
  result = (int)(arg1)->GetButtonsCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Joystick_GetAxesCount(void * jarg1) {
  int jresult ;
  asd::Joystick *arg1 = (asd::Joystick *) 0 ;
  int result;
  
  arg1 = (asd::Joystick *)jarg1; 
  result = (int)(arg1)->GetAxesCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Joystick_GetButtonState(void * jarg1, int jarg2) {
  int jresult ;
  asd::Joystick *arg1 = (asd::Joystick *) 0 ;
  int arg2 ;
  asd::JoystickButtonState result;
  
  arg1 = (asd::Joystick *)jarg1; 
  arg2 = (int)jarg2; 
  result = (asd::JoystickButtonState)(arg1)->GetButtonState(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Joystick_GetAxisState(void * jarg1, int jarg2) {
  float jresult ;
  asd::Joystick *arg1 = (asd::Joystick *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (asd::Joystick *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)(arg1)->GetAxisState(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_JoystickContainer(void * jarg1) {
  asd::JoystickContainer *arg1 = (asd::JoystickContainer *) 0 ;
  
  arg1 = (asd::JoystickContainer *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_JoystickContainer_GetIsPresentAt(void * jarg1, int jarg2) {
  unsigned int jresult ;
  asd::JoystickContainer *arg1 = (asd::JoystickContainer *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (asd::JoystickContainer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->GetIsPresentAt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JoystickContainer_GetJoystickAt(void * jarg1, int jarg2) {
  void * jresult ;
  asd::JoystickContainer *arg1 = (asd::JoystickContainer *) 0 ;
  int arg2 ;
  asd::Joystick *result = 0 ;
  
  arg1 = (asd::JoystickContainer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (asd::Joystick *)(arg1)->GetJoystickAt(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JoystickContainer_RefreshAllJoysticks(void * jarg1) {
  asd::JoystickContainer *arg1 = (asd::JoystickContainer *) 0 ;
  
  arg1 = (asd::JoystickContainer *)jarg1; 
  (arg1)->RefreshAllJoysticks();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_File(void * jarg1) {
  asd::File *arg1 = (asd::File *) 0 ;
  
  arg1 = (asd::File *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_AddRootDirectory(void * jarg1, ::asd::achar * jarg2) {
  asd::File *arg1 = (asd::File *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  
  arg1 = (asd::File *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  (arg1)->AddRootDirectory((asd::achar const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_AddRootPackageWithPassword(void * jarg1, ::asd::achar * jarg2, ::asd::achar * jarg3) {
  asd::File *arg1 = (asd::File *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::achar *arg3 = (asd::achar *) 0 ;
  
  arg1 = (asd::File *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (asd::achar *)jarg3; 
  (arg1)->AddRootPackageWithPassword((asd::achar const *)arg2,(asd::achar const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_AddRootPackage(void * jarg1, ::asd::achar * jarg2) {
  asd::File *arg1 = (asd::File *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  
  arg1 = (asd::File *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  (arg1)->AddRootPackage((asd::achar const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_ClearRootDirectories(void * jarg1) {
  asd::File *arg1 = (asd::File *) 0 ;
  
  arg1 = (asd::File *)jarg1; 
  (arg1)->ClearRootDirectories();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_File_Exists(void * jarg1, ::asd::achar * jarg2) {
  unsigned int jresult ;
  asd::File *arg1 = (asd::File *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  bool result;
  
  arg1 = (asd::File *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (bool)((asd::File const *)arg1)->Exists((asd::achar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StaticFile(void * jarg1) {
  asd::StaticFile *arg1 = (asd::StaticFile *) 0 ;
  
  arg1 = (asd::StaticFile *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StaticFile_GetBuffer(void * jarg1) {
  void * jresult ;
  asd::StaticFile *arg1 = (asd::StaticFile *) 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  arg1 = (asd::StaticFile *)jarg1; 
  result = (std::vector< uint8_t > *) &((asd::StaticFile const *)arg1)->GetBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT ::asd::achar * SWIGSTDCALL CSharp_StaticFile_GetFullPath(void * jarg1) {
  ::asd::achar * jresult ;
  asd::StaticFile *arg1 = (asd::StaticFile *) 0 ;
  asd::achar *result = 0 ;
  
  arg1 = (asd::StaticFile *)jarg1; 
  result = (asd::achar *)((asd::StaticFile const *)arg1)->GetFullPath();
  jresult = (::asd::achar *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StaticFile_GetData(void * jarg1) {
  void * jresult ;
  asd::StaticFile *arg1 = (asd::StaticFile *) 0 ;
  void *result = 0 ;
  
  arg1 = (asd::StaticFile *)jarg1; 
  result = (void *)(arg1)->GetData();
  {
    jresult = result; 
  }
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StaticFile_GetSize(void * jarg1) {
  int jresult ;
  asd::StaticFile *arg1 = (asd::StaticFile *) 0 ;
  int32_t result;
  
  arg1 = (asd::StaticFile *)jarg1; 
  result = (int32_t)(arg1)->GetSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StaticFile_GetIsInPackage(void * jarg1) {
  unsigned int jresult ;
  asd::StaticFile *arg1 = (asd::StaticFile *) 0 ;
  bool result;
  
  arg1 = (asd::StaticFile *)jarg1; 
  result = (bool)((asd::StaticFile const *)arg1)->GetIsInPackage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StreamFile(void * jarg1) {
  asd::StreamFile *arg1 = (asd::StreamFile *) 0 ;
  
  arg1 = (asd::StreamFile *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamFile_GetSize(void * jarg1) {
  int jresult ;
  asd::StreamFile *arg1 = (asd::StreamFile *) 0 ;
  int32_t result;
  
  arg1 = (asd::StreamFile *)jarg1; 
  result = (int32_t)((asd::StreamFile const *)arg1)->GetSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamFile_GetCurrentPosition(void * jarg1) {
  int jresult ;
  asd::StreamFile *arg1 = (asd::StreamFile *) 0 ;
  int32_t result;
  
  arg1 = (asd::StreamFile *)jarg1; 
  result = (int32_t)((asd::StreamFile const *)arg1)->GetCurrentPosition();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoundSource_GetLoopStartingPoint(void * jarg1) {
  float jresult ;
  asd::SoundSource *arg1 = (asd::SoundSource *) 0 ;
  float result;
  
  arg1 = (asd::SoundSource *)jarg1; 
  result = (float)((asd::SoundSource const *)arg1)->GetLoopStartingPoint();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundSource_SetLoopStartingPoint(void * jarg1, float jarg2) {
  asd::SoundSource *arg1 = (asd::SoundSource *) 0 ;
  float arg2 ;
  
  arg1 = (asd::SoundSource *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetLoopStartingPoint(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoundSource_GetLoopEndPoint(void * jarg1) {
  float jresult ;
  asd::SoundSource *arg1 = (asd::SoundSource *) 0 ;
  float result;
  
  arg1 = (asd::SoundSource *)jarg1; 
  result = (float)((asd::SoundSource const *)arg1)->GetLoopEndPoint();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundSource_SetLoopEndPoint(void * jarg1, float jarg2) {
  asd::SoundSource *arg1 = (asd::SoundSource *) 0 ;
  float arg2 ;
  
  arg1 = (asd::SoundSource *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetLoopEndPoint(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SoundSource_GetIsLoopingMode(void * jarg1) {
  unsigned int jresult ;
  asd::SoundSource *arg1 = (asd::SoundSource *) 0 ;
  bool result;
  
  arg1 = (asd::SoundSource *)jarg1; 
  result = (bool)((asd::SoundSource const *)arg1)->GetIsLoopingMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundSource_SetIsLoopingMode(void * jarg1, unsigned int jarg2) {
  asd::SoundSource *arg1 = (asd::SoundSource *) 0 ;
  bool arg2 ;
  
  arg1 = (asd::SoundSource *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetIsLoopingMode(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoundSource_GetLength(void * jarg1) {
  float jresult ;
  asd::SoundSource *arg1 = (asd::SoundSource *) 0 ;
  float result;
  
  arg1 = (asd::SoundSource *)jarg1; 
  result = (float)(arg1)->GetLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sound_Play(void * jarg1, void * jarg2) {
  int jresult ;
  asd::Sound *arg1 = (asd::Sound *) 0 ;
  asd::SoundSource *arg2 = (asd::SoundSource *) 0 ;
  int32_t result;
  
  arg1 = (asd::Sound *)jarg1; 
  arg2 = (asd::SoundSource *)jarg2; 
  result = (int32_t)(arg1)->Play(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sound_GetIsPlaying(void * jarg1, int jarg2) {
  unsigned int jresult ;
  asd::Sound *arg1 = (asd::Sound *) 0 ;
  int32_t arg2 ;
  bool result;
  
  arg1 = (asd::Sound *)jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (bool)(arg1)->GetIsPlaying(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sound_StopAll(void * jarg1) {
  asd::Sound *arg1 = (asd::Sound *) 0 ;
  
  arg1 = (asd::Sound *)jarg1; 
  (arg1)->StopAll();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sound_Stop(void * jarg1, int jarg2) {
  asd::Sound *arg1 = (asd::Sound *) 0 ;
  int32_t arg2 ;
  
  arg1 = (asd::Sound *)jarg1; 
  arg2 = (int32_t)jarg2; 
  (arg1)->Stop(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sound_Pause(void * jarg1, int jarg2) {
  asd::Sound *arg1 = (asd::Sound *) 0 ;
  int32_t arg2 ;
  
  arg1 = (asd::Sound *)jarg1; 
  arg2 = (int32_t)jarg2; 
  (arg1)->Pause(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sound_Resume(void * jarg1, int jarg2) {
  asd::Sound *arg1 = (asd::Sound *) 0 ;
  int32_t arg2 ;
  
  arg1 = (asd::Sound *)jarg1; 
  arg2 = (int32_t)jarg2; 
  (arg1)->Resume(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sound_SetVolume(void * jarg1, int jarg2, float jarg3) {
  asd::Sound *arg1 = (asd::Sound *) 0 ;
  int32_t arg2 ;
  float arg3 ;
  
  arg1 = (asd::Sound *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetVolume(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sound_FadeIn(void * jarg1, int jarg2, float jarg3) {
  asd::Sound *arg1 = (asd::Sound *) 0 ;
  int32_t arg2 ;
  float arg3 ;
  
  arg1 = (asd::Sound *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->FadeIn(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sound_FadeOut(void * jarg1, int jarg2, float jarg3) {
  asd::Sound *arg1 = (asd::Sound *) 0 ;
  int32_t arg2 ;
  float arg3 ;
  
  arg1 = (asd::Sound *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->FadeOut(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Material2D_GetFloat(void * jarg1, ::asd::achar * jarg2) {
  float jresult ;
  asd::Material2D *arg1 = (asd::Material2D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  float result;
  
  arg1 = (asd::Material2D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (float)(arg1)->GetFloat((asd::achar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material2D_SetFloat(void * jarg1, ::asd::achar * jarg2, float jarg3) {
  asd::Material2D *arg1 = (asd::Material2D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  float arg3 ;
  
  arg1 = (asd::Material2D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetFloat((asd::achar const *)arg2,arg3);
}


SWIGEXPORT asd::Vector2DF_R SWIGSTDCALL CSharp_Material2D_GetVector2DF(void * jarg1, ::asd::achar * jarg2) {
  asd::Vector2DF_R jresult ;
  asd::Material2D *arg1 = (asd::Material2D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Vector2DF result;
  
  arg1 = (asd::Material2D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (arg1)->GetVector2DF((asd::achar const *)arg2);
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material2D_SetVector2DF(void * jarg1, ::asd::achar * jarg2, asd::Vector2DF_R jarg3) {
  asd::Material2D *arg1 = (asd::Material2D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Vector2DF arg3 ;
  
  arg1 = (asd::Material2D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg3, &jarg3, sizeof(asd::Vector2DF_R)); 
  }
  (arg1)->SetVector2DF((asd::achar const *)arg2,arg3);
}


SWIGEXPORT asd::Vector3DF_R SWIGSTDCALL CSharp_Material2D_GetVector3DF(void * jarg1, ::asd::achar * jarg2) {
  asd::Vector3DF_R jresult ;
  asd::Material2D *arg1 = (asd::Material2D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Vector3DF result;
  
  arg1 = (asd::Material2D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (arg1)->GetVector3DF((asd::achar const *)arg2);
  {
    assert(sizeof(asd::Vector3DF)==sizeof(asd::Vector3DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector3DF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material2D_SetVector3DF(void * jarg1, ::asd::achar * jarg2, asd::Vector3DF_R jarg3) {
  asd::Material2D *arg1 = (asd::Material2D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Vector3DF arg3 ;
  
  arg1 = (asd::Material2D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  {
    assert(sizeof(asd::Vector3DF)==sizeof(asd::Vector3DF_R)); memcpy(&arg3, &jarg3, sizeof(asd::Vector3DF_R)); 
  }
  (arg1)->SetVector3DF((asd::achar const *)arg2,arg3);
}


SWIGEXPORT asd::Vector4DF_R SWIGSTDCALL CSharp_Material2D_GetVector4DF(void * jarg1, ::asd::achar * jarg2) {
  asd::Vector4DF_R jresult ;
  asd::Material2D *arg1 = (asd::Material2D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Vector4DF result;
  
  arg1 = (asd::Material2D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (arg1)->GetVector4DF((asd::achar const *)arg2);
  {
    assert(sizeof(asd::Vector4DF)==sizeof(asd::Vector4DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector4DF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material2D_SetVector4DF(void * jarg1, ::asd::achar * jarg2, asd::Vector4DF_R jarg3) {
  asd::Material2D *arg1 = (asd::Material2D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Vector4DF arg3 ;
  
  arg1 = (asd::Material2D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  {
    assert(sizeof(asd::Vector4DF)==sizeof(asd::Vector4DF_R)); memcpy(&arg3, &jarg3, sizeof(asd::Vector4DF_R)); 
  }
  (arg1)->SetVector4DF((asd::achar const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material2D_SetTexture2D(void * jarg1, ::asd::achar * jarg2, void * jarg3) {
  asd::Material2D *arg1 = (asd::Material2D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Texture2D *arg3 = (asd::Texture2D *) 0 ;
  
  arg1 = (asd::Material2D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (asd::Texture2D *)jarg3; 
  (arg1)->SetTexture2D((asd::achar const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material2D_SetShader2D(void * jarg1, void * jarg2) {
  asd::Material2D *arg1 = (asd::Material2D *) 0 ;
  asd::Shader2D *arg2 = (asd::Shader2D *) 0 ;
  
  arg1 = (asd::Material2D *)jarg1; 
  arg2 = (asd::Shader2D *)jarg2; 
  (arg1)->SetShader2D(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Material2D_GetTextureFilterType(void * jarg1, ::asd::achar * jarg2) {
  int jresult ;
  asd::Material2D *arg1 = (asd::Material2D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::TextureFilterType result;
  
  arg1 = (asd::Material2D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (asd::TextureFilterType)(arg1)->GetTextureFilterType((asd::achar const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material2D_SetTextureFilterType(void * jarg1, ::asd::achar * jarg2, int jarg3) {
  asd::Material2D *arg1 = (asd::Material2D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::TextureFilterType arg3 ;
  
  arg1 = (asd::Material2D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (asd::TextureFilterType)jarg3; 
  (arg1)->SetTextureFilterType((asd::achar const *)arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Material2D_GetTextureWrapType(void * jarg1, ::asd::achar * jarg2) {
  int jresult ;
  asd::Material2D *arg1 = (asd::Material2D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::TextureWrapType result;
  
  arg1 = (asd::Material2D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (asd::TextureWrapType)(arg1)->GetTextureWrapType((asd::achar const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material2D_SetTextureWrapType(void * jarg1, ::asd::achar * jarg2, int jarg3) {
  asd::Material2D *arg1 = (asd::Material2D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::TextureWrapType arg3 ;
  
  arg1 = (asd::Material2D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (asd::TextureWrapType)jarg3; 
  (arg1)->SetTextureWrapType((asd::achar const *)arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Material3D_GetFloat(void * jarg1, ::asd::achar * jarg2) {
  float jresult ;
  asd::Material3D *arg1 = (asd::Material3D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  float result;
  
  arg1 = (asd::Material3D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (float)(arg1)->GetFloat((asd::achar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material3D_SetFloat(void * jarg1, ::asd::achar * jarg2, float jarg3) {
  asd::Material3D *arg1 = (asd::Material3D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  float arg3 ;
  
  arg1 = (asd::Material3D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetFloat((asd::achar const *)arg2,arg3);
}


SWIGEXPORT asd::Vector2DF_R SWIGSTDCALL CSharp_Material3D_GetVector2DF(void * jarg1, ::asd::achar * jarg2) {
  asd::Vector2DF_R jresult ;
  asd::Material3D *arg1 = (asd::Material3D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Vector2DF result;
  
  arg1 = (asd::Material3D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (arg1)->GetVector2DF((asd::achar const *)arg2);
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material3D_SetVector2DF(void * jarg1, ::asd::achar * jarg2, asd::Vector2DF_R jarg3) {
  asd::Material3D *arg1 = (asd::Material3D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Vector2DF arg3 ;
  
  arg1 = (asd::Material3D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg3, &jarg3, sizeof(asd::Vector2DF_R)); 
  }
  (arg1)->SetVector2DF((asd::achar const *)arg2,arg3);
}


SWIGEXPORT asd::Vector3DF_R SWIGSTDCALL CSharp_Material3D_GetVector3DF(void * jarg1, ::asd::achar * jarg2) {
  asd::Vector3DF_R jresult ;
  asd::Material3D *arg1 = (asd::Material3D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Vector3DF result;
  
  arg1 = (asd::Material3D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (arg1)->GetVector3DF((asd::achar const *)arg2);
  {
    assert(sizeof(asd::Vector3DF)==sizeof(asd::Vector3DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector3DF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material3D_SetVector3DF(void * jarg1, ::asd::achar * jarg2, asd::Vector3DF_R jarg3) {
  asd::Material3D *arg1 = (asd::Material3D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Vector3DF arg3 ;
  
  arg1 = (asd::Material3D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  {
    assert(sizeof(asd::Vector3DF)==sizeof(asd::Vector3DF_R)); memcpy(&arg3, &jarg3, sizeof(asd::Vector3DF_R)); 
  }
  (arg1)->SetVector3DF((asd::achar const *)arg2,arg3);
}


SWIGEXPORT asd::Vector4DF_R SWIGSTDCALL CSharp_Material3D_GetVector4DF(void * jarg1, ::asd::achar * jarg2) {
  asd::Vector4DF_R jresult ;
  asd::Material3D *arg1 = (asd::Material3D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Vector4DF result;
  
  arg1 = (asd::Material3D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (arg1)->GetVector4DF((asd::achar const *)arg2);
  {
    assert(sizeof(asd::Vector4DF)==sizeof(asd::Vector4DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector4DF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material3D_SetVector4DF(void * jarg1, ::asd::achar * jarg2, asd::Vector4DF_R jarg3) {
  asd::Material3D *arg1 = (asd::Material3D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Vector4DF arg3 ;
  
  arg1 = (asd::Material3D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  {
    assert(sizeof(asd::Vector4DF)==sizeof(asd::Vector4DF_R)); memcpy(&arg3, &jarg3, sizeof(asd::Vector4DF_R)); 
  }
  (arg1)->SetVector4DF((asd::achar const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material3D_SetTexture2D(void * jarg1, ::asd::achar * jarg2, void * jarg3) {
  asd::Material3D *arg1 = (asd::Material3D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Texture2D *arg3 = (asd::Texture2D *) 0 ;
  
  arg1 = (asd::Material3D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (asd::Texture2D *)jarg3; 
  (arg1)->SetTexture2D((asd::achar const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material3D_SetShader3D(void * jarg1, void * jarg2) {
  asd::Material3D *arg1 = (asd::Material3D *) 0 ;
  asd::Shader3D *arg2 = (asd::Shader3D *) 0 ;
  
  arg1 = (asd::Material3D *)jarg1; 
  arg2 = (asd::Shader3D *)jarg2; 
  (arg1)->SetShader3D(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Material3D_GetTextureFilterType(void * jarg1, ::asd::achar * jarg2) {
  int jresult ;
  asd::Material3D *arg1 = (asd::Material3D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::TextureFilterType result;
  
  arg1 = (asd::Material3D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (asd::TextureFilterType)(arg1)->GetTextureFilterType((asd::achar const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material3D_SetTextureFilterType(void * jarg1, ::asd::achar * jarg2, int jarg3) {
  asd::Material3D *arg1 = (asd::Material3D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::TextureFilterType arg3 ;
  
  arg1 = (asd::Material3D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (asd::TextureFilterType)jarg3; 
  (arg1)->SetTextureFilterType((asd::achar const *)arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Material3D_GetTextureWrapType(void * jarg1, ::asd::achar * jarg2) {
  int jresult ;
  asd::Material3D *arg1 = (asd::Material3D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::TextureWrapType result;
  
  arg1 = (asd::Material3D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (asd::TextureWrapType)(arg1)->GetTextureWrapType((asd::achar const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material3D_SetTextureWrapType(void * jarg1, ::asd::achar * jarg2, int jarg3) {
  asd::Material3D *arg1 = (asd::Material3D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::TextureWrapType arg3 ;
  
  arg1 = (asd::Material3D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (asd::TextureWrapType)jarg3; 
  (arg1)->SetTextureWrapType((asd::achar const *)arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_MaterialPropertyBlock_GetFloat(void * jarg1, ::asd::achar * jarg2) {
  float jresult ;
  asd::MaterialPropertyBlock *arg1 = (asd::MaterialPropertyBlock *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  float result;
  
  arg1 = (asd::MaterialPropertyBlock *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (float)(arg1)->GetFloat((asd::achar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MaterialPropertyBlock_SetFloat(void * jarg1, ::asd::achar * jarg2, float jarg3) {
  asd::MaterialPropertyBlock *arg1 = (asd::MaterialPropertyBlock *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  float arg3 ;
  
  arg1 = (asd::MaterialPropertyBlock *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetFloat((asd::achar const *)arg2,arg3);
}


SWIGEXPORT asd::Vector2DF_R SWIGSTDCALL CSharp_MaterialPropertyBlock_GetVector2DF(void * jarg1, ::asd::achar * jarg2) {
  asd::Vector2DF_R jresult ;
  asd::MaterialPropertyBlock *arg1 = (asd::MaterialPropertyBlock *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Vector2DF result;
  
  arg1 = (asd::MaterialPropertyBlock *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (arg1)->GetVector2DF((asd::achar const *)arg2);
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MaterialPropertyBlock_SetVector2DF(void * jarg1, ::asd::achar * jarg2, asd::Vector2DF_R jarg3) {
  asd::MaterialPropertyBlock *arg1 = (asd::MaterialPropertyBlock *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Vector2DF arg3 ;
  
  arg1 = (asd::MaterialPropertyBlock *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg3, &jarg3, sizeof(asd::Vector2DF_R)); 
  }
  (arg1)->SetVector2DF((asd::achar const *)arg2,arg3);
}


SWIGEXPORT asd::Vector3DF_R SWIGSTDCALL CSharp_MaterialPropertyBlock_GetVector3DF(void * jarg1, ::asd::achar * jarg2) {
  asd::Vector3DF_R jresult ;
  asd::MaterialPropertyBlock *arg1 = (asd::MaterialPropertyBlock *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Vector3DF result;
  
  arg1 = (asd::MaterialPropertyBlock *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (arg1)->GetVector3DF((asd::achar const *)arg2);
  {
    assert(sizeof(asd::Vector3DF)==sizeof(asd::Vector3DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector3DF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MaterialPropertyBlock_SetVector3DF(void * jarg1, ::asd::achar * jarg2, asd::Vector3DF_R jarg3) {
  asd::MaterialPropertyBlock *arg1 = (asd::MaterialPropertyBlock *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Vector3DF arg3 ;
  
  arg1 = (asd::MaterialPropertyBlock *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  {
    assert(sizeof(asd::Vector3DF)==sizeof(asd::Vector3DF_R)); memcpy(&arg3, &jarg3, sizeof(asd::Vector3DF_R)); 
  }
  (arg1)->SetVector3DF((asd::achar const *)arg2,arg3);
}


SWIGEXPORT asd::Vector4DF_R SWIGSTDCALL CSharp_MaterialPropertyBlock_GetVector4DF(void * jarg1, ::asd::achar * jarg2) {
  asd::Vector4DF_R jresult ;
  asd::MaterialPropertyBlock *arg1 = (asd::MaterialPropertyBlock *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Vector4DF result;
  
  arg1 = (asd::MaterialPropertyBlock *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (arg1)->GetVector4DF((asd::achar const *)arg2);
  {
    assert(sizeof(asd::Vector4DF)==sizeof(asd::Vector4DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector4DF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MaterialPropertyBlock_SetVector4DF(void * jarg1, ::asd::achar * jarg2, asd::Vector4DF_R jarg3) {
  asd::MaterialPropertyBlock *arg1 = (asd::MaterialPropertyBlock *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Vector4DF arg3 ;
  
  arg1 = (asd::MaterialPropertyBlock *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  {
    assert(sizeof(asd::Vector4DF)==sizeof(asd::Vector4DF_R)); memcpy(&arg3, &jarg3, sizeof(asd::Vector4DF_R)); 
  }
  (arg1)->SetVector4DF((asd::achar const *)arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_MaterialPropertyBlock_GetTextureFilterType(void * jarg1, ::asd::achar * jarg2) {
  int jresult ;
  asd::MaterialPropertyBlock *arg1 = (asd::MaterialPropertyBlock *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::TextureFilterType result;
  
  arg1 = (asd::MaterialPropertyBlock *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (asd::TextureFilterType)(arg1)->GetTextureFilterType((asd::achar const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MaterialPropertyBlock_SetTextureFilterType(void * jarg1, ::asd::achar * jarg2, int jarg3) {
  asd::MaterialPropertyBlock *arg1 = (asd::MaterialPropertyBlock *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::TextureFilterType arg3 ;
  
  arg1 = (asd::MaterialPropertyBlock *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (asd::TextureFilterType)jarg3; 
  (arg1)->SetTextureFilterType((asd::achar const *)arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_MaterialPropertyBlock_GetTextureWrapType(void * jarg1, ::asd::achar * jarg2) {
  int jresult ;
  asd::MaterialPropertyBlock *arg1 = (asd::MaterialPropertyBlock *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::TextureWrapType result;
  
  arg1 = (asd::MaterialPropertyBlock *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (asd::TextureWrapType)(arg1)->GetTextureWrapType((asd::achar const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MaterialPropertyBlock_SetTextureWrapType(void * jarg1, ::asd::achar * jarg2, int jarg3) {
  asd::MaterialPropertyBlock *arg1 = (asd::MaterialPropertyBlock *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::TextureWrapType arg3 ;
  
  arg1 = (asd::MaterialPropertyBlock *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (asd::TextureWrapType)jarg3; 
  (arg1)->SetTextureWrapType((asd::achar const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MaterialPropertyBlock_SetTexture2D(void * jarg1, ::asd::achar * jarg2, void * jarg3) {
  asd::MaterialPropertyBlock *arg1 = (asd::MaterialPropertyBlock *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Texture2D *arg3 = (asd::Texture2D *) 0 ;
  
  arg1 = (asd::MaterialPropertyBlock *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (asd::Texture2D *)jarg3; 
  (arg1)->SetTexture2D((asd::achar const *)arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Texture_GetType(void * jarg1) {
  int jresult ;
  asd::Texture *arg1 = (asd::Texture *) 0 ;
  asd::TextureClassType result;
  
  arg1 = (asd::Texture *)jarg1; 
  result = (asd::TextureClassType)(arg1)->GetType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TextureLockInfomation() {
  void * jresult ;
  asd::TextureLockInfomation *result = 0 ;
  
  result = (asd::TextureLockInfomation *)new asd::TextureLockInfomation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextureLockInfomation_GetPixels(void * jarg1) {
  void * jresult ;
  asd::TextureLockInfomation *arg1 = (asd::TextureLockInfomation *) 0 ;
  void *result = 0 ;
  
  arg1 = (asd::TextureLockInfomation *)jarg1; 
  result = (void *)((asd::TextureLockInfomation const *)arg1)->GetPixels();
  {
    jresult = result; 
  }
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TextureLockInfomation_GetPitch(void * jarg1) {
  int jresult ;
  asd::TextureLockInfomation *arg1 = (asd::TextureLockInfomation *) 0 ;
  int32_t result;
  
  arg1 = (asd::TextureLockInfomation *)jarg1; 
  result = (int32_t)((asd::TextureLockInfomation const *)arg1)->GetPitch();
  jresult = result; 
  return jresult;
}


SWIGEXPORT asd::Vector2DI_R SWIGSTDCALL CSharp_TextureLockInfomation_GetSize(void * jarg1) {
  asd::Vector2DI_R jresult ;
  asd::TextureLockInfomation *arg1 = (asd::TextureLockInfomation *) 0 ;
  asd::Vector2DI result;
  
  arg1 = (asd::TextureLockInfomation *)jarg1; 
  result = ((asd::TextureLockInfomation const *)arg1)->GetSize();
  {
    assert(sizeof(asd::Vector2DI)==sizeof(asd::Vector2DI_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DI_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TextureLockInfomation(void * jarg1) {
  asd::TextureLockInfomation *arg1 = (asd::TextureLockInfomation *) 0 ;
  
  arg1 = (asd::TextureLockInfomation *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Texture2D(void * jarg1) {
  asd::Texture2D *arg1 = (asd::Texture2D *) 0 ;
  
  arg1 = (asd::Texture2D *)jarg1; 
  delete arg1;
}


SWIGEXPORT asd::Vector2DI_R SWIGSTDCALL CSharp_Texture2D_GetSize(void * jarg1) {
  asd::Vector2DI_R jresult ;
  asd::Texture2D *arg1 = (asd::Texture2D *) 0 ;
  asd::Vector2DI result;
  
  arg1 = (asd::Texture2D *)jarg1; 
  result = ((asd::Texture2D const *)arg1)->GetSize();
  {
    assert(sizeof(asd::Vector2DI)==sizeof(asd::Vector2DI_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DI_R)); 
  }
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Texture2D_GetFormat(void * jarg1) {
  int jresult ;
  asd::Texture2D *arg1 = (asd::Texture2D *) 0 ;
  asd::TextureFormat result;
  
  arg1 = (asd::Texture2D *)jarg1; 
  result = (asd::TextureFormat)((asd::Texture2D const *)arg1)->GetFormat();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Texture2D_Save(void * jarg1, ::asd::achar * jarg2) {
  unsigned int jresult ;
  asd::Texture2D *arg1 = (asd::Texture2D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  bool result;
  
  arg1 = (asd::Texture2D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (bool)(arg1)->Save((asd::achar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Texture2D_Lock(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  asd::Texture2D *arg1 = (asd::Texture2D *) 0 ;
  asd::TextureLockInfomation *arg2 = (asd::TextureLockInfomation *) 0 ;
  bool result;
  
  arg1 = (asd::Texture2D *)jarg1; 
  arg2 = (asd::TextureLockInfomation *)jarg2; 
  result = (bool)(arg1)->Lock(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture2D_Unlock(void * jarg1) {
  asd::Texture2D *arg1 = (asd::Texture2D *) 0 ;
  
  arg1 = (asd::Texture2D *)jarg1; 
  (arg1)->Unlock();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Texture2D_GetType(void * jarg1) {
  int jresult ;
  asd::Texture2D *arg1 = (asd::Texture2D *) 0 ;
  asd::TextureClassType result;
  
  arg1 = (asd::Texture2D *)jarg1; 
  result = (asd::TextureClassType)(arg1)->GetType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT asd::Vector2DI_R SWIGSTDCALL CSharp_Texture2D_Imp_GetSize(void * jarg1) {
  asd::Vector2DI_R jresult ;
  asd::Texture2D_Imp *arg1 = (asd::Texture2D_Imp *) 0 ;
  asd::Vector2DI result;
  
  arg1 = (asd::Texture2D_Imp *)jarg1; 
  result = ((asd::Texture2D_Imp const *)arg1)->GetSize();
  {
    assert(sizeof(asd::Vector2DI)==sizeof(asd::Vector2DI_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DI_R)); 
  }
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Texture2D_Imp_GetFormat(void * jarg1) {
  int jresult ;
  asd::Texture2D_Imp *arg1 = (asd::Texture2D_Imp *) 0 ;
  asd::TextureFormat result;
  
  arg1 = (asd::Texture2D_Imp *)jarg1; 
  result = (asd::TextureFormat)((asd::Texture2D_Imp const *)arg1)->GetFormat();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RenderTexture2D(void * jarg1) {
  asd::RenderTexture2D *arg1 = (asd::RenderTexture2D *) 0 ;
  
  arg1 = (asd::RenderTexture2D *)jarg1; 
  delete arg1;
}


SWIGEXPORT asd::Vector2DI_R SWIGSTDCALL CSharp_RenderTexture2D_GetSize(void * jarg1) {
  asd::Vector2DI_R jresult ;
  asd::RenderTexture2D *arg1 = (asd::RenderTexture2D *) 0 ;
  asd::Vector2DI result;
  
  arg1 = (asd::RenderTexture2D *)jarg1; 
  result = ((asd::RenderTexture2D const *)arg1)->GetSize();
  {
    assert(sizeof(asd::Vector2DI)==sizeof(asd::Vector2DI_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DI_R)); 
  }
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RenderTexture2D_GetType(void * jarg1) {
  int jresult ;
  asd::RenderTexture2D *arg1 = (asd::RenderTexture2D *) 0 ;
  asd::TextureClassType result;
  
  arg1 = (asd::RenderTexture2D *)jarg1; 
  result = (asd::TextureClassType)(arg1)->GetType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT asd::Vector2DI_R SWIGSTDCALL CSharp_RenderTexture2D_Imp_GetSize(void * jarg1) {
  asd::Vector2DI_R jresult ;
  asd::RenderTexture2D_Imp *arg1 = (asd::RenderTexture2D_Imp *) 0 ;
  asd::Vector2DI result;
  
  arg1 = (asd::RenderTexture2D_Imp *)jarg1; 
  result = ((asd::RenderTexture2D_Imp const *)arg1)->GetSize();
  {
    assert(sizeof(asd::Vector2DI)==sizeof(asd::Vector2DI_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DI_R)); 
  }
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RenderTexture2D_Imp_GetFormat(void * jarg1) {
  int jresult ;
  asd::RenderTexture2D_Imp *arg1 = (asd::RenderTexture2D_Imp *) 0 ;
  asd::TextureFormat result;
  
  arg1 = (asd::RenderTexture2D_Imp *)jarg1; 
  result = (asd::TextureFormat)((asd::RenderTexture2D_Imp const *)arg1)->GetFormat();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RenderTexture2D_Imp_GetRef(void * jarg1) {
  int jresult ;
  asd::RenderTexture2D_Imp *arg1 = (asd::RenderTexture2D_Imp *) 0 ;
  int result;
  
  arg1 = (asd::RenderTexture2D_Imp *)jarg1; 
  result = (int)(arg1)->GetRef();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RenderTexture2D_Imp_AddRef(void * jarg1) {
  int jresult ;
  asd::RenderTexture2D_Imp *arg1 = (asd::RenderTexture2D_Imp *) 0 ;
  int result;
  
  arg1 = (asd::RenderTexture2D_Imp *)jarg1; 
  result = (int)(arg1)->AddRef();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RenderTexture2D_Imp_Release(void * jarg1) {
  int jresult ;
  asd::RenderTexture2D_Imp *arg1 = (asd::RenderTexture2D_Imp *) 0 ;
  int result;
  
  arg1 = (asd::RenderTexture2D_Imp *)jarg1; 
  result = (int)(arg1)->Release();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CubemapTexture_GetMipmapCount(void * jarg1) {
  int jresult ;
  asd::CubemapTexture *arg1 = (asd::CubemapTexture *) 0 ;
  int32_t result;
  
  arg1 = (asd::CubemapTexture *)jarg1; 
  result = (int32_t)((asd::CubemapTexture const *)arg1)->GetMipmapCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CubemapTexture_GetType(void * jarg1) {
  int jresult ;
  asd::CubemapTexture *arg1 = (asd::CubemapTexture *) 0 ;
  asd::TextureClassType result;
  
  arg1 = (asd::CubemapTexture *)jarg1; 
  result = (asd::TextureClassType)(arg1)->GetType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImagePackage_GetImageCount(void * jarg1) {
  int jresult ;
  asd::ImagePackage *arg1 = (asd::ImagePackage *) 0 ;
  int32_t result;
  
  arg1 = (asd::ImagePackage *)jarg1; 
  result = (int32_t)(arg1)->GetImageCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT ::asd::achar * SWIGSTDCALL CSharp_ImagePackage_GetImageName(void * jarg1, int jarg2) {
  ::asd::achar * jresult ;
  asd::ImagePackage *arg1 = (asd::ImagePackage *) 0 ;
  int32_t arg2 ;
  asd::achar *result = 0 ;
  
  arg1 = (asd::ImagePackage *)jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (asd::achar *)(arg1)->GetImageName(arg2);
  jresult = (::asd::achar *)result; 
  return jresult;
}


SWIGEXPORT asd::RectI_R SWIGSTDCALL CSharp_ImagePackage_GetImageArea(void * jarg1, int jarg2) {
  asd::RectI_R jresult ;
  asd::ImagePackage *arg1 = (asd::ImagePackage *) 0 ;
  int32_t arg2 ;
  asd::RectI result;
  
  arg1 = (asd::ImagePackage *)jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (arg1)->GetImageArea(arg2);
  {
    assert(sizeof(asd::RectI)==sizeof(asd::RectI_R)); memcpy(&jresult, &result, sizeof(asd::RectI_R)); 
  }
  return jresult;
}


SWIGEXPORT asd::Vector2DI_R SWIGSTDCALL CSharp_Font_CalcTextureSize(void * jarg1, ::asd::achar * jarg2, int jarg3) {
  asd::Vector2DI_R jresult ;
  asd::Font *arg1 = (asd::Font *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::WritingDirection arg3 ;
  asd::Vector2DI result;
  
  arg1 = (asd::Font *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (asd::WritingDirection)jarg3; 
  result = (arg1)->CalcTextureSize((asd::achar const *)arg2,arg3);
  {
    assert(sizeof(asd::Vector2DI)==sizeof(asd::Vector2DI_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DI_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Deformer_AddBone(void * jarg1, ::asd::achar * jarg2, int jarg3, int jarg4, void* jarg5) {
  asd::Deformer *arg1 = (asd::Deformer *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  int32_t arg3 ;
  asd::RotationOrder arg4 ;
  asd::Matrix44 *arg5 = 0 ;
  
  arg1 = (asd::Deformer *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (asd::RotationOrder)jarg4; 
  arg5 = (asd::Matrix44*)jarg5;
  (arg1)->AddBone((asd::achar const *)arg2,arg3,arg4,(asd::Matrix44 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_AddVertex(void * jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5, void* jarg6, void* jarg7, int jarg8, int jarg9) {
  asd::Mesh *arg1 = (asd::Mesh *) 0 ;
  asd::Vector3DF *arg2 = 0 ;
  asd::Vector3DF *arg3 = 0 ;
  asd::Vector3DF *arg4 = 0 ;
  asd::Vector2DF *arg5 = 0 ;
  asd::Vector2DF *arg6 = 0 ;
  asd::Color *arg7 = 0 ;
  int32_t arg8 ;
  int32_t arg9 ;
  
  arg1 = (asd::Mesh *)jarg1; 
  arg2 = (asd::Vector3DF*)jarg2;
  arg3 = (asd::Vector3DF*)jarg3;
  arg4 = (asd::Vector3DF*)jarg4;
  arg5 = (asd::Vector2DF*)jarg5;
  arg6 = (asd::Vector2DF*)jarg6;
  arg7 = (asd::Color*)jarg7;
  arg8 = (int32_t)jarg8; 
  arg9 = (int32_t)jarg9; 
  (arg1)->AddVertex((asd::Vector3DF const &)*arg2,(asd::Vector3DF const &)*arg3,(asd::Vector3DF const &)*arg4,(asd::Vector2DF const &)*arg5,(asd::Vector2DF const &)*arg6,(asd::Color const &)*arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_AddFace(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  asd::Mesh *arg1 = (asd::Mesh *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  int32_t arg4 ;
  int32_t arg5 ;
  
  arg1 = (asd::Mesh *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  arg5 = (int32_t)jarg5; 
  (arg1)->AddFace(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_AddBoneConnector(void * jarg1, int jarg2, void* jarg3) {
  asd::Mesh *arg1 = (asd::Mesh *) 0 ;
  int32_t arg2 ;
  asd::Matrix44 *arg3 = 0 ;
  
  arg1 = (asd::Mesh *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (asd::Matrix44*)jarg3;
  (arg1)->AddBoneConnector(arg2,(asd::Matrix44 const &)*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh_AddMaterial(void * jarg1) {
  int jresult ;
  asd::Mesh *arg1 = (asd::Mesh *) 0 ;
  int32_t result;
  
  arg1 = (asd::Mesh *)jarg1; 
  result = (int32_t)(arg1)->AddMaterial();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_SendToGPUMemory(void * jarg1) {
  asd::Mesh *arg1 = (asd::Mesh *) 0 ;
  
  arg1 = (asd::Mesh *)jarg1; 
  (arg1)->SendToGPUMemory();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_SetColorTexture(void * jarg1, int jarg2, void * jarg3) {
  asd::Mesh *arg1 = (asd::Mesh *) 0 ;
  int32_t arg2 ;
  asd::Texture2D *arg3 = (asd::Texture2D *) 0 ;
  
  arg1 = (asd::Mesh *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (asd::Texture2D *)jarg3; 
  (arg1)->SetColorTexture(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_SetNormalTexture(void * jarg1, int jarg2, void * jarg3) {
  asd::Mesh *arg1 = (asd::Mesh *) 0 ;
  int32_t arg2 ;
  asd::Texture2D *arg3 = (asd::Texture2D *) 0 ;
  
  arg1 = (asd::Mesh *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (asd::Texture2D *)jarg3; 
  (arg1)->SetNormalTexture(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_SetMetalnessTexture(void * jarg1, int jarg2, void * jarg3) {
  asd::Mesh *arg1 = (asd::Mesh *) 0 ;
  int32_t arg2 ;
  asd::Texture2D *arg3 = (asd::Texture2D *) 0 ;
  
  arg1 = (asd::Mesh *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (asd::Texture2D *)jarg3; 
  (arg1)->SetMetalnessTexture(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_SetSmoothnessTexture(void * jarg1, int jarg2, void * jarg3) {
  asd::Mesh *arg1 = (asd::Mesh *) 0 ;
  int32_t arg2 ;
  asd::Texture2D *arg3 = (asd::Texture2D *) 0 ;
  
  arg1 = (asd::Mesh *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (asd::Texture2D *)jarg3; 
  (arg1)->SetSmoothnessTexture(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_SetMaterial(void * jarg1, int jarg2, void * jarg3) {
  asd::Mesh *arg1 = (asd::Mesh *) 0 ;
  int32_t arg2 ;
  asd::Material3D *arg3 = (asd::Material3D *) 0 ;
  
  arg1 = (asd::Mesh *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (asd::Material3D *)jarg3; 
  (arg1)->SetMaterial(arg2,arg3);
}


SWIGEXPORT ::asd::achar * SWIGSTDCALL CSharp_Model_GetAnimationClipName(void * jarg1, int jarg2) {
  ::asd::achar * jresult ;
  asd::Model *arg1 = (asd::Model *) 0 ;
  int32_t arg2 ;
  asd::achar *result = 0 ;
  
  arg1 = (asd::Model *)jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (asd::achar *)(arg1)->GetAnimationClipName(arg2);
  jresult = (::asd::achar *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Model_GetMeshCount(void * jarg1) {
  int jresult ;
  asd::Model *arg1 = (asd::Model *) 0 ;
  int32_t result;
  
  arg1 = (asd::Model *)jarg1; 
  result = (int32_t)((asd::Model const *)arg1)->GetMeshCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Model_GetAnimationClipCount(void * jarg1) {
  int jresult ;
  asd::Model *arg1 = (asd::Model *) 0 ;
  int32_t result;
  
  arg1 = (asd::Model *)jarg1; 
  result = (int32_t)((asd::Model const *)arg1)->GetAnimationClipCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MassModel_GetAnimationCount(void * jarg1) {
  int jresult ;
  asd::MassModel *arg1 = (asd::MassModel *) 0 ;
  int32_t result;
  
  arg1 = (asd::MassModel *)jarg1; 
  result = (int32_t)((asd::MassModel const *)arg1)->GetAnimationCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT ::asd::achar * SWIGSTDCALL CSharp_MassModel_GetAnimationName(void * jarg1, int jarg2) {
  ::asd::achar * jresult ;
  asd::MassModel *arg1 = (asd::MassModel *) 0 ;
  int32_t arg2 ;
  asd::achar *result = 0 ;
  
  arg1 = (asd::MassModel *)jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (asd::achar *)((asd::MassModel const *)arg1)->GetAnimationName(arg2);
  jresult = (::asd::achar *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MassModel_GetAnimationLength(void * jarg1, ::asd::achar * jarg2) {
  float jresult ;
  asd::MassModel *arg1 = (asd::MassModel *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  float result;
  
  arg1 = (asd::MassModel *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (float)((asd::MassModel const *)arg1)->GetAnimationLength((asd::achar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MassModel_GetIsAnimationLoopingMode(void * jarg1, ::asd::achar * jarg2) {
  unsigned int jresult ;
  asd::MassModel *arg1 = (asd::MassModel *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  bool result;
  
  arg1 = (asd::MassModel *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (bool)((asd::MassModel const *)arg1)->GetIsAnimationLoopingMode((asd::achar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MassModel_SetIsAnimationLoopingMode(void * jarg1, ::asd::achar * jarg2, unsigned int jarg3) {
  asd::MassModel *arg1 = (asd::MassModel *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  bool arg3 ;
  
  arg1 = (asd::MassModel *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetIsAnimationLoopingMode((asd::achar const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MassModel_SetMaterial(void * jarg1, void * jarg2) {
  asd::MassModel *arg1 = (asd::MassModel *) 0 ;
  asd::Material3D *arg2 = (asd::Material3D *) 0 ;
  
  arg1 = (asd::MassModel *)jarg1; 
  arg2 = (asd::Material3D *)jarg2; 
  (arg1)->SetMaterial(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Terrain3D_New(void * jarg1, float jarg2, int jarg3, int jarg4) {
  asd::Terrain3D *arg1 = (asd::Terrain3D *) 0 ;
  float arg2 ;
  int32_t arg3 ;
  int32_t arg4 ;
  
  arg1 = (asd::Terrain3D *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  (arg1)->New(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Terrain3D_AddSurface(void * jarg1, ::asd::achar * jarg2, float jarg3, ::asd::achar * jarg4, ::asd::achar * jarg5, ::asd::achar * jarg6) {
  asd::Terrain3D *arg1 = (asd::Terrain3D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  float arg3 ;
  asd::achar *arg4 = (asd::achar *) 0 ;
  asd::achar *arg5 = (asd::achar *) 0 ;
  asd::achar *arg6 = (asd::achar *) 0 ;
  
  arg1 = (asd::Terrain3D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (asd::achar *)jarg4; 
  arg5 = (asd::achar *)jarg5; 
  arg6 = (asd::achar *)jarg6; 
  (arg1)->AddSurface((asd::achar const *)arg2,arg3,(asd::achar const *)arg4,(asd::achar const *)arg5,(asd::achar const *)arg6);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Terrain3D_GetSurfaceIndex(void * jarg1, ::asd::achar * jarg2) {
  int jresult ;
  asd::Terrain3D *arg1 = (asd::Terrain3D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  int32_t result;
  
  arg1 = (asd::Terrain3D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (int32_t)(arg1)->GetSurfaceIndex((asd::achar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Terrain3D_AssignSurfaceWithCircle(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  asd::Terrain3D *arg1 = (asd::Terrain3D *) 0 ;
  int32_t arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  arg1 = (asd::Terrain3D *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->AssignSurfaceWithCircle(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Terrain3D_SetMaterial(void * jarg1, void * jarg2) {
  asd::Terrain3D *arg1 = (asd::Terrain3D *) 0 ;
  asd::Material3D *arg2 = (asd::Material3D *) 0 ;
  
  arg1 = (asd::Terrain3D *)jarg1; 
  arg2 = (asd::Material3D *)jarg2; 
  (arg1)->SetMaterial(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Terrain3D_RaiseWithCircle(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  asd::Terrain3D *arg1 = (asd::Terrain3D *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  arg1 = (asd::Terrain3D *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  (arg1)->RaiseWithCircle(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Terrain3D_ChangeCliffesWithCircle(void * jarg1, float jarg2, float jarg3, float jarg4, int jarg5) {
  asd::Terrain3D *arg1 = (asd::Terrain3D *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  int32_t arg5 ;
  
  arg1 = (asd::Terrain3D *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int32_t)jarg5; 
  (arg1)->ChangeCliffesWithCircle(arg2,arg3,arg4,arg5);
}


SWIGEXPORT asd::Vector3DF_R SWIGSTDCALL CSharp_Terrain3D_CastRay(void * jarg1, void* jarg2, void* jarg3) {
  asd::Vector3DF_R jresult ;
  asd::Terrain3D *arg1 = (asd::Terrain3D *) 0 ;
  asd::Vector3DF *arg2 = 0 ;
  asd::Vector3DF *arg3 = 0 ;
  asd::Vector3DF result;
  
  arg1 = (asd::Terrain3D *)jarg1; 
  arg2 = (asd::Vector3DF*)jarg2;
  arg3 = (asd::Vector3DF*)jarg3;
  result = (arg1)->CastRay((asd::Vector3DF const &)*arg2,(asd::Vector3DF const &)*arg3);
  {
    assert(sizeof(asd::Vector3DF)==sizeof(asd::Vector3DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector3DF_R)); 
  }
  return jresult;
}


SWIGEXPORT ::asd::achar * SWIGSTDCALL CSharp_KeyframeAnimation_GetName(void * jarg1) {
  ::asd::achar * jresult ;
  asd::KeyframeAnimation *arg1 = (asd::KeyframeAnimation *) 0 ;
  asd::achar *result = 0 ;
  
  arg1 = (asd::KeyframeAnimation *)jarg1; 
  result = (asd::achar *)(arg1)->GetName();
  jresult = (::asd::achar *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KeyframeAnimation_SetName(void * jarg1, ::asd::achar * jarg2) {
  asd::KeyframeAnimation *arg1 = (asd::KeyframeAnimation *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  
  arg1 = (asd::KeyframeAnimation *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  (arg1)->SetName((asd::achar const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_KeyframeAnimation_AddKeyframe(void * jarg1, void* jarg2) {
  asd::KeyframeAnimation *arg1 = (asd::KeyframeAnimation *) 0 ;
  asd::FCurveKeyframe *arg2 = 0 ;
  
  arg1 = (asd::KeyframeAnimation *)jarg1; 
  arg2 = (asd::FCurveKeyframe*)jarg2;
  (arg1)->AddKeyframe((asd::FCurveKeyframe const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_KeyframeAnimation_GetValue(void * jarg1, float jarg2) {
  float jresult ;
  asd::KeyframeAnimation *arg1 = (asd::KeyframeAnimation *) 0 ;
  float arg2 ;
  float result;
  
  arg1 = (asd::KeyframeAnimation *)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)(arg1)->GetValue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AnimationSource(void * jarg1) {
  asd::AnimationSource *arg1 = (asd::AnimationSource *) 0 ;
  
  arg1 = (asd::AnimationSource *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationSource_AddAnimation(void * jarg1, void * jarg2) {
  asd::AnimationSource *arg1 = (asd::AnimationSource *) 0 ;
  asd::KeyframeAnimation *arg2 = (asd::KeyframeAnimation *) 0 ;
  
  arg1 = (asd::AnimationSource *)jarg1; 
  arg2 = (asd::KeyframeAnimation *)jarg2; 
  (arg1)->AddAnimation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationSource_RemoveAnimation(void * jarg1, void * jarg2) {
  asd::AnimationSource *arg1 = (asd::AnimationSource *) 0 ;
  asd::KeyframeAnimation *arg2 = (asd::KeyframeAnimation *) 0 ;
  
  arg1 = (asd::AnimationSource *)jarg1; 
  arg2 = (asd::KeyframeAnimation *)jarg2; 
  (arg1)->RemoveAnimation(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationSource_GetLength(void * jarg1) {
  float jresult ;
  asd::AnimationSource *arg1 = (asd::AnimationSource *) 0 ;
  float result;
  
  arg1 = (asd::AnimationSource *)jarg1; 
  result = (float)((asd::AnimationSource const *)arg1)->GetLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AnimationClip(void * jarg1) {
  asd::AnimationClip *arg1 = (asd::AnimationClip *) 0 ;
  
  arg1 = (asd::AnimationClip *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationClip_SetSource(void * jarg1, void * jarg2) {
  asd::AnimationClip *arg1 = (asd::AnimationClip *) 0 ;
  asd::AnimationSource *arg2 = (asd::AnimationSource *) 0 ;
  
  arg1 = (asd::AnimationClip *)jarg1; 
  arg2 = (asd::AnimationSource *)jarg2; 
  (arg1)->SetSource(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationClip_GetIsLoopingMode(void * jarg1) {
  unsigned int jresult ;
  asd::AnimationClip *arg1 = (asd::AnimationClip *) 0 ;
  bool result;
  
  arg1 = (asd::AnimationClip *)jarg1; 
  result = (bool)((asd::AnimationClip const *)arg1)->GetIsLoopingMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationClip_SetIsLoopingMode(void * jarg1, unsigned int jarg2) {
  asd::AnimationClip *arg1 = (asd::AnimationClip *) 0 ;
  bool arg2 ;
  
  arg1 = (asd::AnimationClip *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetIsLoopingMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Graphics(void * jarg1) {
  asd::Graphics *arg1 = (asd::Graphics *) 0 ;
  
  arg1 = (asd::Graphics *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Graphics_GetDrawCallCount(void * jarg1) {
  int jresult ;
  asd::Graphics *arg1 = (asd::Graphics *) 0 ;
  int32_t result;
  
  arg1 = (asd::Graphics *)jarg1; 
  result = (int32_t)((asd::Graphics const *)arg1)->GetDrawCallCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Graphics_GetUsedVRAMSize(void * jarg1) {
  int jresult ;
  asd::Graphics *arg1 = (asd::Graphics *) 0 ;
  int32_t result;
  
  arg1 = (asd::Graphics *)jarg1; 
  result = (int32_t)((asd::Graphics const *)arg1)->GetUsedVRAMSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Graphics_GetGraphicsDeviceType(void * jarg1) {
  int jresult ;
  asd::Graphics *arg1 = (asd::Graphics *) 0 ;
  asd::GraphicsDeviceType result;
  
  arg1 = (asd::Graphics *)jarg1; 
  result = (asd::GraphicsDeviceType)((asd::Graphics const *)arg1)->GetGraphicsDeviceType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Graphics_Imp_MaxRenderTarget_get() {
  int jresult ;
  int result;
  
  result = (int)asd::Graphics_Imp::MaxRenderTarget;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Graphics_Imp_MaxTextureCount_get() {
  int jresult ;
  int result;
  
  result = (int)asd::Graphics_Imp::MaxTextureCount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Graphics_Imp(void * jarg1) {
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Graphics_Imp_Create__SWIG_0(void * jarg1, int jarg2, void * jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6) {
  void * jresult ;
  asd::Window *arg1 = (asd::Window *) 0 ;
  asd::GraphicsDeviceType arg2 ;
  asd::Log *arg3 = (asd::Log *) 0 ;
  asd::File *arg4 = (asd::File *) 0 ;
  bool arg5 ;
  bool arg6 ;
  asd::Graphics_Imp *result = 0 ;
  
  arg1 = (asd::Window *)jarg1; 
  arg2 = (asd::GraphicsDeviceType)jarg2; 
  arg3 = (asd::Log *)jarg3; 
  arg4 = (asd::File *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (asd::Graphics_Imp *)asd::Graphics_Imp::Create(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Graphics_Imp_Create__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, void * jarg7, unsigned int jarg8, unsigned int jarg9) {
  void * jresult ;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  int32_t arg3 ;
  int32_t arg4 ;
  asd::GraphicsDeviceType arg5 ;
  asd::Log *arg6 = (asd::Log *) 0 ;
  asd::File *arg7 = (asd::File *) 0 ;
  bool arg8 ;
  bool arg9 ;
  asd::Graphics_Imp *result = 0 ;
  
  {
    arg1 = jarg1; 
  }
  {
    arg2 = jarg2; 
  }
  arg3 = (int32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  arg5 = (asd::GraphicsDeviceType)jarg5; 
  arg6 = (asd::Log *)jarg6; 
  arg7 = (asd::File *)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = jarg9 ? true : false; 
  result = (asd::Graphics_Imp *)asd::Graphics_Imp::Create(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Graphics_Imp_Clear(void * jarg1, unsigned int jarg2, unsigned int jarg3, void* jarg4) {
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  bool arg2 ;
  bool arg3 ;
  asd::Color *arg4 = 0 ;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = (asd::Color*)jarg4;
  (arg1)->Clear(arg2,arg3,(asd::Color const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Graphics_Imp_Present(void * jarg1) {
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  (arg1)->Present();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Graphics_Imp_SaveScreenshot(void * jarg1, ::asd::achar * jarg2) {
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  (arg1)->SaveScreenshot((asd::achar const *)arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Graphics_Imp_GetDrawCallCount(void * jarg1) {
  int jresult ;
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  int32_t result;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  result = (int32_t)((asd::Graphics_Imp const *)arg1)->GetDrawCallCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Graphics_Imp_GetUsedVRAMSize(void * jarg1) {
  int jresult ;
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  int32_t result;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  result = (int32_t)((asd::Graphics_Imp const *)arg1)->GetUsedVRAMSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Graphics_Imp_CreateTexture2D_Imp(void * jarg1, ::asd::achar * jarg2) {
  void * jresult ;
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Texture2D_Imp *result = 0 ;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (asd::Texture2D_Imp *)(arg1)->CreateTexture2D_Imp((asd::achar const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Graphics_Imp_CreateTexture2DAsRawData_Imp(void * jarg1, ::asd::achar * jarg2) {
  void * jresult ;
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Texture2D_Imp *result = 0 ;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (asd::Texture2D_Imp *)(arg1)->CreateTexture2DAsRawData_Imp((asd::achar const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Graphics_Imp_CreateEmptyTexture2D_Imp(void * jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  asd::TextureFormat arg4 ;
  asd::Texture2D_Imp *result = 0 ;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (asd::TextureFormat)jarg4; 
  result = (asd::Texture2D_Imp *)(arg1)->CreateEmptyTexture2D_Imp(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Graphics_Imp_CreateTexture2DWithRawData(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
  void * jresult ;
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  asd::TextureFormat arg4 ;
  void *arg5 = (void *) 0 ;
  asd::Texture2D_Imp *result = 0 ;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (asd::TextureFormat)jarg4; 
  {
    arg5 = jarg5; 
  }
  result = (asd::Texture2D_Imp *)(arg1)->CreateTexture2DWithRawData(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Graphics_Imp_CreateRenderTexture2D_Imp(void * jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  asd::TextureFormat arg4 ;
  asd::RenderTexture2D_Imp *result = 0 ;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (asd::TextureFormat)jarg4; 
  result = (asd::RenderTexture2D_Imp *)(arg1)->CreateRenderTexture2D_Imp(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Graphics_Imp_CreateCubemapTextureFrom6ImageFiles_(void * jarg1, ::asd::achar * jarg2, ::asd::achar * jarg3, ::asd::achar * jarg4, ::asd::achar * jarg5, ::asd::achar * jarg6, ::asd::achar * jarg7) {
  void * jresult ;
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::achar *arg3 = (asd::achar *) 0 ;
  asd::achar *arg4 = (asd::achar *) 0 ;
  asd::achar *arg5 = (asd::achar *) 0 ;
  asd::achar *arg6 = (asd::achar *) 0 ;
  asd::achar *arg7 = (asd::achar *) 0 ;
  asd::CubemapTexture *result = 0 ;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (asd::achar *)jarg3; 
  arg4 = (asd::achar *)jarg4; 
  arg5 = (asd::achar *)jarg5; 
  arg6 = (asd::achar *)jarg6; 
  arg7 = (asd::achar *)jarg7; 
  result = (asd::CubemapTexture *)(arg1)->CreateCubemapTextureFrom6ImageFiles_((asd::achar const *)arg2,(asd::achar const *)arg3,(asd::achar const *)arg4,(asd::achar const *)arg5,(asd::achar const *)arg6,(asd::achar const *)arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Graphics_Imp_CreateCubemapTextureFromMipmapImageFiles_(void * jarg1, ::asd::achar * jarg2, int jarg3) {
  void * jresult ;
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  int32_t arg3 ;
  asd::CubemapTexture *result = 0 ;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (int32_t)jarg3; 
  result = (asd::CubemapTexture *)(arg1)->CreateCubemapTextureFromMipmapImageFiles_((asd::achar const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Graphics_Imp_CreateCubemapTextureFromSingleImageFile_(void * jarg1, ::asd::achar * jarg2) {
  void * jresult ;
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::CubemapTexture *result = 0 ;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (asd::CubemapTexture *)(arg1)->CreateCubemapTextureFromSingleImageFile_((asd::achar const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Graphics_Imp_CreateShader2D_(void * jarg1, ::asd::achar * jarg2) {
  void * jresult ;
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Shader2D *result = 0 ;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (asd::Shader2D *)(arg1)->CreateShader2D_((asd::achar const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Graphics_Imp_CreateMaterial2D_(void * jarg1, void * jarg2) {
  void * jresult ;
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  asd::Shader2D *arg2 = (asd::Shader2D *) 0 ;
  asd::Material2D *result = 0 ;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  arg2 = (asd::Shader2D *)jarg2; 
  result = (asd::Material2D *)(arg1)->CreateMaterial2D_(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Graphics_Imp_CreateShader3D_(void * jarg1, ::asd::achar * jarg2) {
  void * jresult ;
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Shader3D *result = 0 ;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (asd::Shader3D *)(arg1)->CreateShader3D_((asd::achar const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Graphics_Imp_CreateMaterial3D_(void * jarg1, void * jarg2) {
  void * jresult ;
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  asd::Shader3D *arg2 = (asd::Shader3D *) 0 ;
  asd::Material3D *result = 0 ;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  arg2 = (asd::Shader3D *)jarg2; 
  result = (asd::Material3D *)(arg1)->CreateMaterial3D_(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Graphics_Imp_CreateMaterialPropertyBlock_(void * jarg1) {
  void * jresult ;
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  asd::MaterialPropertyBlock *result = 0 ;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  result = (asd::MaterialPropertyBlock *)(arg1)->CreateMaterialPropertyBlock_();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Graphics_Imp_CreateMesh_(void * jarg1) {
  void * jresult ;
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  asd::Mesh *result = 0 ;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  result = (asd::Mesh *)(arg1)->CreateMesh_();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Graphics_Imp_CreateDeformer_(void * jarg1) {
  void * jresult ;
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  asd::Deformer *result = 0 ;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  result = (asd::Deformer *)(arg1)->CreateDeformer_();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Graphics_Imp_CreateModel_(void * jarg1, ::asd::achar * jarg2) {
  void * jresult ;
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Model *result = 0 ;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (asd::Model *)(arg1)->CreateModel_((asd::achar const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Graphics_Imp_CreateMassModelFromModelFile_(void * jarg1, ::asd::achar * jarg2) {
  void * jresult ;
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::MassModel *result = 0 ;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (asd::MassModel *)(arg1)->CreateMassModelFromModelFile_((asd::achar const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Graphics_Imp_CreateMassModel_(void * jarg1, ::asd::achar * jarg2) {
  void * jresult ;
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::MassModel *result = 0 ;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (asd::MassModel *)(arg1)->CreateMassModel_((asd::achar const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Graphics_Imp_CreateTerrain3D_(void * jarg1) {
  void * jresult ;
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  asd::Terrain3D *result = 0 ;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  result = (asd::Terrain3D *)(arg1)->CreateTerrain3D_();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Graphics_Imp_CreateEffect_(void * jarg1, ::asd::achar * jarg2) {
  void * jresult ;
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Effect *result = 0 ;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (asd::Effect *)(arg1)->CreateEffect_((asd::achar const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Graphics_Imp_CreateFont_(void * jarg1, ::asd::achar * jarg2) {
  void * jresult ;
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Font *result = 0 ;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (asd::Font *)(arg1)->CreateFont_((asd::achar const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Graphics_Imp_CreateDynamicFont_(void * jarg1, ::asd::achar * jarg2, int jarg3, asd::Color_R jarg4, int jarg5, asd::Color_R jarg6) {
  void * jresult ;
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  int32_t arg3 ;
  asd::Color arg4 ;
  int32_t arg5 ;
  asd::Color arg6 ;
  asd::Font *result = 0 ;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (int32_t)jarg3; 
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg4, &jarg4, sizeof(asd::Color_R)); 
  }
  arg5 = (int32_t)jarg5; 
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg6, &jarg6, sizeof(asd::Color_R)); 
  }
  result = (asd::Font *)(arg1)->CreateDynamicFont_((asd::achar const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Graphics_Imp_CreateImagePackage_(void * jarg1, ::asd::achar * jarg2) {
  void * jresult ;
  asd::Graphics_Imp *arg1 = (asd::Graphics_Imp *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::ImagePackage *result = 0 ;
  
  arg1 = (asd::Graphics_Imp *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (asd::ImagePackage *)(arg1)->CreateImagePackage_((asd::achar const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoreShape(void * jarg1) {
  asd::CoreShape *arg1 = (asd::CoreShape *) 0 ;
  
  arg1 = (asd::CoreShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreShape_GetShapeType(void * jarg1) {
  int jresult ;
  asd::CoreShape *arg1 = (asd::CoreShape *) 0 ;
  asd::ShapeType result;
  
  arg1 = (asd::CoreShape *)jarg1; 
  result = (asd::ShapeType)((asd::CoreShape const *)arg1)->GetShapeType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreShape_GetIsCollidedWith(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  asd::CoreShape *arg1 = (asd::CoreShape *) 0 ;
  asd::CoreShape *arg2 = (asd::CoreShape *) 0 ;
  bool result;
  
  arg1 = (asd::CoreShape *)jarg1; 
  arg2 = (asd::CoreShape *)jarg2; 
  result = (bool)(arg1)->GetIsCollidedWith(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoreTriangleShape(void * jarg1) {
  asd::CoreTriangleShape *arg1 = (asd::CoreTriangleShape *) 0 ;
  
  arg1 = (asd::CoreTriangleShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT asd::Vector2DF_R SWIGSTDCALL CSharp_CoreTriangleShape_GetPointByIndex(void * jarg1, int jarg2) {
  asd::Vector2DF_R jresult ;
  asd::CoreTriangleShape *arg1 = (asd::CoreTriangleShape *) 0 ;
  int arg2 ;
  asd::Vector2DF result;
  
  arg1 = (asd::CoreTriangleShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((asd::CoreTriangleShape const *)arg1)->GetPointByIndex(arg2);
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTriangleShape_SetPointByIndex(void * jarg1, asd::Vector2DF_R jarg2, int jarg3) {
  asd::CoreTriangleShape *arg1 = (asd::CoreTriangleShape *) 0 ;
  asd::Vector2DF arg2 ;
  int arg3 ;
  
  arg1 = (asd::CoreTriangleShape *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  arg3 = (int)jarg3; 
  (arg1)->SetPointByIndex(arg2,arg3);
}


SWIGEXPORT asd::Vector2DF_R SWIGSTDCALL CSharp_CoreTriangleShape_GetUVByIndex(void * jarg1, int jarg2) {
  asd::Vector2DF_R jresult ;
  asd::CoreTriangleShape *arg1 = (asd::CoreTriangleShape *) 0 ;
  int arg2 ;
  asd::Vector2DF result;
  
  arg1 = (asd::CoreTriangleShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((asd::CoreTriangleShape const *)arg1)->GetUVByIndex(arg2);
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTriangleShape_SetUVByIndex(void * jarg1, asd::Vector2DF_R jarg2, int jarg3) {
  asd::CoreTriangleShape *arg1 = (asd::CoreTriangleShape *) 0 ;
  asd::Vector2DF arg2 ;
  int arg3 ;
  
  arg1 = (asd::CoreTriangleShape *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  arg3 = (int)jarg3; 
  (arg1)->SetUVByIndex(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreTriangleShape_GetShapeType(void * jarg1) {
  int jresult ;
  asd::CoreTriangleShape *arg1 = (asd::CoreTriangleShape *) 0 ;
  asd::ShapeType result;
  
  arg1 = (asd::CoreTriangleShape *)jarg1; 
  result = (asd::ShapeType)((asd::CoreTriangleShape const *)arg1)->GetShapeType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoreCircleShape(void * jarg1) {
  asd::CoreCircleShape *arg1 = (asd::CoreCircleShape *) 0 ;
  
  arg1 = (asd::CoreCircleShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT asd::Vector2DF_R SWIGSTDCALL CSharp_CoreCircleShape_GetPosition(void * jarg1) {
  asd::Vector2DF_R jresult ;
  asd::CoreCircleShape *arg1 = (asd::CoreCircleShape *) 0 ;
  asd::Vector2DF result;
  
  arg1 = (asd::CoreCircleShape *)jarg1; 
  result = ((asd::CoreCircleShape const *)arg1)->GetPosition();
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreCircleShape_SetPosition(void * jarg1, asd::Vector2DF_R jarg2) {
  asd::CoreCircleShape *arg1 = (asd::CoreCircleShape *) 0 ;
  asd::Vector2DF arg2 ;
  
  arg1 = (asd::CoreCircleShape *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  (arg1)->SetPosition(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CoreCircleShape_GetOuterDiameter(void * jarg1) {
  float jresult ;
  asd::CoreCircleShape *arg1 = (asd::CoreCircleShape *) 0 ;
  float result;
  
  arg1 = (asd::CoreCircleShape *)jarg1; 
  result = (float)((asd::CoreCircleShape const *)arg1)->GetOuterDiameter();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreCircleShape_SetOuterDiameter(void * jarg1, float jarg2) {
  asd::CoreCircleShape *arg1 = (asd::CoreCircleShape *) 0 ;
  float arg2 ;
  
  arg1 = (asd::CoreCircleShape *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetOuterDiameter(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CoreCircleShape_GetInnerDiameter(void * jarg1) {
  float jresult ;
  asd::CoreCircleShape *arg1 = (asd::CoreCircleShape *) 0 ;
  float result;
  
  arg1 = (asd::CoreCircleShape *)jarg1; 
  result = (float)((asd::CoreCircleShape const *)arg1)->GetInnerDiameter();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreCircleShape_SetInnerDiameter(void * jarg1, float jarg2) {
  asd::CoreCircleShape *arg1 = (asd::CoreCircleShape *) 0 ;
  float arg2 ;
  
  arg1 = (asd::CoreCircleShape *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetInnerDiameter(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CoreCircleShape_GetAngle(void * jarg1) {
  float jresult ;
  asd::CoreCircleShape *arg1 = (asd::CoreCircleShape *) 0 ;
  float result;
  
  arg1 = (asd::CoreCircleShape *)jarg1; 
  result = (float)((asd::CoreCircleShape const *)arg1)->GetAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreCircleShape_SetAngle(void * jarg1, float jarg2) {
  asd::CoreCircleShape *arg1 = (asd::CoreCircleShape *) 0 ;
  float arg2 ;
  
  arg1 = (asd::CoreCircleShape *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetAngle(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreCircleShape_GetNumberOfCorners(void * jarg1) {
  int jresult ;
  asd::CoreCircleShape *arg1 = (asd::CoreCircleShape *) 0 ;
  int result;
  
  arg1 = (asd::CoreCircleShape *)jarg1; 
  result = (int)((asd::CoreCircleShape const *)arg1)->GetNumberOfCorners();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreCircleShape_SetNumberOfCorners(void * jarg1, int jarg2) {
  asd::CoreCircleShape *arg1 = (asd::CoreCircleShape *) 0 ;
  int arg2 ;
  
  arg1 = (asd::CoreCircleShape *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetNumberOfCorners(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoreArcShape(void * jarg1) {
  asd::CoreArcShape *arg1 = (asd::CoreArcShape *) 0 ;
  
  arg1 = (asd::CoreArcShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT asd::Vector2DF_R SWIGSTDCALL CSharp_CoreArcShape_GetPosition(void * jarg1) {
  asd::Vector2DF_R jresult ;
  asd::CoreArcShape *arg1 = (asd::CoreArcShape *) 0 ;
  asd::Vector2DF result;
  
  arg1 = (asd::CoreArcShape *)jarg1; 
  result = ((asd::CoreArcShape const *)arg1)->GetPosition();
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreArcShape_SetPosition(void * jarg1, asd::Vector2DF_R jarg2) {
  asd::CoreArcShape *arg1 = (asd::CoreArcShape *) 0 ;
  asd::Vector2DF arg2 ;
  
  arg1 = (asd::CoreArcShape *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  (arg1)->SetPosition(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CoreArcShape_GetOuterDiameter(void * jarg1) {
  float jresult ;
  asd::CoreArcShape *arg1 = (asd::CoreArcShape *) 0 ;
  float result;
  
  arg1 = (asd::CoreArcShape *)jarg1; 
  result = (float)((asd::CoreArcShape const *)arg1)->GetOuterDiameter();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreArcShape_SetOuterDiameter(void * jarg1, float jarg2) {
  asd::CoreArcShape *arg1 = (asd::CoreArcShape *) 0 ;
  float arg2 ;
  
  arg1 = (asd::CoreArcShape *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetOuterDiameter(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CoreArcShape_GetInnerDiameter(void * jarg1) {
  float jresult ;
  asd::CoreArcShape *arg1 = (asd::CoreArcShape *) 0 ;
  float result;
  
  arg1 = (asd::CoreArcShape *)jarg1; 
  result = (float)((asd::CoreArcShape const *)arg1)->GetInnerDiameter();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreArcShape_SetInnerDiameter(void * jarg1, float jarg2) {
  asd::CoreArcShape *arg1 = (asd::CoreArcShape *) 0 ;
  float arg2 ;
  
  arg1 = (asd::CoreArcShape *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetInnerDiameter(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CoreArcShape_GetAngle(void * jarg1) {
  float jresult ;
  asd::CoreArcShape *arg1 = (asd::CoreArcShape *) 0 ;
  float result;
  
  arg1 = (asd::CoreArcShape *)jarg1; 
  result = (float)((asd::CoreArcShape const *)arg1)->GetAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreArcShape_SetAngle(void * jarg1, float jarg2) {
  asd::CoreArcShape *arg1 = (asd::CoreArcShape *) 0 ;
  float arg2 ;
  
  arg1 = (asd::CoreArcShape *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetAngle(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreArcShape_GetStartingCorner(void * jarg1) {
  int jresult ;
  asd::CoreArcShape *arg1 = (asd::CoreArcShape *) 0 ;
  int result;
  
  arg1 = (asd::CoreArcShape *)jarg1; 
  result = (int)((asd::CoreArcShape const *)arg1)->GetStartingCorner();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreArcShape_SetStartingCorner(void * jarg1, int jarg2) {
  asd::CoreArcShape *arg1 = (asd::CoreArcShape *) 0 ;
  int arg2 ;
  
  arg1 = (asd::CoreArcShape *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetStartingCorner(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreArcShape_GetEndingCorner(void * jarg1) {
  int jresult ;
  asd::CoreArcShape *arg1 = (asd::CoreArcShape *) 0 ;
  int result;
  
  arg1 = (asd::CoreArcShape *)jarg1; 
  result = (int)((asd::CoreArcShape const *)arg1)->GetEndingCorner();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreArcShape_SetEndingCorner(void * jarg1, int jarg2) {
  asd::CoreArcShape *arg1 = (asd::CoreArcShape *) 0 ;
  int arg2 ;
  
  arg1 = (asd::CoreArcShape *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetEndingCorner(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreArcShape_GetNumberOfCorners(void * jarg1) {
  int jresult ;
  asd::CoreArcShape *arg1 = (asd::CoreArcShape *) 0 ;
  int result;
  
  arg1 = (asd::CoreArcShape *)jarg1; 
  result = (int)((asd::CoreArcShape const *)arg1)->GetNumberOfCorners();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreArcShape_SetNumberOfCorners(void * jarg1, int jarg2) {
  asd::CoreArcShape *arg1 = (asd::CoreArcShape *) 0 ;
  int arg2 ;
  
  arg1 = (asd::CoreArcShape *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetNumberOfCorners(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoreLineShape(void * jarg1) {
  asd::CoreLineShape *arg1 = (asd::CoreLineShape *) 0 ;
  
  arg1 = (asd::CoreLineShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT asd::Vector2DF_R SWIGSTDCALL CSharp_CoreLineShape_GetStartingPosition(void * jarg1) {
  asd::Vector2DF_R jresult ;
  asd::CoreLineShape *arg1 = (asd::CoreLineShape *) 0 ;
  asd::Vector2DF result;
  
  arg1 = (asd::CoreLineShape *)jarg1; 
  result = ((asd::CoreLineShape const *)arg1)->GetStartingPosition();
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLineShape_SetStartingPosition(void * jarg1, asd::Vector2DF_R jarg2) {
  asd::CoreLineShape *arg1 = (asd::CoreLineShape *) 0 ;
  asd::Vector2DF arg2 ;
  
  arg1 = (asd::CoreLineShape *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  (arg1)->SetStartingPosition(arg2);
}


SWIGEXPORT asd::Vector2DF_R SWIGSTDCALL CSharp_CoreLineShape_GetEndingPosition(void * jarg1) {
  asd::Vector2DF_R jresult ;
  asd::CoreLineShape *arg1 = (asd::CoreLineShape *) 0 ;
  asd::Vector2DF result;
  
  arg1 = (asd::CoreLineShape *)jarg1; 
  result = ((asd::CoreLineShape const *)arg1)->GetEndingPosition();
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLineShape_SetEndingPosition(void * jarg1, asd::Vector2DF_R jarg2) {
  asd::CoreLineShape *arg1 = (asd::CoreLineShape *) 0 ;
  asd::Vector2DF arg2 ;
  
  arg1 = (asd::CoreLineShape *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  (arg1)->SetEndingPosition(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CoreLineShape_GetThickness(void * jarg1) {
  float jresult ;
  asd::CoreLineShape *arg1 = (asd::CoreLineShape *) 0 ;
  float result;
  
  arg1 = (asd::CoreLineShape *)jarg1; 
  result = (float)((asd::CoreLineShape const *)arg1)->GetThickness();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLineShape_SetThickness(void * jarg1, float jarg2) {
  asd::CoreLineShape *arg1 = (asd::CoreLineShape *) 0 ;
  float arg2 ;
  
  arg1 = (asd::CoreLineShape *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetThickness(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoreRectangleShape(void * jarg1) {
  asd::CoreRectangleShape *arg1 = (asd::CoreRectangleShape *) 0 ;
  
  arg1 = (asd::CoreRectangleShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT asd::RectF_R SWIGSTDCALL CSharp_CoreRectangleShape_GetDrawingArea(void * jarg1) {
  asd::RectF_R jresult ;
  asd::CoreRectangleShape *arg1 = (asd::CoreRectangleShape *) 0 ;
  asd::RectF result;
  
  arg1 = (asd::CoreRectangleShape *)jarg1; 
  result = ((asd::CoreRectangleShape const *)arg1)->GetDrawingArea();
  {
    assert(sizeof(asd::RectF)==sizeof(asd::RectF_R)); memcpy(&jresult, &result, sizeof(asd::RectF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreRectangleShape_SetDrawingArea(void * jarg1, asd::RectF_R jarg2) {
  asd::CoreRectangleShape *arg1 = (asd::CoreRectangleShape *) 0 ;
  asd::RectF arg2 ;
  
  arg1 = (asd::CoreRectangleShape *)jarg1; 
  {
    assert(sizeof(asd::RectF)==sizeof(asd::RectF_R)); memcpy(&arg2, &jarg2, sizeof(asd::RectF_R)); 
  }
  (arg1)->SetDrawingArea(arg2);
}


SWIGEXPORT asd::RectF_R SWIGSTDCALL CSharp_CoreRectangleShape_GetUV(void * jarg1) {
  asd::RectF_R jresult ;
  asd::CoreRectangleShape *arg1 = (asd::CoreRectangleShape *) 0 ;
  asd::RectF result;
  
  arg1 = (asd::CoreRectangleShape *)jarg1; 
  result = ((asd::CoreRectangleShape const *)arg1)->GetUV();
  {
    assert(sizeof(asd::RectF)==sizeof(asd::RectF_R)); memcpy(&jresult, &result, sizeof(asd::RectF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreRectangleShape_SetUV(void * jarg1, asd::RectF_R jarg2) {
  asd::CoreRectangleShape *arg1 = (asd::CoreRectangleShape *) 0 ;
  asd::RectF arg2 ;
  
  arg1 = (asd::CoreRectangleShape *)jarg1; 
  {
    assert(sizeof(asd::RectF)==sizeof(asd::RectF_R)); memcpy(&arg2, &jarg2, sizeof(asd::RectF_R)); 
  }
  (arg1)->SetUV(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CoreRectangleShape_GetAngle(void * jarg1) {
  float jresult ;
  asd::CoreRectangleShape *arg1 = (asd::CoreRectangleShape *) 0 ;
  float result;
  
  arg1 = (asd::CoreRectangleShape *)jarg1; 
  result = (float)((asd::CoreRectangleShape const *)arg1)->GetAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreRectangleShape_SetAngle(void * jarg1, float jarg2) {
  asd::CoreRectangleShape *arg1 = (asd::CoreRectangleShape *) 0 ;
  float arg2 ;
  
  arg1 = (asd::CoreRectangleShape *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetAngle(arg2);
}


SWIGEXPORT asd::Vector2DF_R SWIGSTDCALL CSharp_CoreRectangleShape_GetCenterPosition(void * jarg1) {
  asd::Vector2DF_R jresult ;
  asd::CoreRectangleShape *arg1 = (asd::CoreRectangleShape *) 0 ;
  asd::Vector2DF result;
  
  arg1 = (asd::CoreRectangleShape *)jarg1; 
  result = ((asd::CoreRectangleShape const *)arg1)->GetCenterPosition();
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreRectangleShape_SetCenterPosition(void * jarg1, asd::Vector2DF_R jarg2) {
  asd::CoreRectangleShape *arg1 = (asd::CoreRectangleShape *) 0 ;
  asd::Vector2DF arg2 ;
  
  arg1 = (asd::CoreRectangleShape *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  (arg1)->SetCenterPosition(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CorePolygonShape(void * jarg1) {
  asd::CorePolygonShape *arg1 = (asd::CorePolygonShape *) 0 ;
  
  arg1 = (asd::CorePolygonShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CorePolygonShape_AddVertex(void * jarg1, asd::Vector2DF_R jarg2) {
  asd::CorePolygonShape *arg1 = (asd::CorePolygonShape *) 0 ;
  asd::Vector2DF arg2 ;
  
  arg1 = (asd::CorePolygonShape *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  (arg1)->AddVertex(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CorePolygonShape_ClearVertexes(void * jarg1) {
  asd::CorePolygonShape *arg1 = (asd::CorePolygonShape *) 0 ;
  
  arg1 = (asd::CorePolygonShape *)jarg1; 
  (arg1)->ClearVertexes();
}


SWIGEXPORT int SWIGSTDCALL CSharp_CorePolygonShape_GetVertexesNum(void * jarg1) {
  int jresult ;
  asd::CorePolygonShape *arg1 = (asd::CorePolygonShape *) 0 ;
  int result;
  
  arg1 = (asd::CorePolygonShape *)jarg1; 
  result = (int)((asd::CorePolygonShape const *)arg1)->GetVertexesNum();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoreChip2D(void * jarg1) {
  asd::CoreChip2D *arg1 = (asd::CoreChip2D *) 0 ;
  
  arg1 = (asd::CoreChip2D *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreChip2D_SetTexture(void * jarg1, void * jarg2) {
  asd::CoreChip2D *arg1 = (asd::CoreChip2D *) 0 ;
  asd::Texture2D *arg2 = (asd::Texture2D *) 0 ;
  
  arg1 = (asd::CoreChip2D *)jarg1; 
  arg2 = (asd::Texture2D *)jarg2; 
  (arg1)->SetTexture(arg2);
}


SWIGEXPORT asd::RectF_R SWIGSTDCALL CSharp_CoreChip2D_GetSrc(void * jarg1) {
  asd::RectF_R jresult ;
  asd::CoreChip2D *arg1 = (asd::CoreChip2D *) 0 ;
  asd::RectF result;
  
  arg1 = (asd::CoreChip2D *)jarg1; 
  result = ((asd::CoreChip2D const *)arg1)->GetSrc();
  {
    assert(sizeof(asd::RectF)==sizeof(asd::RectF_R)); memcpy(&jresult, &result, sizeof(asd::RectF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreChip2D_SetSrc(void * jarg1, asd::RectF_R jarg2) {
  asd::CoreChip2D *arg1 = (asd::CoreChip2D *) 0 ;
  asd::RectF arg2 ;
  
  arg1 = (asd::CoreChip2D *)jarg1; 
  {
    assert(sizeof(asd::RectF)==sizeof(asd::RectF_R)); memcpy(&arg2, &jarg2, sizeof(asd::RectF_R)); 
  }
  (arg1)->SetSrc(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CoreChip2D_GetAngle(void * jarg1) {
  float jresult ;
  asd::CoreChip2D *arg1 = (asd::CoreChip2D *) 0 ;
  float result;
  
  arg1 = (asd::CoreChip2D *)jarg1; 
  result = (float)((asd::CoreChip2D const *)arg1)->GetAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreChip2D_SetAngle(void * jarg1, float jarg2) {
  asd::CoreChip2D *arg1 = (asd::CoreChip2D *) 0 ;
  float arg2 ;
  
  arg1 = (asd::CoreChip2D *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetAngle(arg2);
}


SWIGEXPORT asd::Vector2DF_R SWIGSTDCALL CSharp_CoreChip2D_GetScale(void * jarg1) {
  asd::Vector2DF_R jresult ;
  asd::CoreChip2D *arg1 = (asd::CoreChip2D *) 0 ;
  asd::Vector2DF result;
  
  arg1 = (asd::CoreChip2D *)jarg1; 
  result = ((asd::CoreChip2D const *)arg1)->GetScale();
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreChip2D_SetScale(void * jarg1, asd::Vector2DF_R jarg2) {
  asd::CoreChip2D *arg1 = (asd::CoreChip2D *) 0 ;
  asd::Vector2DF arg2 ;
  
  arg1 = (asd::CoreChip2D *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  (arg1)->SetScale(arg2);
}


SWIGEXPORT asd::Vector2DF_R SWIGSTDCALL CSharp_CoreChip2D_GetPosition(void * jarg1) {
  asd::Vector2DF_R jresult ;
  asd::CoreChip2D *arg1 = (asd::CoreChip2D *) 0 ;
  asd::Vector2DF result;
  
  arg1 = (asd::CoreChip2D *)jarg1; 
  result = ((asd::CoreChip2D const *)arg1)->GetPosition();
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreChip2D_SetPosition(void * jarg1, asd::Vector2DF_R jarg2) {
  asd::CoreChip2D *arg1 = (asd::CoreChip2D *) 0 ;
  asd::Vector2DF arg2 ;
  
  arg1 = (asd::CoreChip2D *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  (arg1)->SetPosition(arg2);
}


SWIGEXPORT asd::Vector2DF_R SWIGSTDCALL CSharp_CoreChip2D_GetCenterPosition(void * jarg1) {
  asd::Vector2DF_R jresult ;
  asd::CoreChip2D *arg1 = (asd::CoreChip2D *) 0 ;
  asd::Vector2DF result;
  
  arg1 = (asd::CoreChip2D *)jarg1; 
  result = ((asd::CoreChip2D const *)arg1)->GetCenterPosition();
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreChip2D_SetCenterPosition(void * jarg1, asd::Vector2DF_R jarg2) {
  asd::CoreChip2D *arg1 = (asd::CoreChip2D *) 0 ;
  asd::Vector2DF arg2 ;
  
  arg1 = (asd::CoreChip2D *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  (arg1)->SetCenterPosition(arg2);
}


SWIGEXPORT asd::Color_R SWIGSTDCALL CSharp_CoreChip2D_GetColor(void * jarg1) {
  asd::Color_R jresult ;
  asd::CoreChip2D *arg1 = (asd::CoreChip2D *) 0 ;
  asd::Color result;
  
  arg1 = (asd::CoreChip2D *)jarg1; 
  result = ((asd::CoreChip2D const *)arg1)->GetColor();
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&jresult, &result, sizeof(asd::Color_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreChip2D_SetColor(void * jarg1, asd::Color_R jarg2) {
  asd::CoreChip2D *arg1 = (asd::CoreChip2D *) 0 ;
  asd::Color arg2 ;
  
  arg1 = (asd::CoreChip2D *)jarg1; 
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg2, &jarg2, sizeof(asd::Color_R)); 
  }
  (arg1)->SetColor(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreChip2D_GetTurnLR(void * jarg1) {
  unsigned int jresult ;
  asd::CoreChip2D *arg1 = (asd::CoreChip2D *) 0 ;
  bool result;
  
  arg1 = (asd::CoreChip2D *)jarg1; 
  result = (bool)((asd::CoreChip2D const *)arg1)->GetTurnLR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreChip2D_SetTurnLR(void * jarg1, unsigned int jarg2) {
  asd::CoreChip2D *arg1 = (asd::CoreChip2D *) 0 ;
  bool arg2 ;
  
  arg1 = (asd::CoreChip2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetTurnLR(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreChip2D_GetTurnUL(void * jarg1) {
  unsigned int jresult ;
  asd::CoreChip2D *arg1 = (asd::CoreChip2D *) 0 ;
  bool result;
  
  arg1 = (asd::CoreChip2D *)jarg1; 
  result = (bool)((asd::CoreChip2D const *)arg1)->GetTurnUL();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreChip2D_SetTurnUL(void * jarg1, unsigned int jarg2) {
  asd::CoreChip2D *arg1 = (asd::CoreChip2D *) 0 ;
  bool arg2 ;
  
  arg1 = (asd::CoreChip2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetTurnUL(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreChip2D_GetDrawingPriority(void * jarg1) {
  int jresult ;
  asd::CoreChip2D *arg1 = (asd::CoreChip2D *) 0 ;
  int result;
  
  arg1 = (asd::CoreChip2D *)jarg1; 
  result = (int)((asd::CoreChip2D const *)arg1)->GetDrawingPriority();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreChip2D_SetDrawingPriority(void * jarg1, int jarg2) {
  asd::CoreChip2D *arg1 = (asd::CoreChip2D *) 0 ;
  int arg2 ;
  
  arg1 = (asd::CoreChip2D *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDrawingPriority(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreChip2D_GetAlphaBlendMode(void * jarg1) {
  int jresult ;
  asd::CoreChip2D *arg1 = (asd::CoreChip2D *) 0 ;
  asd::AlphaBlendMode result;
  
  arg1 = (asd::CoreChip2D *)jarg1; 
  result = (asd::AlphaBlendMode)((asd::CoreChip2D const *)arg1)->GetAlphaBlendMode();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreChip2D_SetAlphaBlendMode(void * jarg1, int jarg2) {
  asd::CoreChip2D *arg1 = (asd::CoreChip2D *) 0 ;
  asd::AlphaBlendMode arg2 ;
  
  arg1 = (asd::CoreChip2D *)jarg1; 
  arg2 = (asd::AlphaBlendMode)jarg2; 
  (arg1)->SetAlphaBlendMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreChip2D_SetTextureFilterType(void * jarg1, int jarg2) {
  asd::CoreChip2D *arg1 = (asd::CoreChip2D *) 0 ;
  asd::TextureFilterType arg2 ;
  
  arg1 = (asd::CoreChip2D *)jarg1; 
  arg2 = (asd::TextureFilterType)jarg2; 
  (arg1)->SetTextureFilterType(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreChip2D_GetTextureFilterType(void * jarg1) {
  int jresult ;
  asd::CoreChip2D *arg1 = (asd::CoreChip2D *) 0 ;
  asd::TextureFilterType result;
  
  arg1 = (asd::CoreChip2D *)jarg1; 
  result = (asd::TextureFilterType)((asd::CoreChip2D const *)arg1)->GetTextureFilterType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoreObject2D(void * jarg1) {
  asd::CoreObject2D *arg1 = (asd::CoreObject2D *) 0 ;
  
  arg1 = (asd::CoreObject2D *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreObject2D_GetObjectType(void * jarg1) {
  int jresult ;
  asd::CoreObject2D *arg1 = (asd::CoreObject2D *) 0 ;
  asd::Object2DType result;
  
  arg1 = (asd::CoreObject2D *)jarg1; 
  result = (asd::Object2DType)((asd::CoreObject2D const *)arg1)->GetObjectType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreObject2D_GetIsDrawn(void * jarg1) {
  unsigned int jresult ;
  asd::CoreObject2D *arg1 = (asd::CoreObject2D *) 0 ;
  bool result;
  
  arg1 = (asd::CoreObject2D *)jarg1; 
  result = (bool)((asd::CoreObject2D const *)arg1)->GetIsDrawn();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreObject2D_SetIsDrawn(void * jarg1, unsigned int jarg2) {
  asd::CoreObject2D *arg1 = (asd::CoreObject2D *) 0 ;
  bool arg2 ;
  
  arg1 = (asd::CoreObject2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetIsDrawn(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreObject2D_GetIsAlive(void * jarg1) {
  unsigned int jresult ;
  asd::CoreObject2D *arg1 = (asd::CoreObject2D *) 0 ;
  bool result;
  
  arg1 = (asd::CoreObject2D *)jarg1; 
  result = (bool)((asd::CoreObject2D const *)arg1)->GetIsAlive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreObject2D_SetIsAlive(void * jarg1, unsigned int jarg2) {
  asd::CoreObject2D *arg1 = (asd::CoreObject2D *) 0 ;
  bool arg2 ;
  
  arg1 = (asd::CoreObject2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetIsAlive(arg2);
}


SWIGEXPORT asd::Vector2DF_R SWIGSTDCALL CSharp_CoreObject2D_GetPosition(void * jarg1) {
  asd::Vector2DF_R jresult ;
  asd::CoreObject2D *arg1 = (asd::CoreObject2D *) 0 ;
  asd::Vector2DF result;
  
  arg1 = (asd::CoreObject2D *)jarg1; 
  result = ((asd::CoreObject2D const *)arg1)->GetPosition();
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreObject2D_SetPosition(void * jarg1, asd::Vector2DF_R jarg2) {
  asd::CoreObject2D *arg1 = (asd::CoreObject2D *) 0 ;
  asd::Vector2DF arg2 ;
  
  arg1 = (asd::CoreObject2D *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  (arg1)->SetPosition(arg2);
}


SWIGEXPORT asd::Vector2DF_R SWIGSTDCALL CSharp_CoreObject2D_GetGlobalPosition(void * jarg1) {
  asd::Vector2DF_R jresult ;
  asd::CoreObject2D *arg1 = (asd::CoreObject2D *) 0 ;
  asd::Vector2DF result;
  
  arg1 = (asd::CoreObject2D *)jarg1; 
  result = (arg1)->GetGlobalPosition();
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DF_R)); 
  }
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CoreObject2D_GetAngle(void * jarg1) {
  float jresult ;
  asd::CoreObject2D *arg1 = (asd::CoreObject2D *) 0 ;
  float result;
  
  arg1 = (asd::CoreObject2D *)jarg1; 
  result = (float)((asd::CoreObject2D const *)arg1)->GetAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreObject2D_SetAngle(void * jarg1, float jarg2) {
  asd::CoreObject2D *arg1 = (asd::CoreObject2D *) 0 ;
  float arg2 ;
  
  arg1 = (asd::CoreObject2D *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetAngle(arg2);
}


SWIGEXPORT asd::Vector2DF_R SWIGSTDCALL CSharp_CoreObject2D_GetScale(void * jarg1) {
  asd::Vector2DF_R jresult ;
  asd::CoreObject2D *arg1 = (asd::CoreObject2D *) 0 ;
  asd::Vector2DF result;
  
  arg1 = (asd::CoreObject2D *)jarg1; 
  result = ((asd::CoreObject2D const *)arg1)->GetScale();
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreObject2D_SetScale(void * jarg1, asd::Vector2DF_R jarg2) {
  asd::CoreObject2D *arg1 = (asd::CoreObject2D *) 0 ;
  asd::Vector2DF arg2 ;
  
  arg1 = (asd::CoreObject2D *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  (arg1)->SetScale(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreObject2D_AddChild(void * jarg1, void * jarg2, int jarg3) {
  asd::CoreObject2D *arg1 = (asd::CoreObject2D *) 0 ;
  asd::CoreObject2D *arg2 = (asd::CoreObject2D *) 0 ;
  asd::ChildMode arg3 ;
  
  arg1 = (asd::CoreObject2D *)jarg1; 
  arg2 = (asd::CoreObject2D *)jarg2; 
  arg3 = (asd::ChildMode)jarg3; 
  (arg1)->AddChild(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreObject2D_RemoveChild(void * jarg1, void * jarg2) {
  asd::CoreObject2D *arg1 = (asd::CoreObject2D *) 0 ;
  asd::CoreObject2D *arg2 = (asd::CoreObject2D *) 0 ;
  
  arg1 = (asd::CoreObject2D *)jarg1; 
  arg2 = (asd::CoreObject2D *)jarg2; 
  (arg1)->RemoveChild(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoreTextureObject2D(void * jarg1) {
  asd::CoreTextureObject2D *arg1 = (asd::CoreTextureObject2D *) 0 ;
  
  arg1 = (asd::CoreTextureObject2D *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreTextureObject2D_GetTexture(void * jarg1) {
  void * jresult ;
  asd::CoreTextureObject2D *arg1 = (asd::CoreTextureObject2D *) 0 ;
  asd::Texture2D *result = 0 ;
  
  arg1 = (asd::CoreTextureObject2D *)jarg1; 
  result = (asd::Texture2D *)((asd::CoreTextureObject2D const *)arg1)->GetTexture();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT asd::RectF_R SWIGSTDCALL CSharp_CoreTextureObject2D_GetSrc(void * jarg1) {
  asd::RectF_R jresult ;
  asd::CoreTextureObject2D *arg1 = (asd::CoreTextureObject2D *) 0 ;
  asd::RectF result;
  
  arg1 = (asd::CoreTextureObject2D *)jarg1; 
  result = ((asd::CoreTextureObject2D const *)arg1)->GetSrc();
  {
    assert(sizeof(asd::RectF)==sizeof(asd::RectF_R)); memcpy(&jresult, &result, sizeof(asd::RectF_R)); 
  }
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CoreTextureObject2D_GetAngle(void * jarg1) {
  float jresult ;
  asd::CoreTextureObject2D *arg1 = (asd::CoreTextureObject2D *) 0 ;
  float result;
  
  arg1 = (asd::CoreTextureObject2D *)jarg1; 
  result = (float)((asd::CoreTextureObject2D const *)arg1)->GetAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT asd::Vector2DF_R SWIGSTDCALL CSharp_CoreTextureObject2D_GetScale(void * jarg1) {
  asd::Vector2DF_R jresult ;
  asd::CoreTextureObject2D *arg1 = (asd::CoreTextureObject2D *) 0 ;
  asd::Vector2DF result;
  
  arg1 = (asd::CoreTextureObject2D *)jarg1; 
  result = ((asd::CoreTextureObject2D const *)arg1)->GetScale();
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DF_R)); 
  }
  return jresult;
}


SWIGEXPORT asd::Vector2DF_R SWIGSTDCALL CSharp_CoreTextureObject2D_GetCenterPosition(void * jarg1) {
  asd::Vector2DF_R jresult ;
  asd::CoreTextureObject2D *arg1 = (asd::CoreTextureObject2D *) 0 ;
  asd::Vector2DF result;
  
  arg1 = (asd::CoreTextureObject2D *)jarg1; 
  result = ((asd::CoreTextureObject2D const *)arg1)->GetCenterPosition();
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DF_R)); 
  }
  return jresult;
}


SWIGEXPORT asd::Color_R SWIGSTDCALL CSharp_CoreTextureObject2D_GetColor(void * jarg1) {
  asd::Color_R jresult ;
  asd::CoreTextureObject2D *arg1 = (asd::CoreTextureObject2D *) 0 ;
  asd::Color result;
  
  arg1 = (asd::CoreTextureObject2D *)jarg1; 
  result = ((asd::CoreTextureObject2D const *)arg1)->GetColor();
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&jresult, &result, sizeof(asd::Color_R)); 
  }
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreTextureObject2D_GetTurnLR(void * jarg1) {
  unsigned int jresult ;
  asd::CoreTextureObject2D *arg1 = (asd::CoreTextureObject2D *) 0 ;
  bool result;
  
  arg1 = (asd::CoreTextureObject2D *)jarg1; 
  result = (bool)((asd::CoreTextureObject2D const *)arg1)->GetTurnLR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreTextureObject2D_GetTurnUL(void * jarg1) {
  unsigned int jresult ;
  asd::CoreTextureObject2D *arg1 = (asd::CoreTextureObject2D *) 0 ;
  bool result;
  
  arg1 = (asd::CoreTextureObject2D *)jarg1; 
  result = (bool)((asd::CoreTextureObject2D const *)arg1)->GetTurnUL();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreTextureObject2D_GetDrawingPriority(void * jarg1) {
  int jresult ;
  asd::CoreTextureObject2D *arg1 = (asd::CoreTextureObject2D *) 0 ;
  int result;
  
  arg1 = (asd::CoreTextureObject2D *)jarg1; 
  result = (int)((asd::CoreTextureObject2D const *)arg1)->GetDrawingPriority();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreTextureObject2D_GetAlphaBlendMode(void * jarg1) {
  int jresult ;
  asd::CoreTextureObject2D *arg1 = (asd::CoreTextureObject2D *) 0 ;
  asd::AlphaBlendMode result;
  
  arg1 = (asd::CoreTextureObject2D *)jarg1; 
  result = (asd::AlphaBlendMode)((asd::CoreTextureObject2D const *)arg1)->GetAlphaBlendMode();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTextureObject2D_SetTexture(void * jarg1, void * jarg2) {
  asd::CoreTextureObject2D *arg1 = (asd::CoreTextureObject2D *) 0 ;
  asd::Texture2D *arg2 = (asd::Texture2D *) 0 ;
  
  arg1 = (asd::CoreTextureObject2D *)jarg1; 
  arg2 = (asd::Texture2D *)jarg2; 
  (arg1)->SetTexture(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTextureObject2D_SetSrc(void * jarg1, asd::RectF_R jarg2) {
  asd::CoreTextureObject2D *arg1 = (asd::CoreTextureObject2D *) 0 ;
  asd::RectF arg2 ;
  
  arg1 = (asd::CoreTextureObject2D *)jarg1; 
  {
    assert(sizeof(asd::RectF)==sizeof(asd::RectF_R)); memcpy(&arg2, &jarg2, sizeof(asd::RectF_R)); 
  }
  (arg1)->SetSrc(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTextureObject2D_SetAngle(void * jarg1, float jarg2) {
  asd::CoreTextureObject2D *arg1 = (asd::CoreTextureObject2D *) 0 ;
  float arg2 ;
  
  arg1 = (asd::CoreTextureObject2D *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetAngle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTextureObject2D_SetScale(void * jarg1, asd::Vector2DF_R jarg2) {
  asd::CoreTextureObject2D *arg1 = (asd::CoreTextureObject2D *) 0 ;
  asd::Vector2DF arg2 ;
  
  arg1 = (asd::CoreTextureObject2D *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  (arg1)->SetScale(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTextureObject2D_SetCenterPosition(void * jarg1, asd::Vector2DF_R jarg2) {
  asd::CoreTextureObject2D *arg1 = (asd::CoreTextureObject2D *) 0 ;
  asd::Vector2DF arg2 ;
  
  arg1 = (asd::CoreTextureObject2D *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  (arg1)->SetCenterPosition(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTextureObject2D_SetColor(void * jarg1, asd::Color_R jarg2) {
  asd::CoreTextureObject2D *arg1 = (asd::CoreTextureObject2D *) 0 ;
  asd::Color arg2 ;
  
  arg1 = (asd::CoreTextureObject2D *)jarg1; 
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg2, &jarg2, sizeof(asd::Color_R)); 
  }
  (arg1)->SetColor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTextureObject2D_SetTurnLR(void * jarg1, unsigned int jarg2) {
  asd::CoreTextureObject2D *arg1 = (asd::CoreTextureObject2D *) 0 ;
  bool arg2 ;
  
  arg1 = (asd::CoreTextureObject2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetTurnLR(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTextureObject2D_SetTurnUL(void * jarg1, unsigned int jarg2) {
  asd::CoreTextureObject2D *arg1 = (asd::CoreTextureObject2D *) 0 ;
  bool arg2 ;
  
  arg1 = (asd::CoreTextureObject2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetTurnUL(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTextureObject2D_SetDrawingPriority(void * jarg1, int jarg2) {
  asd::CoreTextureObject2D *arg1 = (asd::CoreTextureObject2D *) 0 ;
  int arg2 ;
  
  arg1 = (asd::CoreTextureObject2D *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDrawingPriority(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTextureObject2D_SetAlphaBlendMode(void * jarg1, int jarg2) {
  asd::CoreTextureObject2D *arg1 = (asd::CoreTextureObject2D *) 0 ;
  asd::AlphaBlendMode arg2 ;
  
  arg1 = (asd::CoreTextureObject2D *)jarg1; 
  arg2 = (asd::AlphaBlendMode)jarg2; 
  (arg1)->SetAlphaBlendMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTextureObject2D_SetTextureFilterType(void * jarg1, int jarg2) {
  asd::CoreTextureObject2D *arg1 = (asd::CoreTextureObject2D *) 0 ;
  asd::TextureFilterType arg2 ;
  
  arg1 = (asd::CoreTextureObject2D *)jarg1; 
  arg2 = (asd::TextureFilterType)jarg2; 
  (arg1)->SetTextureFilterType(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreTextureObject2D_GetTextureFilterType(void * jarg1) {
  int jresult ;
  asd::CoreTextureObject2D *arg1 = (asd::CoreTextureObject2D *) 0 ;
  asd::TextureFilterType result;
  
  arg1 = (asd::CoreTextureObject2D *)jarg1; 
  result = (asd::TextureFilterType)((asd::CoreTextureObject2D const *)arg1)->GetTextureFilterType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT asd::RectI_R SWIGSTDCALL CSharp_CoreCameraObject2D_GetSrc(void * jarg1) {
  asd::RectI_R jresult ;
  asd::CoreCameraObject2D *arg1 = (asd::CoreCameraObject2D *) 0 ;
  asd::RectI result;
  
  arg1 = (asd::CoreCameraObject2D *)jarg1; 
  result = ((asd::CoreCameraObject2D const *)arg1)->GetSrc();
  {
    assert(sizeof(asd::RectI)==sizeof(asd::RectI_R)); memcpy(&jresult, &result, sizeof(asd::RectI_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreCameraObject2D_SetSrc(void * jarg1, asd::RectI_R jarg2) {
  asd::CoreCameraObject2D *arg1 = (asd::CoreCameraObject2D *) 0 ;
  asd::RectI arg2 ;
  
  arg1 = (asd::CoreCameraObject2D *)jarg1; 
  {
    assert(sizeof(asd::RectI)==sizeof(asd::RectI_R)); memcpy(&arg2, &jarg2, sizeof(asd::RectI_R)); 
  }
  (arg1)->SetSrc(arg2);
}


SWIGEXPORT asd::RectI_R SWIGSTDCALL CSharp_CoreCameraObject2D_GetDst(void * jarg1) {
  asd::RectI_R jresult ;
  asd::CoreCameraObject2D *arg1 = (asd::CoreCameraObject2D *) 0 ;
  asd::RectI result;
  
  arg1 = (asd::CoreCameraObject2D *)jarg1; 
  result = ((asd::CoreCameraObject2D const *)arg1)->GetDst();
  {
    assert(sizeof(asd::RectI)==sizeof(asd::RectI_R)); memcpy(&jresult, &result, sizeof(asd::RectI_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreCameraObject2D_SetDst(void * jarg1, asd::RectI_R jarg2) {
  asd::CoreCameraObject2D *arg1 = (asd::CoreCameraObject2D *) 0 ;
  asd::RectI arg2 ;
  
  arg1 = (asd::CoreCameraObject2D *)jarg1; 
  {
    assert(sizeof(asd::RectI)==sizeof(asd::RectI_R)); memcpy(&arg2, &jarg2, sizeof(asd::RectI_R)); 
  }
  (arg1)->SetDst(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoreCameraObject2D(void * jarg1) {
  asd::CoreCameraObject2D *arg1 = (asd::CoreCameraObject2D *) 0 ;
  
  arg1 = (asd::CoreCameraObject2D *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoreTextObject2D(void * jarg1) {
  asd::CoreTextObject2D *arg1 = (asd::CoreTextObject2D *) 0 ;
  
  arg1 = (asd::CoreTextObject2D *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreTextObject2D_GetWritingDirection(void * jarg1) {
  int jresult ;
  asd::CoreTextObject2D *arg1 = (asd::CoreTextObject2D *) 0 ;
  asd::WritingDirection result;
  
  arg1 = (asd::CoreTextObject2D *)jarg1; 
  result = (asd::WritingDirection)((asd::CoreTextObject2D const *)arg1)->GetWritingDirection();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreTextObject2D_GetFont(void * jarg1) {
  void * jresult ;
  asd::CoreTextObject2D *arg1 = (asd::CoreTextObject2D *) 0 ;
  asd::Font *result = 0 ;
  
  arg1 = (asd::CoreTextObject2D *)jarg1; 
  result = (asd::Font *)((asd::CoreTextObject2D const *)arg1)->GetFont();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT ::asd::achar * SWIGSTDCALL CSharp_CoreTextObject2D_GetText(void * jarg1) {
  ::asd::achar * jresult ;
  asd::CoreTextObject2D *arg1 = (asd::CoreTextObject2D *) 0 ;
  asd::achar *result = 0 ;
  
  arg1 = (asd::CoreTextObject2D *)jarg1; 
  result = (asd::achar *)((asd::CoreTextObject2D const *)arg1)->GetText();
  jresult = (::asd::achar *)result; 
  return jresult;
}


SWIGEXPORT asd::Vector2DF_R SWIGSTDCALL CSharp_CoreTextObject2D_GetCenterPosition(void * jarg1) {
  asd::Vector2DF_R jresult ;
  asd::CoreTextObject2D *arg1 = (asd::CoreTextObject2D *) 0 ;
  asd::Vector2DF result;
  
  arg1 = (asd::CoreTextObject2D *)jarg1; 
  result = ((asd::CoreTextObject2D const *)arg1)->GetCenterPosition();
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DF_R)); 
  }
  return jresult;
}


SWIGEXPORT asd::Color_R SWIGSTDCALL CSharp_CoreTextObject2D_GetColor(void * jarg1) {
  asd::Color_R jresult ;
  asd::CoreTextObject2D *arg1 = (asd::CoreTextObject2D *) 0 ;
  asd::Color result;
  
  arg1 = (asd::CoreTextObject2D *)jarg1; 
  result = ((asd::CoreTextObject2D const *)arg1)->GetColor();
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&jresult, &result, sizeof(asd::Color_R)); 
  }
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreTextObject2D_GetTurnLR(void * jarg1) {
  unsigned int jresult ;
  asd::CoreTextObject2D *arg1 = (asd::CoreTextObject2D *) 0 ;
  bool result;
  
  arg1 = (asd::CoreTextObject2D *)jarg1; 
  result = (bool)((asd::CoreTextObject2D const *)arg1)->GetTurnLR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreTextObject2D_GetTurnUL(void * jarg1) {
  unsigned int jresult ;
  asd::CoreTextObject2D *arg1 = (asd::CoreTextObject2D *) 0 ;
  bool result;
  
  arg1 = (asd::CoreTextObject2D *)jarg1; 
  result = (bool)((asd::CoreTextObject2D const *)arg1)->GetTurnUL();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreTextObject2D_GetDrawingPriority(void * jarg1) {
  int jresult ;
  asd::CoreTextObject2D *arg1 = (asd::CoreTextObject2D *) 0 ;
  int result;
  
  arg1 = (asd::CoreTextObject2D *)jarg1; 
  result = (int)((asd::CoreTextObject2D const *)arg1)->GetDrawingPriority();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreTextObject2D_GetAlphaBlendMode(void * jarg1) {
  int jresult ;
  asd::CoreTextObject2D *arg1 = (asd::CoreTextObject2D *) 0 ;
  asd::AlphaBlendMode result;
  
  arg1 = (asd::CoreTextObject2D *)jarg1; 
  result = (asd::AlphaBlendMode)((asd::CoreTextObject2D const *)arg1)->GetAlphaBlendMode();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTextObject2D_SetWritingDirection(void * jarg1, int jarg2) {
  asd::CoreTextObject2D *arg1 = (asd::CoreTextObject2D *) 0 ;
  asd::WritingDirection arg2 ;
  
  arg1 = (asd::CoreTextObject2D *)jarg1; 
  arg2 = (asd::WritingDirection)jarg2; 
  (arg1)->SetWritingDirection(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTextObject2D_SetFont(void * jarg1, void * jarg2) {
  asd::CoreTextObject2D *arg1 = (asd::CoreTextObject2D *) 0 ;
  asd::Font *arg2 = (asd::Font *) 0 ;
  
  arg1 = (asd::CoreTextObject2D *)jarg1; 
  arg2 = (asd::Font *)jarg2; 
  (arg1)->SetFont(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTextObject2D_SetText(void * jarg1, ::asd::achar * jarg2) {
  asd::CoreTextObject2D *arg1 = (asd::CoreTextObject2D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  
  arg1 = (asd::CoreTextObject2D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  (arg1)->SetText((asd::achar const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTextObject2D_SetCenterPosition(void * jarg1, asd::Vector2DF_R jarg2) {
  asd::CoreTextObject2D *arg1 = (asd::CoreTextObject2D *) 0 ;
  asd::Vector2DF arg2 ;
  
  arg1 = (asd::CoreTextObject2D *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  (arg1)->SetCenterPosition(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTextObject2D_SetColor(void * jarg1, asd::Color_R jarg2) {
  asd::CoreTextObject2D *arg1 = (asd::CoreTextObject2D *) 0 ;
  asd::Color arg2 ;
  
  arg1 = (asd::CoreTextObject2D *)jarg1; 
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg2, &jarg2, sizeof(asd::Color_R)); 
  }
  (arg1)->SetColor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTextObject2D_SetTurnLR(void * jarg1, unsigned int jarg2) {
  asd::CoreTextObject2D *arg1 = (asd::CoreTextObject2D *) 0 ;
  bool arg2 ;
  
  arg1 = (asd::CoreTextObject2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetTurnLR(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTextObject2D_SetTurnUL(void * jarg1, unsigned int jarg2) {
  asd::CoreTextObject2D *arg1 = (asd::CoreTextObject2D *) 0 ;
  bool arg2 ;
  
  arg1 = (asd::CoreTextObject2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetTurnUL(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTextObject2D_SetDrawingPriority(void * jarg1, int jarg2) {
  asd::CoreTextObject2D *arg1 = (asd::CoreTextObject2D *) 0 ;
  int arg2 ;
  
  arg1 = (asd::CoreTextObject2D *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDrawingPriority(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTextObject2D_SetAlphaBlendMode(void * jarg1, int jarg2) {
  asd::CoreTextObject2D *arg1 = (asd::CoreTextObject2D *) 0 ;
  asd::AlphaBlendMode arg2 ;
  
  arg1 = (asd::CoreTextObject2D *)jarg1; 
  arg2 = (asd::AlphaBlendMode)jarg2; 
  (arg1)->SetAlphaBlendMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTextObject2D_SetTextureFilterType(void * jarg1, int jarg2) {
  asd::CoreTextObject2D *arg1 = (asd::CoreTextObject2D *) 0 ;
  asd::TextureFilterType arg2 ;
  
  arg1 = (asd::CoreTextObject2D *)jarg1; 
  arg2 = (asd::TextureFilterType)jarg2; 
  (arg1)->SetTextureFilterType(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreTextObject2D_GetTextureFilterType(void * jarg1) {
  int jresult ;
  asd::CoreTextObject2D *arg1 = (asd::CoreTextObject2D *) 0 ;
  asd::TextureFilterType result;
  
  arg1 = (asd::CoreTextObject2D *)jarg1; 
  result = (asd::TextureFilterType)((asd::CoreTextObject2D const *)arg1)->GetTextureFilterType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoreEffectObject2D(void * jarg1) {
  asd::CoreEffectObject2D *arg1 = (asd::CoreEffectObject2D *) 0 ;
  
  arg1 = (asd::CoreEffectObject2D *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreEffectObject2D_SetEffect(void * jarg1, void * jarg2) {
  asd::CoreEffectObject2D *arg1 = (asd::CoreEffectObject2D *) 0 ;
  asd::Effect *arg2 = (asd::Effect *) 0 ;
  
  arg1 = (asd::CoreEffectObject2D *)jarg1; 
  arg2 = (asd::Effect *)jarg2; 
  (arg1)->SetEffect(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreEffectObject2D_Play(void * jarg1) {
  asd::CoreEffectObject2D *arg1 = (asd::CoreEffectObject2D *) 0 ;
  
  arg1 = (asd::CoreEffectObject2D *)jarg1; 
  (arg1)->Play();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreEffectObject2D_Stop(void * jarg1) {
  asd::CoreEffectObject2D *arg1 = (asd::CoreEffectObject2D *) 0 ;
  
  arg1 = (asd::CoreEffectObject2D *)jarg1; 
  (arg1)->Stop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreEffectObject2D_StopRoot(void * jarg1) {
  asd::CoreEffectObject2D *arg1 = (asd::CoreEffectObject2D *) 0 ;
  
  arg1 = (asd::CoreEffectObject2D *)jarg1; 
  (arg1)->StopRoot();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreEffectObject2D_GetIsPlaying(void * jarg1) {
  unsigned int jresult ;
  asd::CoreEffectObject2D *arg1 = (asd::CoreEffectObject2D *) 0 ;
  bool result;
  
  arg1 = (asd::CoreEffectObject2D *)jarg1; 
  result = (bool)(arg1)->GetIsPlaying();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreEffectObject2D_GetSyncEffects(void * jarg1) {
  unsigned int jresult ;
  asd::CoreEffectObject2D *arg1 = (asd::CoreEffectObject2D *) 0 ;
  bool result;
  
  arg1 = (asd::CoreEffectObject2D *)jarg1; 
  result = (bool)(arg1)->GetSyncEffects();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreEffectObject2D_SetSyncEffects(void * jarg1, unsigned int jarg2) {
  asd::CoreEffectObject2D *arg1 = (asd::CoreEffectObject2D *) 0 ;
  bool arg2 ;
  
  arg1 = (asd::CoreEffectObject2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSyncEffects(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CoreEffectObject2D_GetEffectRotation(void * jarg1) {
  float jresult ;
  asd::CoreEffectObject2D *arg1 = (asd::CoreEffectObject2D *) 0 ;
  float result;
  
  arg1 = (asd::CoreEffectObject2D *)jarg1; 
  result = (float)((asd::CoreEffectObject2D const *)arg1)->GetEffectRotation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreEffectObject2D_SetEffectRotation(void * jarg1, float jarg2) {
  asd::CoreEffectObject2D *arg1 = (asd::CoreEffectObject2D *) 0 ;
  float arg2 ;
  
  arg1 = (asd::CoreEffectObject2D *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetEffectRotation(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreEffectObject2D_GetDrawingPriority(void * jarg1) {
  int jresult ;
  asd::CoreEffectObject2D *arg1 = (asd::CoreEffectObject2D *) 0 ;
  int result;
  
  arg1 = (asd::CoreEffectObject2D *)jarg1; 
  result = (int)((asd::CoreEffectObject2D const *)arg1)->GetDrawingPriority();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreEffectObject2D_SetDrawingPriority(void * jarg1, int jarg2) {
  asd::CoreEffectObject2D *arg1 = (asd::CoreEffectObject2D *) 0 ;
  int arg2 ;
  
  arg1 = (asd::CoreEffectObject2D *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDrawingPriority(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoreMapObject2D(void * jarg1) {
  asd::CoreMapObject2D *arg1 = (asd::CoreMapObject2D *) 0 ;
  
  arg1 = (asd::CoreMapObject2D *)jarg1; 
  delete arg1;
}


SWIGEXPORT asd::Vector2DF_R SWIGSTDCALL CSharp_CoreMapObject2D_GetCenterPosition(void * jarg1) {
  asd::Vector2DF_R jresult ;
  asd::CoreMapObject2D *arg1 = (asd::CoreMapObject2D *) 0 ;
  asd::Vector2DF result;
  
  arg1 = (asd::CoreMapObject2D *)jarg1; 
  result = ((asd::CoreMapObject2D const *)arg1)->GetCenterPosition();
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DF_R)); 
  }
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreMapObject2D_GetDrawingPriority(void * jarg1) {
  int jresult ;
  asd::CoreMapObject2D *arg1 = (asd::CoreMapObject2D *) 0 ;
  int result;
  
  arg1 = (asd::CoreMapObject2D *)jarg1; 
  result = (int)((asd::CoreMapObject2D const *)arg1)->GetDrawingPriority();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreMapObject2D_SetCenterPosition(void * jarg1, asd::Vector2DF_R jarg2) {
  asd::CoreMapObject2D *arg1 = (asd::CoreMapObject2D *) 0 ;
  asd::Vector2DF arg2 ;
  
  arg1 = (asd::CoreMapObject2D *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  (arg1)->SetCenterPosition(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreMapObject2D_SetDrawingPriority(void * jarg1, int jarg2) {
  asd::CoreMapObject2D *arg1 = (asd::CoreMapObject2D *) 0 ;
  int arg2 ;
  
  arg1 = (asd::CoreMapObject2D *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDrawingPriority(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreMapObject2D_AddChip(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  asd::CoreMapObject2D *arg1 = (asd::CoreMapObject2D *) 0 ;
  asd::CoreChip2D *arg2 = (asd::CoreChip2D *) 0 ;
  bool result;
  
  arg1 = (asd::CoreMapObject2D *)jarg1; 
  arg2 = (asd::CoreChip2D *)jarg2; 
  result = (bool)(arg1)->AddChip(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreMapObject2D_RemoveChip(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  asd::CoreMapObject2D *arg1 = (asd::CoreMapObject2D *) 0 ;
  asd::CoreChip2D *arg2 = (asd::CoreChip2D *) 0 ;
  bool result;
  
  arg1 = (asd::CoreMapObject2D *)jarg1; 
  arg2 = (asd::CoreChip2D *)jarg2; 
  result = (bool)(arg1)->RemoveChip(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreMapObject2D_Clear(void * jarg1) {
  asd::CoreMapObject2D *arg1 = (asd::CoreMapObject2D *) 0 ;
  
  arg1 = (asd::CoreMapObject2D *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoreGeometryObject2D(void * jarg1) {
  asd::CoreGeometryObject2D *arg1 = (asd::CoreGeometryObject2D *) 0 ;
  
  arg1 = (asd::CoreGeometryObject2D *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreGeometryObject2D_GetShape(void * jarg1) {
  void * jresult ;
  asd::CoreGeometryObject2D *arg1 = (asd::CoreGeometryObject2D *) 0 ;
  asd::CoreShape *result = 0 ;
  
  arg1 = (asd::CoreGeometryObject2D *)jarg1; 
  result = (asd::CoreShape *)((asd::CoreGeometryObject2D const *)arg1)->GetShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreGeometryObject2D_SetShape(void * jarg1, void * jarg2) {
  asd::CoreGeometryObject2D *arg1 = (asd::CoreGeometryObject2D *) 0 ;
  asd::CoreShape *arg2 = (asd::CoreShape *) 0 ;
  
  arg1 = (asd::CoreGeometryObject2D *)jarg1; 
  arg2 = (asd::CoreShape *)jarg2; 
  (arg1)->SetShape(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreGeometryObject2D_GetDrawingPriority(void * jarg1) {
  int jresult ;
  asd::CoreGeometryObject2D *arg1 = (asd::CoreGeometryObject2D *) 0 ;
  int result;
  
  arg1 = (asd::CoreGeometryObject2D *)jarg1; 
  result = (int)((asd::CoreGeometryObject2D const *)arg1)->GetDrawingPriority();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreGeometryObject2D_SetDrawingPriority(void * jarg1, int jarg2) {
  asd::CoreGeometryObject2D *arg1 = (asd::CoreGeometryObject2D *) 0 ;
  int arg2 ;
  
  arg1 = (asd::CoreGeometryObject2D *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDrawingPriority(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreGeometryObject2D_GetAlphaBlendMode(void * jarg1) {
  int jresult ;
  asd::CoreGeometryObject2D *arg1 = (asd::CoreGeometryObject2D *) 0 ;
  asd::AlphaBlendMode result;
  
  arg1 = (asd::CoreGeometryObject2D *)jarg1; 
  result = (asd::AlphaBlendMode)((asd::CoreGeometryObject2D const *)arg1)->GetAlphaBlendMode();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreGeometryObject2D_SetAlphaBlendMode(void * jarg1, int jarg2) {
  asd::CoreGeometryObject2D *arg1 = (asd::CoreGeometryObject2D *) 0 ;
  asd::AlphaBlendMode arg2 ;
  
  arg1 = (asd::CoreGeometryObject2D *)jarg1; 
  arg2 = (asd::AlphaBlendMode)jarg2; 
  (arg1)->SetAlphaBlendMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreGeometryObject2D_SetCenterPosition(void * jarg1, asd::Vector2DF_R jarg2) {
  asd::CoreGeometryObject2D *arg1 = (asd::CoreGeometryObject2D *) 0 ;
  asd::Vector2DF arg2 ;
  
  arg1 = (asd::CoreGeometryObject2D *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  (arg1)->SetCenterPosition(arg2);
}


SWIGEXPORT asd::Vector2DF_R SWIGSTDCALL CSharp_CoreGeometryObject2D_GetCenterPosition(void * jarg1) {
  asd::Vector2DF_R jresult ;
  asd::CoreGeometryObject2D *arg1 = (asd::CoreGeometryObject2D *) 0 ;
  asd::Vector2DF result;
  
  arg1 = (asd::CoreGeometryObject2D *)jarg1; 
  result = ((asd::CoreGeometryObject2D const *)arg1)->GetCenterPosition();
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreGeometryObject2D_SetColor(void * jarg1, asd::Color_R jarg2) {
  asd::CoreGeometryObject2D *arg1 = (asd::CoreGeometryObject2D *) 0 ;
  asd::Color arg2 ;
  
  arg1 = (asd::CoreGeometryObject2D *)jarg1; 
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg2, &jarg2, sizeof(asd::Color_R)); 
  }
  (arg1)->SetColor(arg2);
}


SWIGEXPORT asd::Color_R SWIGSTDCALL CSharp_CoreGeometryObject2D_GetColor(void * jarg1) {
  asd::Color_R jresult ;
  asd::CoreGeometryObject2D *arg1 = (asd::CoreGeometryObject2D *) 0 ;
  asd::Color result;
  
  arg1 = (asd::CoreGeometryObject2D *)jarg1; 
  result = ((asd::CoreGeometryObject2D const *)arg1)->GetColor();
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&jresult, &result, sizeof(asd::Color_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreGeometryObject2D_SetTextureFilterType(void * jarg1, int jarg2) {
  asd::CoreGeometryObject2D *arg1 = (asd::CoreGeometryObject2D *) 0 ;
  asd::TextureFilterType arg2 ;
  
  arg1 = (asd::CoreGeometryObject2D *)jarg1; 
  arg2 = (asd::TextureFilterType)jarg2; 
  (arg1)->SetTextureFilterType(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreGeometryObject2D_GetTextureFilterType(void * jarg1) {
  int jresult ;
  asd::CoreGeometryObject2D *arg1 = (asd::CoreGeometryObject2D *) 0 ;
  asd::TextureFilterType result;
  
  arg1 = (asd::CoreGeometryObject2D *)jarg1; 
  result = (asd::TextureFilterType)((asd::CoreGeometryObject2D const *)arg1)->GetTextureFilterType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreGeometryObject2D_SetTexture(void * jarg1, void * jarg2) {
  asd::CoreGeometryObject2D *arg1 = (asd::CoreGeometryObject2D *) 0 ;
  asd::Texture2D *arg2 = (asd::Texture2D *) 0 ;
  
  arg1 = (asd::CoreGeometryObject2D *)jarg1; 
  arg2 = (asd::Texture2D *)jarg2; 
  (arg1)->SetTexture(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreGeometryObject2D_GetTexture(void * jarg1) {
  void * jresult ;
  asd::CoreGeometryObject2D *arg1 = (asd::CoreGeometryObject2D *) 0 ;
  asd::Texture2D *result = 0 ;
  
  arg1 = (asd::CoreGeometryObject2D *)jarg1; 
  result = (asd::Texture2D *)((asd::CoreGeometryObject2D const *)arg1)->GetTexture();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreLayer_GetDrawingPriority(void * jarg1) {
  int jresult ;
  asd::CoreLayer *arg1 = (asd::CoreLayer *) 0 ;
  int result;
  
  arg1 = (asd::CoreLayer *)jarg1; 
  result = (int)((asd::CoreLayer const *)arg1)->GetDrawingPriority();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer_SetDrawingPriority(void * jarg1, int jarg2) {
  asd::CoreLayer *arg1 = (asd::CoreLayer *) 0 ;
  int arg2 ;
  
  arg1 = (asd::CoreLayer *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDrawingPriority(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreLayer_GetIsDrawn(void * jarg1) {
  unsigned int jresult ;
  asd::CoreLayer *arg1 = (asd::CoreLayer *) 0 ;
  bool result;
  
  arg1 = (asd::CoreLayer *)jarg1; 
  result = (bool)((asd::CoreLayer const *)arg1)->GetIsDrawn();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer_SetIsDrawn(void * jarg1, unsigned int jarg2) {
  asd::CoreLayer *arg1 = (asd::CoreLayer *) 0 ;
  bool arg2 ;
  
  arg1 = (asd::CoreLayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetIsDrawn(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer_AddPostEffect(void * jarg1, void * jarg2) {
  asd::CoreLayer *arg1 = (asd::CoreLayer *) 0 ;
  asd::CorePostEffect *arg2 = (asd::CorePostEffect *) 0 ;
  
  arg1 = (asd::CoreLayer *)jarg1; 
  arg2 = (asd::CorePostEffect *)jarg2; 
  (arg1)->AddPostEffect(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer_ClearPostEffects(void * jarg1) {
  asd::CoreLayer *arg1 = (asd::CoreLayer *) 0 ;
  
  arg1 = (asd::CoreLayer *)jarg1; 
  (arg1)->ClearPostEffects();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer_BeginUpdating(void * jarg1, unsigned int jarg2) {
  asd::CoreLayer *arg1 = (asd::CoreLayer *) 0 ;
  bool arg2 ;
  
  arg1 = (asd::CoreLayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->BeginUpdating(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer_EndUpdating(void * jarg1, unsigned int jarg2) {
  asd::CoreLayer *arg1 = (asd::CoreLayer *) 0 ;
  bool arg2 ;
  
  arg1 = (asd::CoreLayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->EndUpdating(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer_BeginDrawing(void * jarg1) {
  asd::CoreLayer *arg1 = (asd::CoreLayer *) 0 ;
  
  arg1 = (asd::CoreLayer *)jarg1; 
  (arg1)->BeginDrawing();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer_Draw(void * jarg1) {
  asd::CoreLayer *arg1 = (asd::CoreLayer *) 0 ;
  
  arg1 = (asd::CoreLayer *)jarg1; 
  (arg1)->Draw();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer_EndDrawing(void * jarg1) {
  asd::CoreLayer *arg1 = (asd::CoreLayer *) 0 ;
  
  arg1 = (asd::CoreLayer *)jarg1; 
  (arg1)->EndDrawing();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer_BeginMeasureUpdateTime(void * jarg1) {
  asd::CoreLayer *arg1 = (asd::CoreLayer *) 0 ;
  
  arg1 = (asd::CoreLayer *)jarg1; 
  (arg1)->BeginMeasureUpdateTime();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer_EndMeasureUpdateTime(void * jarg1) {
  asd::CoreLayer *arg1 = (asd::CoreLayer *) 0 ;
  
  arg1 = (asd::CoreLayer *)jarg1; 
  (arg1)->EndMeasureUpdateTime();
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreLayer_GetTimeForUpdate(void * jarg1) {
  int jresult ;
  asd::CoreLayer *arg1 = (asd::CoreLayer *) 0 ;
  int result;
  
  arg1 = (asd::CoreLayer *)jarg1; 
  result = (int)((asd::CoreLayer const *)arg1)->GetTimeForUpdate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoreLayer2D(void * jarg1) {
  asd::CoreLayer2D *arg1 = (asd::CoreLayer2D *) 0 ;
  
  arg1 = (asd::CoreLayer2D *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer2D_AddObject(void * jarg1, void * jarg2) {
  asd::CoreLayer2D *arg1 = (asd::CoreLayer2D *) 0 ;
  asd::CoreLayer2D::ObjectPtr arg2 = (asd::CoreLayer2D::ObjectPtr) 0 ;
  
  arg1 = (asd::CoreLayer2D *)jarg1; 
  arg2 = (asd::CoreLayer2D::ObjectPtr)jarg2; 
  (arg1)->AddObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer2D_RemoveObject(void * jarg1, void * jarg2) {
  asd::CoreLayer2D *arg1 = (asd::CoreLayer2D *) 0 ;
  asd::CoreLayer2D::ObjectPtr arg2 = (asd::CoreLayer2D::ObjectPtr) 0 ;
  
  arg1 = (asd::CoreLayer2D *)jarg1; 
  arg2 = (asd::CoreLayer2D::ObjectPtr)jarg2; 
  (arg1)->RemoveObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer2D_Clear(void * jarg1) {
  asd::CoreLayer2D *arg1 = (asd::CoreLayer2D *) 0 ;
  
  arg1 = (asd::CoreLayer2D *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer2D_DrawSpriteAdditionally(void * jarg1, asd::Vector2DF_R jarg2, asd::Vector2DF_R jarg3, asd::Vector2DF_R jarg4, asd::Vector2DF_R jarg5, asd::Color_R jarg6, asd::Color_R jarg7, asd::Color_R jarg8, asd::Color_R jarg9, asd::Vector2DF_R jarg10, asd::Vector2DF_R jarg11, asd::Vector2DF_R jarg12, asd::Vector2DF_R jarg13, void * jarg14, int jarg15, int jarg16) {
  asd::CoreLayer2D *arg1 = (asd::CoreLayer2D *) 0 ;
  asd::Vector2DF arg2 ;
  asd::Vector2DF arg3 ;
  asd::Vector2DF arg4 ;
  asd::Vector2DF arg5 ;
  asd::Color arg6 ;
  asd::Color arg7 ;
  asd::Color arg8 ;
  asd::Color arg9 ;
  asd::Vector2DF arg10 ;
  asd::Vector2DF arg11 ;
  asd::Vector2DF arg12 ;
  asd::Vector2DF arg13 ;
  asd::Texture2D *arg14 = (asd::Texture2D *) 0 ;
  asd::AlphaBlendMode arg15 ;
  int32_t arg16 ;
  
  arg1 = (asd::CoreLayer2D *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg3, &jarg3, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg4, &jarg4, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg5, &jarg5, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg6, &jarg6, sizeof(asd::Color_R)); 
  }
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg7, &jarg7, sizeof(asd::Color_R)); 
  }
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg8, &jarg8, sizeof(asd::Color_R)); 
  }
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg9, &jarg9, sizeof(asd::Color_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg10, &jarg10, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg11, &jarg11, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg12, &jarg12, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg13, &jarg13, sizeof(asd::Vector2DF_R)); 
  }
  arg14 = (asd::Texture2D *)jarg14; 
  arg15 = (asd::AlphaBlendMode)jarg15; 
  arg16 = (int32_t)jarg16; 
  (arg1)->DrawSpriteAdditionally(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer2D_DrawTextAdditionally(void * jarg1, asd::Vector2DF_R jarg2, asd::Color_R jarg3, void * jarg4, ::asd::achar * jarg5, int jarg6, int jarg7, int jarg8) {
  asd::CoreLayer2D *arg1 = (asd::CoreLayer2D *) 0 ;
  asd::Vector2DF arg2 ;
  asd::Color arg3 ;
  asd::Font *arg4 = (asd::Font *) 0 ;
  asd::achar *arg5 = (asd::achar *) 0 ;
  asd::WritingDirection arg6 ;
  asd::AlphaBlendMode arg7 ;
  int32_t arg8 ;
  
  arg1 = (asd::CoreLayer2D *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg3, &jarg3, sizeof(asd::Color_R)); 
  }
  arg4 = (asd::Font *)jarg4; 
  arg5 = (asd::achar *)jarg5; 
  arg6 = (asd::WritingDirection)jarg6; 
  arg7 = (asd::AlphaBlendMode)jarg7; 
  arg8 = (int32_t)jarg8; 
  (arg1)->DrawTextAdditionally(arg2,arg3,arg4,(asd::achar const *)arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer2D_DrawRectangleAdditionally(void * jarg1, asd::RectF_R jarg2, asd::Color_R jarg3, asd::RectF_R jarg4, void * jarg5, int jarg6, int jarg7) {
  asd::CoreLayer2D *arg1 = (asd::CoreLayer2D *) 0 ;
  asd::RectF arg2 ;
  asd::Color arg3 ;
  asd::RectF arg4 ;
  asd::Texture2D *arg5 = (asd::Texture2D *) 0 ;
  asd::AlphaBlendMode arg6 ;
  int32_t arg7 ;
  
  arg1 = (asd::CoreLayer2D *)jarg1; 
  {
    assert(sizeof(asd::RectF)==sizeof(asd::RectF_R)); memcpy(&arg2, &jarg2, sizeof(asd::RectF_R)); 
  }
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg3, &jarg3, sizeof(asd::Color_R)); 
  }
  {
    assert(sizeof(asd::RectF)==sizeof(asd::RectF_R)); memcpy(&arg4, &jarg4, sizeof(asd::RectF_R)); 
  }
  arg5 = (asd::Texture2D *)jarg5; 
  arg6 = (asd::AlphaBlendMode)jarg6; 
  arg7 = (int32_t)jarg7; 
  (arg1)->DrawRectangleAdditionally(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer2D_DrawRotatedRectangleAdditionally(void * jarg1, asd::RectF_R jarg2, asd::Color_R jarg3, asd::Vector2DF_R jarg4, float jarg5, asd::RectF_R jarg6, void * jarg7, int jarg8, int jarg9) {
  asd::CoreLayer2D *arg1 = (asd::CoreLayer2D *) 0 ;
  asd::RectF arg2 ;
  asd::Color arg3 ;
  asd::Vector2DF arg4 ;
  float arg5 ;
  asd::RectF arg6 ;
  asd::Texture2D *arg7 = (asd::Texture2D *) 0 ;
  asd::AlphaBlendMode arg8 ;
  int32_t arg9 ;
  
  arg1 = (asd::CoreLayer2D *)jarg1; 
  {
    assert(sizeof(asd::RectF)==sizeof(asd::RectF_R)); memcpy(&arg2, &jarg2, sizeof(asd::RectF_R)); 
  }
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg3, &jarg3, sizeof(asd::Color_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg4, &jarg4, sizeof(asd::Vector2DF_R)); 
  }
  arg5 = (float)jarg5; 
  {
    assert(sizeof(asd::RectF)==sizeof(asd::RectF_R)); memcpy(&arg6, &jarg6, sizeof(asd::RectF_R)); 
  }
  arg7 = (asd::Texture2D *)jarg7; 
  arg8 = (asd::AlphaBlendMode)jarg8; 
  arg9 = (int32_t)jarg9; 
  (arg1)->DrawRotatedRectangleAdditionally(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer2D_DrawTriangleAdditionally(void * jarg1, asd::Vector2DF_R jarg2, asd::Vector2DF_R jarg3, asd::Vector2DF_R jarg4, asd::Color_R jarg5, asd::Vector2DF_R jarg6, asd::Vector2DF_R jarg7, asd::Vector2DF_R jarg8, void * jarg9, int jarg10, int jarg11) {
  asd::CoreLayer2D *arg1 = (asd::CoreLayer2D *) 0 ;
  asd::Vector2DF arg2 ;
  asd::Vector2DF arg3 ;
  asd::Vector2DF arg4 ;
  asd::Color arg5 ;
  asd::Vector2DF arg6 ;
  asd::Vector2DF arg7 ;
  asd::Vector2DF arg8 ;
  asd::Texture2D *arg9 = (asd::Texture2D *) 0 ;
  asd::AlphaBlendMode arg10 ;
  int32_t arg11 ;
  
  arg1 = (asd::CoreLayer2D *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg3, &jarg3, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg4, &jarg4, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg5, &jarg5, sizeof(asd::Color_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg6, &jarg6, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg7, &jarg7, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg8, &jarg8, sizeof(asd::Vector2DF_R)); 
  }
  arg9 = (asd::Texture2D *)jarg9; 
  arg10 = (asd::AlphaBlendMode)jarg10; 
  arg11 = (int32_t)jarg11; 
  (arg1)->DrawTriangleAdditionally(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer2D_DrawCircleAdditionally(void * jarg1, asd::Vector2DF_R jarg2, float jarg3, float jarg4, asd::Color_R jarg5, int jarg6, float jarg7, void * jarg8, int jarg9, int jarg10) {
  asd::CoreLayer2D *arg1 = (asd::CoreLayer2D *) 0 ;
  asd::Vector2DF arg2 ;
  float arg3 ;
  float arg4 ;
  asd::Color arg5 ;
  int arg6 ;
  float arg7 ;
  asd::Texture2D *arg8 = (asd::Texture2D *) 0 ;
  asd::AlphaBlendMode arg9 ;
  int32_t arg10 ;
  
  arg1 = (asd::CoreLayer2D *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg5, &jarg5, sizeof(asd::Color_R)); 
  }
  arg6 = (int)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (asd::Texture2D *)jarg8; 
  arg9 = (asd::AlphaBlendMode)jarg9; 
  arg10 = (int32_t)jarg10; 
  (arg1)->DrawCircleAdditionally(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer2D_DrawArcAdditionally(void * jarg1, asd::Vector2DF_R jarg2, float jarg3, float jarg4, asd::Color_R jarg5, int jarg6, int jarg7, int jarg8, float jarg9, void * jarg10, int jarg11, int jarg12) {
  asd::CoreLayer2D *arg1 = (asd::CoreLayer2D *) 0 ;
  asd::Vector2DF arg2 ;
  float arg3 ;
  float arg4 ;
  asd::Color arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  float arg9 ;
  asd::Texture2D *arg10 = (asd::Texture2D *) 0 ;
  asd::AlphaBlendMode arg11 ;
  int32_t arg12 ;
  
  arg1 = (asd::CoreLayer2D *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg5, &jarg5, sizeof(asd::Color_R)); 
  }
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (asd::Texture2D *)jarg10; 
  arg11 = (asd::AlphaBlendMode)jarg11; 
  arg12 = (int32_t)jarg12; 
  (arg1)->DrawArcAdditionally(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer2D_DrawLineAdditionally(void * jarg1, asd::Vector2DF_R jarg2, asd::Vector2DF_R jarg3, float jarg4, asd::Color_R jarg5, int jarg6, int jarg7) {
  asd::CoreLayer2D *arg1 = (asd::CoreLayer2D *) 0 ;
  asd::Vector2DF arg2 ;
  asd::Vector2DF arg3 ;
  float arg4 ;
  asd::Color arg5 ;
  asd::AlphaBlendMode arg6 ;
  int32_t arg7 ;
  
  arg1 = (asd::CoreLayer2D *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg3, &jarg3, sizeof(asd::Vector2DF_R)); 
  }
  arg4 = (float)jarg4; 
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg5, &jarg5, sizeof(asd::Color_R)); 
  }
  arg6 = (asd::AlphaBlendMode)jarg6; 
  arg7 = (int32_t)jarg7; 
  (arg1)->DrawLineAdditionally(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer2D_DrawShapeAdditionally(void * jarg1, void * jarg2, asd::Color_R jarg3, void * jarg4, int jarg5, int jarg6) {
  asd::CoreLayer2D *arg1 = (asd::CoreLayer2D *) 0 ;
  asd::CoreShape *arg2 = (asd::CoreShape *) 0 ;
  asd::Color arg3 ;
  asd::Texture2D *arg4 = (asd::Texture2D *) 0 ;
  asd::AlphaBlendMode arg5 ;
  int32_t arg6 ;
  
  arg1 = (asd::CoreLayer2D *)jarg1; 
  arg2 = (asd::CoreShape *)jarg2; 
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg3, &jarg3, sizeof(asd::Color_R)); 
  }
  arg4 = (asd::Texture2D *)jarg4; 
  arg5 = (asd::AlphaBlendMode)jarg5; 
  arg6 = (int32_t)jarg6; 
  (arg1)->DrawShapeAdditionally(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreObject3D_GetIsDrawn(void * jarg1) {
  unsigned int jresult ;
  asd::CoreObject3D *arg1 = (asd::CoreObject3D *) 0 ;
  bool result;
  
  arg1 = (asd::CoreObject3D *)jarg1; 
  result = (bool)((asd::CoreObject3D const *)arg1)->GetIsDrawn();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreObject3D_SetIsDrawn(void * jarg1, unsigned int jarg2) {
  asd::CoreObject3D *arg1 = (asd::CoreObject3D *) 0 ;
  bool arg2 ;
  
  arg1 = (asd::CoreObject3D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetIsDrawn(arg2);
}


SWIGEXPORT asd::Vector3DF_R SWIGSTDCALL CSharp_CoreObject3D_GetPosition(void * jarg1) {
  asd::Vector3DF_R jresult ;
  asd::CoreObject3D *arg1 = (asd::CoreObject3D *) 0 ;
  asd::Vector3DF result;
  
  arg1 = (asd::CoreObject3D *)jarg1; 
  result = ((asd::CoreObject3D const *)arg1)->GetPosition();
  {
    assert(sizeof(asd::Vector3DF)==sizeof(asd::Vector3DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector3DF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreObject3D_SetPosition(void * jarg1, asd::Vector3DF_R jarg2) {
  asd::CoreObject3D *arg1 = (asd::CoreObject3D *) 0 ;
  asd::Vector3DF arg2 ;
  
  arg1 = (asd::CoreObject3D *)jarg1; 
  {
    assert(sizeof(asd::Vector3DF)==sizeof(asd::Vector3DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector3DF_R)); 
  }
  (arg1)->SetPosition(arg2);
}


SWIGEXPORT asd::Vector3DF_R SWIGSTDCALL CSharp_CoreObject3D_GetRotation(void * jarg1) {
  asd::Vector3DF_R jresult ;
  asd::CoreObject3D *arg1 = (asd::CoreObject3D *) 0 ;
  asd::Vector3DF result;
  
  arg1 = (asd::CoreObject3D *)jarg1; 
  result = ((asd::CoreObject3D const *)arg1)->GetRotation();
  {
    assert(sizeof(asd::Vector3DF)==sizeof(asd::Vector3DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector3DF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreObject3D_SetRotation(void * jarg1, void* jarg2) {
  asd::CoreObject3D *arg1 = (asd::CoreObject3D *) 0 ;
  asd::Vector3DF *arg2 = 0 ;
  
  arg1 = (asd::CoreObject3D *)jarg1; 
  arg2 = (asd::Vector3DF*)jarg2;
  (arg1)->SetRotation((asd::Vector3DF const &)*arg2);
}


SWIGEXPORT asd::Vector3DF_R SWIGSTDCALL CSharp_CoreObject3D_GetScale(void * jarg1) {
  asd::Vector3DF_R jresult ;
  asd::CoreObject3D *arg1 = (asd::CoreObject3D *) 0 ;
  asd::Vector3DF result;
  
  arg1 = (asd::CoreObject3D *)jarg1; 
  result = ((asd::CoreObject3D const *)arg1)->GetScale();
  {
    assert(sizeof(asd::Vector3DF)==sizeof(asd::Vector3DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector3DF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreObject3D_SetScale(void * jarg1, void* jarg2) {
  asd::CoreObject3D *arg1 = (asd::CoreObject3D *) 0 ;
  asd::Vector3DF *arg2 = 0 ;
  
  arg1 = (asd::CoreObject3D *)jarg1; 
  arg2 = (asd::Vector3DF*)jarg2;
  (arg1)->SetScale((asd::Vector3DF const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreObject3D_GetObjectType(void * jarg1) {
  int jresult ;
  asd::CoreObject3D *arg1 = (asd::CoreObject3D *) 0 ;
  asd::RenderedObject3DType result;
  
  arg1 = (asd::CoreObject3D *)jarg1; 
  result = (asd::RenderedObject3DType)(arg1)->GetObjectType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreModelObject3D_SetModel(void * jarg1, void * jarg2) {
  asd::CoreModelObject3D *arg1 = (asd::CoreModelObject3D *) 0 ;
  asd::Model *arg2 = (asd::Model *) 0 ;
  
  arg1 = (asd::CoreModelObject3D *)jarg1; 
  arg2 = (asd::Model *)jarg2; 
  (arg1)->SetModel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreModelObject3D_AddMesh(void * jarg1, void * jarg2) {
  asd::CoreModelObject3D *arg1 = (asd::CoreModelObject3D *) 0 ;
  asd::Mesh *arg2 = (asd::Mesh *) 0 ;
  
  arg1 = (asd::CoreModelObject3D *)jarg1; 
  arg2 = (asd::Mesh *)jarg2; 
  (arg1)->AddMesh(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreModelObject3D_SetDeformer(void * jarg1, void * jarg2) {
  asd::CoreModelObject3D *arg1 = (asd::CoreModelObject3D *) 0 ;
  asd::Deformer *arg2 = (asd::Deformer *) 0 ;
  
  arg1 = (asd::CoreModelObject3D *)jarg1; 
  arg2 = (asd::Deformer *)jarg2; 
  (arg1)->SetDeformer(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreModelObject3D_GetAnimationClip(void * jarg1, ::asd::achar * jarg2) {
  void * jresult ;
  asd::CoreModelObject3D *arg1 = (asd::CoreModelObject3D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::AnimationClip *result = 0 ;
  
  arg1 = (asd::CoreModelObject3D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (asd::AnimationClip *)(arg1)->GetAnimationClip((asd::achar const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreModelObject3D_PlayAnimation(void * jarg1, int jarg2, ::asd::achar * jarg3) {
  asd::CoreModelObject3D *arg1 = (asd::CoreModelObject3D *) 0 ;
  int32_t arg2 ;
  asd::achar *arg3 = (asd::achar *) 0 ;
  
  arg1 = (asd::CoreModelObject3D *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (asd::achar *)jarg3; 
  (arg1)->PlayAnimation(arg2,(asd::achar const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreModelObject3D_StopAnimation(void * jarg1, int jarg2) {
  asd::CoreModelObject3D *arg1 = (asd::CoreModelObject3D *) 0 ;
  int32_t arg2 ;
  
  arg1 = (asd::CoreModelObject3D *)jarg1; 
  arg2 = (int32_t)jarg2; 
  (arg1)->StopAnimation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreModelObject3D_SetAnimationWeight(void * jarg1, int jarg2, float jarg3) {
  asd::CoreModelObject3D *arg1 = (asd::CoreModelObject3D *) 0 ;
  int32_t arg2 ;
  float arg3 ;
  
  arg1 = (asd::CoreModelObject3D *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetAnimationWeight(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreModelObject3D_CrossFadeAnimation(void * jarg1, int jarg2, ::asd::achar * jarg3, float jarg4) {
  asd::CoreModelObject3D *arg1 = (asd::CoreModelObject3D *) 0 ;
  int32_t arg2 ;
  asd::achar *arg3 = (asd::achar *) 0 ;
  float arg4 ;
  
  arg1 = (asd::CoreModelObject3D *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (asd::achar *)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->CrossFadeAnimation(arg2,(asd::achar const *)arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreModelObject3D_GetIsAnimationPlaying(void * jarg1, int jarg2) {
  unsigned int jresult ;
  asd::CoreModelObject3D *arg1 = (asd::CoreModelObject3D *) 0 ;
  int32_t arg2 ;
  bool result;
  
  arg1 = (asd::CoreModelObject3D *)jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (bool)(arg1)->GetIsAnimationPlaying(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreModelObject3D_SetMaterialPropertyBlock(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  asd::CoreModelObject3D *arg1 = (asd::CoreModelObject3D *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  asd::MaterialPropertyBlock *arg4 = (asd::MaterialPropertyBlock *) 0 ;
  
  arg1 = (asd::CoreModelObject3D *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (asd::MaterialPropertyBlock *)jarg4; 
  (arg1)->SetMaterialPropertyBlock(arg2,arg3,arg4);
}


SWIGEXPORT asd::Color_R SWIGSTDCALL CSharp_CoreDirectionalLightObject3D_GetColor(void * jarg1) {
  asd::Color_R jresult ;
  asd::CoreDirectionalLightObject3D *arg1 = (asd::CoreDirectionalLightObject3D *) 0 ;
  asd::Color result;
  
  arg1 = (asd::CoreDirectionalLightObject3D *)jarg1; 
  result = (arg1)->GetColor();
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&jresult, &result, sizeof(asd::Color_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreDirectionalLightObject3D_SetColor(void * jarg1, void* jarg2) {
  asd::CoreDirectionalLightObject3D *arg1 = (asd::CoreDirectionalLightObject3D *) 0 ;
  asd::Color *arg2 = 0 ;
  
  arg1 = (asd::CoreDirectionalLightObject3D *)jarg1; 
  arg2 = (asd::Color*)jarg2;
  (arg1)->SetColor((asd::Color const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CoreDirectionalLightObject3D_GetIntensity(void * jarg1) {
  float jresult ;
  asd::CoreDirectionalLightObject3D *arg1 = (asd::CoreDirectionalLightObject3D *) 0 ;
  float result;
  
  arg1 = (asd::CoreDirectionalLightObject3D *)jarg1; 
  result = (float)(arg1)->GetIntensity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreDirectionalLightObject3D_SetIntensity(void * jarg1, float jarg2) {
  asd::CoreDirectionalLightObject3D *arg1 = (asd::CoreDirectionalLightObject3D *) 0 ;
  float arg2 ;
  
  arg1 = (asd::CoreDirectionalLightObject3D *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetIntensity(arg2);
}


SWIGEXPORT asd::Vector2DI_R SWIGSTDCALL CSharp_CoreCameraObject3D_GetWindowSize(void * jarg1) {
  asd::Vector2DI_R jresult ;
  asd::CoreCameraObject3D *arg1 = (asd::CoreCameraObject3D *) 0 ;
  asd::Vector2DI result;
  
  arg1 = (asd::CoreCameraObject3D *)jarg1; 
  result = ((asd::CoreCameraObject3D const *)arg1)->GetWindowSize();
  {
    assert(sizeof(asd::Vector2DI)==sizeof(asd::Vector2DI_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DI_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreCameraObject3D_SetWindowSize(void * jarg1, void* jarg2) {
  asd::CoreCameraObject3D *arg1 = (asd::CoreCameraObject3D *) 0 ;
  asd::Vector2DI *arg2 = 0 ;
  
  arg1 = (asd::CoreCameraObject3D *)jarg1; 
  arg2 = (asd::Vector2DI*)jarg2;
  (arg1)->SetWindowSize((asd::Vector2DI const &)*arg2);
}


SWIGEXPORT asd::Vector3DF_R SWIGSTDCALL CSharp_CoreCameraObject3D_GetFocus(void * jarg1) {
  asd::Vector3DF_R jresult ;
  asd::CoreCameraObject3D *arg1 = (asd::CoreCameraObject3D *) 0 ;
  asd::Vector3DF result;
  
  arg1 = (asd::CoreCameraObject3D *)jarg1; 
  result = (arg1)->GetFocus();
  {
    assert(sizeof(asd::Vector3DF)==sizeof(asd::Vector3DF_R)); memcpy(&jresult, &result, sizeof(asd::Vector3DF_R)); 
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreCameraObject3D_SetFocus(void * jarg1, void* jarg2) {
  asd::CoreCameraObject3D *arg1 = (asd::CoreCameraObject3D *) 0 ;
  asd::Vector3DF *arg2 = 0 ;
  
  arg1 = (asd::CoreCameraObject3D *)jarg1; 
  arg2 = (asd::Vector3DF*)jarg2;
  (arg1)->SetFocus((asd::Vector3DF const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CoreCameraObject3D_GetFieldOfView(void * jarg1) {
  float jresult ;
  asd::CoreCameraObject3D *arg1 = (asd::CoreCameraObject3D *) 0 ;
  float result;
  
  arg1 = (asd::CoreCameraObject3D *)jarg1; 
  result = (float)(arg1)->GetFieldOfView();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreCameraObject3D_SetFieldOfView(void * jarg1, float jarg2) {
  asd::CoreCameraObject3D *arg1 = (asd::CoreCameraObject3D *) 0 ;
  float arg2 ;
  
  arg1 = (asd::CoreCameraObject3D *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetFieldOfView(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CoreCameraObject3D_GetZFar(void * jarg1) {
  float jresult ;
  asd::CoreCameraObject3D *arg1 = (asd::CoreCameraObject3D *) 0 ;
  float result;
  
  arg1 = (asd::CoreCameraObject3D *)jarg1; 
  result = (float)(arg1)->GetZFar();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreCameraObject3D_SetZFar(void * jarg1, float jarg2) {
  asd::CoreCameraObject3D *arg1 = (asd::CoreCameraObject3D *) 0 ;
  float arg2 ;
  
  arg1 = (asd::CoreCameraObject3D *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetZFar(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CoreCameraObject3D_GetZNear(void * jarg1) {
  float jresult ;
  asd::CoreCameraObject3D *arg1 = (asd::CoreCameraObject3D *) 0 ;
  float result;
  
  arg1 = (asd::CoreCameraObject3D *)jarg1; 
  result = (float)(arg1)->GetZNear();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreCameraObject3D_SetZNear(void * jarg1, float jarg2) {
  asd::CoreCameraObject3D *arg1 = (asd::CoreCameraObject3D *) 0 ;
  float arg2 ;
  
  arg1 = (asd::CoreCameraObject3D *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetZNear(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreCameraObject3D_GetHDRMode(void * jarg1) {
  unsigned int jresult ;
  asd::CoreCameraObject3D *arg1 = (asd::CoreCameraObject3D *) 0 ;
  bool result;
  
  arg1 = (asd::CoreCameraObject3D *)jarg1; 
  result = (bool)((asd::CoreCameraObject3D const *)arg1)->GetHDRMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreCameraObject3D_SetHDRMode(void * jarg1, unsigned int jarg2) {
  asd::CoreCameraObject3D *arg1 = (asd::CoreCameraObject3D *) 0 ;
  bool arg2 ;
  
  arg1 = (asd::CoreCameraObject3D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetHDRMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreCameraObject3D_BeginPostEffect(void * jarg1, void * jarg2) {
  asd::CoreCameraObject3D *arg1 = (asd::CoreCameraObject3D *) 0 ;
  asd::CorePostEffect *arg2 = (asd::CorePostEffect *) 0 ;
  
  arg1 = (asd::CoreCameraObject3D *)jarg1; 
  arg2 = (asd::CorePostEffect *)jarg2; 
  (arg1)->BeginPostEffect(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreCameraObject3D_EndPostEffect(void * jarg1, void * jarg2) {
  asd::CoreCameraObject3D *arg1 = (asd::CoreCameraObject3D *) 0 ;
  asd::CorePostEffect *arg2 = (asd::CorePostEffect *) 0 ;
  
  arg1 = (asd::CoreCameraObject3D *)jarg1; 
  arg2 = (asd::CorePostEffect *)jarg2; 
  (arg1)->EndPostEffect(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreCameraObject3D_StartAddingPostEffect(void * jarg1, int jarg2) {
  asd::CoreCameraObject3D *arg1 = (asd::CoreCameraObject3D *) 0 ;
  int arg2 ;
  
  arg1 = (asd::CoreCameraObject3D *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->StartAddingPostEffect(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreCameraObject3D_GetDstForPostEffect(void * jarg1, int jarg2) {
  void * jresult ;
  asd::CoreCameraObject3D *arg1 = (asd::CoreCameraObject3D *) 0 ;
  int arg2 ;
  asd::RenderTexture2D *result = 0 ;
  
  arg1 = (asd::CoreCameraObject3D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (asd::RenderTexture2D *)(arg1)->GetDstForPostEffect(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreCameraObject3D_GetSrcForPostEffect(void * jarg1, int jarg2) {
  void * jresult ;
  asd::CoreCameraObject3D *arg1 = (asd::CoreCameraObject3D *) 0 ;
  int arg2 ;
  asd::RenderTexture2D *result = 0 ;
  
  arg1 = (asd::CoreCameraObject3D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (asd::RenderTexture2D *)(arg1)->GetSrcForPostEffect(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreEffectObject3D_SetEffect(void * jarg1, void * jarg2) {
  asd::CoreEffectObject3D *arg1 = (asd::CoreEffectObject3D *) 0 ;
  asd::Effect *arg2 = (asd::Effect *) 0 ;
  
  arg1 = (asd::CoreEffectObject3D *)jarg1; 
  arg2 = (asd::Effect *)jarg2; 
  (arg1)->SetEffect(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreEffectObject3D_Play(void * jarg1) {
  asd::CoreEffectObject3D *arg1 = (asd::CoreEffectObject3D *) 0 ;
  
  arg1 = (asd::CoreEffectObject3D *)jarg1; 
  (arg1)->Play();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreEffectObject3D_Stop(void * jarg1) {
  asd::CoreEffectObject3D *arg1 = (asd::CoreEffectObject3D *) 0 ;
  
  arg1 = (asd::CoreEffectObject3D *)jarg1; 
  (arg1)->Stop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreEffectObject3D_StopRoot(void * jarg1) {
  asd::CoreEffectObject3D *arg1 = (asd::CoreEffectObject3D *) 0 ;
  
  arg1 = (asd::CoreEffectObject3D *)jarg1; 
  (arg1)->StopRoot();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreEffectObject3D_GetIsPlaying(void * jarg1) {
  unsigned int jresult ;
  asd::CoreEffectObject3D *arg1 = (asd::CoreEffectObject3D *) 0 ;
  bool result;
  
  arg1 = (asd::CoreEffectObject3D *)jarg1; 
  result = (bool)(arg1)->GetIsPlaying();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreEffectObject3D_GetSyncEffects(void * jarg1) {
  unsigned int jresult ;
  asd::CoreEffectObject3D *arg1 = (asd::CoreEffectObject3D *) 0 ;
  bool result;
  
  arg1 = (asd::CoreEffectObject3D *)jarg1; 
  result = (bool)(arg1)->GetSyncEffects();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreEffectObject3D_SetSyncEffects(void * jarg1, unsigned int jarg2) {
  asd::CoreEffectObject3D *arg1 = (asd::CoreEffectObject3D *) 0 ;
  bool arg2 ;
  
  arg1 = (asd::CoreEffectObject3D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSyncEffects(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreMassModelObject3D_SetMaterialPropertyBlock(void * jarg1, void * jarg2) {
  asd::CoreMassModelObject3D *arg1 = (asd::CoreMassModelObject3D *) 0 ;
  asd::MaterialPropertyBlock *arg2 = (asd::MaterialPropertyBlock *) 0 ;
  
  arg1 = (asd::CoreMassModelObject3D *)jarg1; 
  arg2 = (asd::MaterialPropertyBlock *)jarg2; 
  (arg1)->SetMaterialPropertyBlock(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreMassModelObject3D_SetModel(void * jarg1, void * jarg2) {
  asd::CoreMassModelObject3D *arg1 = (asd::CoreMassModelObject3D *) 0 ;
  asd::MassModel *arg2 = (asd::MassModel *) 0 ;
  
  arg1 = (asd::CoreMassModelObject3D *)jarg1; 
  arg2 = (asd::MassModel *)jarg2; 
  (arg1)->SetModel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreMassModelObject3D_PlayAnimation(void * jarg1, ::asd::achar * jarg2) {
  asd::CoreMassModelObject3D *arg1 = (asd::CoreMassModelObject3D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  
  arg1 = (asd::CoreMassModelObject3D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  (arg1)->PlayAnimation((asd::achar const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreMassModelObject3D_StopAnimation(void * jarg1) {
  asd::CoreMassModelObject3D *arg1 = (asd::CoreMassModelObject3D *) 0 ;
  
  arg1 = (asd::CoreMassModelObject3D *)jarg1; 
  (arg1)->StopAnimation();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreMassModelObject3D_CrossFadeAnimation(void * jarg1, ::asd::achar * jarg2, float jarg3) {
  asd::CoreMassModelObject3D *arg1 = (asd::CoreMassModelObject3D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  float arg3 ;
  
  arg1 = (asd::CoreMassModelObject3D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->CrossFadeAnimation((asd::achar const *)arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreMassModelObject3D_GetIsAnimationPlaying(void * jarg1) {
  unsigned int jresult ;
  asd::CoreMassModelObject3D *arg1 = (asd::CoreMassModelObject3D *) 0 ;
  bool result;
  
  arg1 = (asd::CoreMassModelObject3D *)jarg1; 
  result = (bool)(arg1)->GetIsAnimationPlaying();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTerrainObject3D_SetMaterialPropertyBlock(void * jarg1, void * jarg2) {
  asd::CoreTerrainObject3D *arg1 = (asd::CoreTerrainObject3D *) 0 ;
  asd::MaterialPropertyBlock *arg2 = (asd::MaterialPropertyBlock *) 0 ;
  
  arg1 = (asd::CoreTerrainObject3D *)jarg1; 
  arg2 = (asd::MaterialPropertyBlock *)jarg2; 
  (arg1)->SetMaterialPropertyBlock(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTerrainObject3D_SetTerrain(void * jarg1, void * jarg2) {
  asd::CoreTerrainObject3D *arg1 = (asd::CoreTerrainObject3D *) 0 ;
  asd::Terrain3D *arg2 = (asd::Terrain3D *) 0 ;
  
  arg1 = (asd::CoreTerrainObject3D *)jarg1; 
  arg2 = (asd::Terrain3D *)jarg2; 
  (arg1)->SetTerrain(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreLayer3D_GetRenderSettings(void * jarg1) {
  void * jresult ;
  asd::CoreLayer3D *arg1 = (asd::CoreLayer3D *) 0 ;
  asd::RenderSettings result;
  
  arg1 = (asd::CoreLayer3D *)jarg1; 
  result = ((asd::CoreLayer3D const *)arg1)->GetRenderSettings();
  jresult = new asd::RenderSettings((const asd::RenderSettings &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer3D_SetRenderSettings(void * jarg1, void * jarg2) {
  asd::CoreLayer3D *arg1 = (asd::CoreLayer3D *) 0 ;
  asd::RenderSettings arg2 ;
  asd::RenderSettings *argp2 ;
  
  arg1 = (asd::CoreLayer3D *)jarg1; 
  argp2 = (asd::RenderSettings *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null asd::RenderSettings", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetRenderSettings(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer3D_AddObject(void * jarg1, void * jarg2) {
  asd::CoreLayer3D *arg1 = (asd::CoreLayer3D *) 0 ;
  asd::CoreLayer3D::ObjectPtr arg2 = (asd::CoreLayer3D::ObjectPtr) 0 ;
  
  arg1 = (asd::CoreLayer3D *)jarg1; 
  arg2 = (asd::CoreLayer3D::ObjectPtr)jarg2; 
  (arg1)->AddObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer3D_RemoveObject(void * jarg1, void * jarg2) {
  asd::CoreLayer3D *arg1 = (asd::CoreLayer3D *) 0 ;
  asd::CoreLayer3D::ObjectPtr arg2 = (asd::CoreLayer3D::ObjectPtr) 0 ;
  
  arg1 = (asd::CoreLayer3D *)jarg1; 
  arg2 = (asd::CoreLayer3D::ObjectPtr)jarg2; 
  (arg1)->RemoveObject(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CoreLayer3D_GetAmbientColorIntensity(void * jarg1) {
  float jresult ;
  asd::CoreLayer3D *arg1 = (asd::CoreLayer3D *) 0 ;
  float result;
  
  arg1 = (asd::CoreLayer3D *)jarg1; 
  result = (float)(arg1)->GetAmbientColorIntensity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer3D_SetAmbientColorIntensity(void * jarg1, float jarg2) {
  asd::CoreLayer3D *arg1 = (asd::CoreLayer3D *) 0 ;
  float arg2 ;
  
  arg1 = (asd::CoreLayer3D *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetAmbientColorIntensity(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer3D_SetSkyAmbientColor(void * jarg1, asd::Color_R jarg2) {
  asd::CoreLayer3D *arg1 = (asd::CoreLayer3D *) 0 ;
  asd::Color arg2 ;
  
  arg1 = (asd::CoreLayer3D *)jarg1; 
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg2, &jarg2, sizeof(asd::Color_R)); 
  }
  (arg1)->SetSkyAmbientColor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer3D_SetGroundAmbientColor(void * jarg1, asd::Color_R jarg2) {
  asd::CoreLayer3D *arg1 = (asd::CoreLayer3D *) 0 ;
  asd::Color arg2 ;
  
  arg1 = (asd::CoreLayer3D *)jarg1; 
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg2, &jarg2, sizeof(asd::Color_R)); 
  }
  (arg1)->SetGroundAmbientColor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer3D_SetEnvironmentColorIntensity(void * jarg1, float jarg2, float jarg3) {
  asd::CoreLayer3D *arg1 = (asd::CoreLayer3D *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (asd::CoreLayer3D *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetEnvironmentColorIntensity(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer3D_SetEnvironmentColor(void * jarg1, void * jarg2, void * jarg3) {
  asd::CoreLayer3D *arg1 = (asd::CoreLayer3D *) 0 ;
  asd::CubemapTexture *arg2 = (asd::CubemapTexture *) 0 ;
  asd::CubemapTexture *arg3 = (asd::CubemapTexture *) 0 ;
  
  arg1 = (asd::CoreLayer3D *)jarg1; 
  arg2 = (asd::CubemapTexture *)jarg2; 
  arg3 = (asd::CubemapTexture *)jarg3; 
  (arg1)->SetEnvironmentColor(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CoreLayer3D_GetSSAO_Radius(void * jarg1) {
  float jresult ;
  asd::CoreLayer3D *arg1 = (asd::CoreLayer3D *) 0 ;
  float result;
  
  arg1 = (asd::CoreLayer3D *)jarg1; 
  result = (float)(arg1)->GetSSAO_Radius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer3D_SetSSAO_Radius(void * jarg1, float jarg2) {
  asd::CoreLayer3D *arg1 = (asd::CoreLayer3D *) 0 ;
  float arg2 ;
  
  arg1 = (asd::CoreLayer3D *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetSSAO_Radius(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CoreLayer3D_GetSSAO_Bias(void * jarg1) {
  float jresult ;
  asd::CoreLayer3D *arg1 = (asd::CoreLayer3D *) 0 ;
  float result;
  
  arg1 = (asd::CoreLayer3D *)jarg1; 
  result = (float)(arg1)->GetSSAO_Bias();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer3D_SetSSAO_Bias(void * jarg1, float jarg2) {
  asd::CoreLayer3D *arg1 = (asd::CoreLayer3D *) 0 ;
  float arg2 ;
  
  arg1 = (asd::CoreLayer3D *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetSSAO_Bias(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CoreLayer3D_GetSSAO_Intensity(void * jarg1) {
  float jresult ;
  asd::CoreLayer3D *arg1 = (asd::CoreLayer3D *) 0 ;
  float result;
  
  arg1 = (asd::CoreLayer3D *)jarg1; 
  result = (float)(arg1)->GetSSAO_Intensity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer3D_SetSSAO_Intensity(void * jarg1, float jarg2) {
  asd::CoreLayer3D *arg1 = (asd::CoreLayer3D *) 0 ;
  float arg2 ;
  
  arg1 = (asd::CoreLayer3D *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetSSAO_Intensity(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CoreLayer3D_GetSSAO_FarPlain(void * jarg1) {
  float jresult ;
  asd::CoreLayer3D *arg1 = (asd::CoreLayer3D *) 0 ;
  float result;
  
  arg1 = (asd::CoreLayer3D *)jarg1; 
  result = (float)(arg1)->GetSSAO_FarPlain();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer3D_SetSSAO_FarPlain(void * jarg1, float jarg2) {
  asd::CoreLayer3D *arg1 = (asd::CoreLayer3D *) 0 ;
  float arg2 ;
  
  arg1 = (asd::CoreLayer3D *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetSSAO_FarPlain(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreLayer3D_DrawSpriteAdditionally(void * jarg1, asd::Vector3DF_R jarg2, asd::Vector3DF_R jarg3, asd::Vector3DF_R jarg4, asd::Vector3DF_R jarg5, asd::Color_R jarg6, asd::Color_R jarg7, asd::Color_R jarg8, asd::Color_R jarg9, asd::Vector2DF_R jarg10, asd::Vector2DF_R jarg11, asd::Vector2DF_R jarg12, asd::Vector2DF_R jarg13, void * jarg14, int jarg15, unsigned int jarg16, unsigned int jarg17) {
  asd::CoreLayer3D *arg1 = (asd::CoreLayer3D *) 0 ;
  asd::Vector3DF arg2 ;
  asd::Vector3DF arg3 ;
  asd::Vector3DF arg4 ;
  asd::Vector3DF arg5 ;
  asd::Color arg6 ;
  asd::Color arg7 ;
  asd::Color arg8 ;
  asd::Color arg9 ;
  asd::Vector2DF arg10 ;
  asd::Vector2DF arg11 ;
  asd::Vector2DF arg12 ;
  asd::Vector2DF arg13 ;
  asd::Texture2D *arg14 = (asd::Texture2D *) 0 ;
  asd::AlphaBlendMode arg15 ;
  bool arg16 ;
  bool arg17 ;
  
  arg1 = (asd::CoreLayer3D *)jarg1; 
  {
    assert(sizeof(asd::Vector3DF)==sizeof(asd::Vector3DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector3DF_R)); 
  }
  {
    assert(sizeof(asd::Vector3DF)==sizeof(asd::Vector3DF_R)); memcpy(&arg3, &jarg3, sizeof(asd::Vector3DF_R)); 
  }
  {
    assert(sizeof(asd::Vector3DF)==sizeof(asd::Vector3DF_R)); memcpy(&arg4, &jarg4, sizeof(asd::Vector3DF_R)); 
  }
  {
    assert(sizeof(asd::Vector3DF)==sizeof(asd::Vector3DF_R)); memcpy(&arg5, &jarg5, sizeof(asd::Vector3DF_R)); 
  }
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg6, &jarg6, sizeof(asd::Color_R)); 
  }
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg7, &jarg7, sizeof(asd::Color_R)); 
  }
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg8, &jarg8, sizeof(asd::Color_R)); 
  }
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg9, &jarg9, sizeof(asd::Color_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg10, &jarg10, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg11, &jarg11, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg12, &jarg12, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg13, &jarg13, sizeof(asd::Vector2DF_R)); 
  }
  arg14 = (asd::Texture2D *)jarg14; 
  arg15 = (asd::AlphaBlendMode)jarg15; 
  arg16 = jarg16 ? true : false; 
  arg17 = jarg17 ? true : false; 
  (arg1)->DrawSpriteAdditionally(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreScene_GetHDRMode(void * jarg1) {
  unsigned int jresult ;
  asd::CoreScene *arg1 = (asd::CoreScene *) 0 ;
  bool result;
  
  arg1 = (asd::CoreScene *)jarg1; 
  result = (bool)((asd::CoreScene const *)arg1)->GetHDRMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreScene_SetHDRMode(void * jarg1, unsigned int jarg2) {
  asd::CoreScene *arg1 = (asd::CoreScene *) 0 ;
  bool arg2 ;
  
  arg1 = (asd::CoreScene *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetHDRMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreScene_AddLayer(void * jarg1, void * jarg2) {
  asd::CoreScene *arg1 = (asd::CoreScene *) 0 ;
  asd::CoreScene::LayerPtr arg2 = (asd::CoreScene::LayerPtr) 0 ;
  
  arg1 = (asd::CoreScene *)jarg1; 
  arg2 = (asd::CoreScene::LayerPtr)jarg2; 
  (arg1)->AddLayer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreScene_RemoveLayer(void * jarg1, void * jarg2) {
  asd::CoreScene *arg1 = (asd::CoreScene *) 0 ;
  asd::CoreScene::LayerPtr arg2 = (asd::CoreScene::LayerPtr) 0 ;
  
  arg1 = (asd::CoreScene *)jarg1; 
  arg2 = (asd::CoreScene::LayerPtr)jarg2; 
  (arg1)->RemoveLayer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreScene_SetRenderTargetForDrawingLayer(void * jarg1) {
  asd::CoreScene *arg1 = (asd::CoreScene *) 0 ;
  
  arg1 = (asd::CoreScene *)jarg1; 
  (arg1)->SetRenderTargetForDrawingLayer();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreScene_GetBaseTarget(void * jarg1) {
  void * jresult ;
  asd::CoreScene *arg1 = (asd::CoreScene *) 0 ;
  asd::RenderTexture2D *result = 0 ;
  
  arg1 = (asd::CoreScene *)jarg1; 
  result = (asd::RenderTexture2D *)(arg1)->GetBaseTarget();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreScene_BeginPostEffect(void * jarg1, void * jarg2) {
  asd::CoreScene *arg1 = (asd::CoreScene *) 0 ;
  asd::CorePostEffect *arg2 = (asd::CorePostEffect *) 0 ;
  
  arg1 = (asd::CoreScene *)jarg1; 
  arg2 = (asd::CorePostEffect *)jarg2; 
  (arg1)->BeginPostEffect(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreScene_EndPostEffect(void * jarg1, void * jarg2) {
  asd::CoreScene *arg1 = (asd::CoreScene *) 0 ;
  asd::CorePostEffect *arg2 = (asd::CorePostEffect *) 0 ;
  
  arg1 = (asd::CoreScene *)jarg1; 
  arg2 = (asd::CorePostEffect *)jarg2; 
  (arg1)->EndPostEffect(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreScene_GetSrcTarget(void * jarg1) {
  void * jresult ;
  asd::CoreScene *arg1 = (asd::CoreScene *) 0 ;
  asd::RenderTexture2D *result = 0 ;
  
  arg1 = (asd::CoreScene *)jarg1; 
  result = (asd::RenderTexture2D *)(arg1)->GetSrcTarget();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreScene_GetDstTarget(void * jarg1) {
  void * jresult ;
  asd::CoreScene *arg1 = (asd::CoreScene *) 0 ;
  asd::RenderTexture2D *result = 0 ;
  
  arg1 = (asd::CoreScene *)jarg1; 
  result = (asd::RenderTexture2D *)(arg1)->GetDstTarget();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreScene_BeginDrawing(void * jarg1) {
  asd::CoreScene *arg1 = (asd::CoreScene *) 0 ;
  
  arg1 = (asd::CoreScene *)jarg1; 
  (arg1)->BeginDrawing();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreScene_EndDrawing(void * jarg1) {
  asd::CoreScene *arg1 = (asd::CoreScene *) 0 ;
  
  arg1 = (asd::CoreScene *)jarg1; 
  (arg1)->EndDrawing();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CorePostEffect_DrawOnTexture2DWithMaterial(void * jarg1, void * jarg2, void * jarg3) {
  asd::CorePostEffect *arg1 = (asd::CorePostEffect *) 0 ;
  asd::RenderTexture2D *arg2 = (asd::RenderTexture2D *) 0 ;
  asd::Material2D *arg3 = (asd::Material2D *) 0 ;
  
  arg1 = (asd::CorePostEffect *)jarg1; 
  arg2 = (asd::RenderTexture2D *)jarg2; 
  arg3 = (asd::Material2D *)jarg3; 
  (arg1)->DrawOnTexture2DWithMaterial(arg2,arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CorePostEffect_GetGrayScaleShader(void * jarg1, int jarg2) {
  char * jresult ;
  asd::CorePostEffect *arg1 = (asd::CorePostEffect *) 0 ;
  asd::GraphicsDeviceType arg2 ;
  char *result = 0 ;
  
  arg1 = (asd::CorePostEffect *)jarg1; 
  arg2 = (asd::GraphicsDeviceType)jarg2; 
  result = (char *)((asd::CorePostEffect const *)arg1)->GetGrayScaleShader(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CorePostEffect_GetLightBloomShader(void * jarg1, int jarg2) {
  char * jresult ;
  asd::CorePostEffect *arg1 = (asd::CorePostEffect *) 0 ;
  asd::GraphicsDeviceType arg2 ;
  char *result = 0 ;
  
  arg1 = (asd::CorePostEffect *)jarg1; 
  arg2 = (asd::GraphicsDeviceType)jarg2; 
  result = (char *)((asd::CorePostEffect const *)arg1)->GetLightBloomShader(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CorePostEffect_GetSepiaShader(void * jarg1, int jarg2) {
  char * jresult ;
  asd::CorePostEffect *arg1 = (asd::CorePostEffect *) 0 ;
  asd::GraphicsDeviceType arg2 ;
  char *result = 0 ;
  
  arg1 = (asd::CorePostEffect *)jarg1; 
  arg2 = (asd::GraphicsDeviceType)jarg2; 
  result = (char *)((asd::CorePostEffect const *)arg1)->GetSepiaShader(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CorePostEffect_GetGaussianBlurShader(void * jarg1, int jarg2) {
  char * jresult ;
  asd::CorePostEffect *arg1 = (asd::CorePostEffect *) 0 ;
  asd::GraphicsDeviceType arg2 ;
  char *result = 0 ;
  
  arg1 = (asd::CorePostEffect *)jarg1; 
  arg2 = (asd::GraphicsDeviceType)jarg2; 
  result = (char *)((asd::CorePostEffect const *)arg1)->GetGaussianBlurShader(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CorePostEffect_GetDownsampleShader(void * jarg1, int jarg2) {
  char * jresult ;
  asd::CorePostEffect *arg1 = (asd::CorePostEffect *) 0 ;
  asd::GraphicsDeviceType arg2 ;
  char *result = 0 ;
  
  arg1 = (asd::CorePostEffect *)jarg1; 
  arg2 = (asd::GraphicsDeviceType)jarg2; 
  result = (char *)((asd::CorePostEffect const *)arg1)->GetDownsampleShader(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ObjectSystemFactory(void * jarg1) {
  asd::ObjectSystemFactory *arg1 = (asd::ObjectSystemFactory *) 0 ;
  
  arg1 = (asd::ObjectSystemFactory *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectSystemFactory_CreateChip2D(void * jarg1) {
  void * jresult ;
  asd::ObjectSystemFactory *arg1 = (asd::ObjectSystemFactory *) 0 ;
  asd::CoreChip2D *result = 0 ;
  
  arg1 = (asd::ObjectSystemFactory *)jarg1; 
  result = (asd::CoreChip2D *)(arg1)->CreateChip2D();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectSystemFactory_CreateTextureObject2D(void * jarg1) {
  void * jresult ;
  asd::ObjectSystemFactory *arg1 = (asd::ObjectSystemFactory *) 0 ;
  asd::CoreTextureObject2D *result = 0 ;
  
  arg1 = (asd::ObjectSystemFactory *)jarg1; 
  result = (asd::CoreTextureObject2D *)(arg1)->CreateTextureObject2D();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectSystemFactory_CreateCameraObject2D(void * jarg1) {
  void * jresult ;
  asd::ObjectSystemFactory *arg1 = (asd::ObjectSystemFactory *) 0 ;
  asd::CoreCameraObject2D *result = 0 ;
  
  arg1 = (asd::ObjectSystemFactory *)jarg1; 
  result = (asd::CoreCameraObject2D *)(arg1)->CreateCameraObject2D();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectSystemFactory_CreateTextObject2D(void * jarg1) {
  void * jresult ;
  asd::ObjectSystemFactory *arg1 = (asd::ObjectSystemFactory *) 0 ;
  asd::CoreTextObject2D *result = 0 ;
  
  arg1 = (asd::ObjectSystemFactory *)jarg1; 
  result = (asd::CoreTextObject2D *)(arg1)->CreateTextObject2D();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectSystemFactory_CreateEffectObject2D(void * jarg1) {
  void * jresult ;
  asd::ObjectSystemFactory *arg1 = (asd::ObjectSystemFactory *) 0 ;
  asd::CoreEffectObject2D *result = 0 ;
  
  arg1 = (asd::ObjectSystemFactory *)jarg1; 
  result = (asd::CoreEffectObject2D *)(arg1)->CreateEffectObject2D();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectSystemFactory_CreateMapObject2D(void * jarg1) {
  void * jresult ;
  asd::ObjectSystemFactory *arg1 = (asd::ObjectSystemFactory *) 0 ;
  asd::CoreMapObject2D *result = 0 ;
  
  arg1 = (asd::ObjectSystemFactory *)jarg1; 
  result = (asd::CoreMapObject2D *)(arg1)->CreateMapObject2D();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectSystemFactory_CreateGeometryObject2D(void * jarg1) {
  void * jresult ;
  asd::ObjectSystemFactory *arg1 = (asd::ObjectSystemFactory *) 0 ;
  asd::CoreGeometryObject2D *result = 0 ;
  
  arg1 = (asd::ObjectSystemFactory *)jarg1; 
  result = (asd::CoreGeometryObject2D *)(arg1)->CreateGeometryObject2D();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectSystemFactory_CreateLayer2D(void * jarg1) {
  void * jresult ;
  asd::ObjectSystemFactory *arg1 = (asd::ObjectSystemFactory *) 0 ;
  asd::CoreLayer2D *result = 0 ;
  
  arg1 = (asd::ObjectSystemFactory *)jarg1; 
  result = (asd::CoreLayer2D *)(arg1)->CreateLayer2D();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectSystemFactory_CreateEffectObject3D(void * jarg1) {
  void * jresult ;
  asd::ObjectSystemFactory *arg1 = (asd::ObjectSystemFactory *) 0 ;
  asd::CoreEffectObject3D *result = 0 ;
  
  arg1 = (asd::ObjectSystemFactory *)jarg1; 
  result = (asd::CoreEffectObject3D *)(arg1)->CreateEffectObject3D();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectSystemFactory_CreateModelObject3D(void * jarg1) {
  void * jresult ;
  asd::ObjectSystemFactory *arg1 = (asd::ObjectSystemFactory *) 0 ;
  asd::CoreModelObject3D *result = 0 ;
  
  arg1 = (asd::ObjectSystemFactory *)jarg1; 
  result = (asd::CoreModelObject3D *)(arg1)->CreateModelObject3D();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectSystemFactory_CreateCameraObject3D(void * jarg1) {
  void * jresult ;
  asd::ObjectSystemFactory *arg1 = (asd::ObjectSystemFactory *) 0 ;
  asd::CoreCameraObject3D *result = 0 ;
  
  arg1 = (asd::ObjectSystemFactory *)jarg1; 
  result = (asd::CoreCameraObject3D *)(arg1)->CreateCameraObject3D();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectSystemFactory_CreateDirectionalLightObject3D(void * jarg1) {
  void * jresult ;
  asd::ObjectSystemFactory *arg1 = (asd::ObjectSystemFactory *) 0 ;
  asd::CoreDirectionalLightObject3D *result = 0 ;
  
  arg1 = (asd::ObjectSystemFactory *)jarg1; 
  result = (asd::CoreDirectionalLightObject3D *)(arg1)->CreateDirectionalLightObject3D();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectSystemFactory_CreateCoreMassModelObject3D(void * jarg1) {
  void * jresult ;
  asd::ObjectSystemFactory *arg1 = (asd::ObjectSystemFactory *) 0 ;
  asd::CoreMassModelObject3D *result = 0 ;
  
  arg1 = (asd::ObjectSystemFactory *)jarg1; 
  result = (asd::CoreMassModelObject3D *)(arg1)->CreateCoreMassModelObject3D();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectSystemFactory_CreateCoreTerrainObject3D(void * jarg1) {
  void * jresult ;
  asd::ObjectSystemFactory *arg1 = (asd::ObjectSystemFactory *) 0 ;
  asd::CoreTerrainObject3D *result = 0 ;
  
  arg1 = (asd::ObjectSystemFactory *)jarg1; 
  result = (asd::CoreTerrainObject3D *)(arg1)->CreateCoreTerrainObject3D();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectSystemFactory_CreateLayer3D(void * jarg1, void * jarg2) {
  void * jresult ;
  asd::ObjectSystemFactory *arg1 = (asd::ObjectSystemFactory *) 0 ;
  asd::RenderSettings arg2 ;
  asd::RenderSettings *argp2 ;
  asd::CoreLayer3D *result = 0 ;
  
  arg1 = (asd::ObjectSystemFactory *)jarg1; 
  argp2 = (asd::RenderSettings *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null asd::RenderSettings", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (asd::CoreLayer3D *)(arg1)->CreateLayer3D(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectSystemFactory_CreateScene(void * jarg1) {
  void * jresult ;
  asd::ObjectSystemFactory *arg1 = (asd::ObjectSystemFactory *) 0 ;
  asd::CoreScene *result = 0 ;
  
  arg1 = (asd::ObjectSystemFactory *)jarg1; 
  result = (asd::CoreScene *)(arg1)->CreateScene();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectSystemFactory_CreatePostEffect(void * jarg1) {
  void * jresult ;
  asd::ObjectSystemFactory *arg1 = (asd::ObjectSystemFactory *) 0 ;
  asd::CorePostEffect *result = 0 ;
  
  arg1 = (asd::ObjectSystemFactory *)jarg1; 
  result = (asd::CorePostEffect *)(arg1)->CreatePostEffect();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectSystemFactory_CreateTransition(void * jarg1) {
  void * jresult ;
  asd::ObjectSystemFactory *arg1 = (asd::ObjectSystemFactory *) 0 ;
  asd::CoreTransition *result = 0 ;
  
  arg1 = (asd::ObjectSystemFactory *)jarg1; 
  result = (asd::CoreTransition *)(arg1)->CreateTransition();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectSystemFactory_CreateArcShape(void * jarg1) {
  void * jresult ;
  asd::ObjectSystemFactory *arg1 = (asd::ObjectSystemFactory *) 0 ;
  asd::CoreArcShape *result = 0 ;
  
  arg1 = (asd::ObjectSystemFactory *)jarg1; 
  result = (asd::CoreArcShape *)(arg1)->CreateArcShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectSystemFactory_CreateCircleShape(void * jarg1) {
  void * jresult ;
  asd::ObjectSystemFactory *arg1 = (asd::ObjectSystemFactory *) 0 ;
  asd::CoreCircleShape *result = 0 ;
  
  arg1 = (asd::ObjectSystemFactory *)jarg1; 
  result = (asd::CoreCircleShape *)(arg1)->CreateCircleShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectSystemFactory_CreateLineShape(void * jarg1) {
  void * jresult ;
  asd::ObjectSystemFactory *arg1 = (asd::ObjectSystemFactory *) 0 ;
  asd::CoreLineShape *result = 0 ;
  
  arg1 = (asd::ObjectSystemFactory *)jarg1; 
  result = (asd::CoreLineShape *)(arg1)->CreateLineShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectSystemFactory_CreateRectangleShape(void * jarg1) {
  void * jresult ;
  asd::ObjectSystemFactory *arg1 = (asd::ObjectSystemFactory *) 0 ;
  asd::CoreRectangleShape *result = 0 ;
  
  arg1 = (asd::ObjectSystemFactory *)jarg1; 
  result = (asd::CoreRectangleShape *)(arg1)->CreateRectangleShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectSystemFactory_CreateTriangleShape(void * jarg1) {
  void * jresult ;
  asd::ObjectSystemFactory *arg1 = (asd::ObjectSystemFactory *) 0 ;
  asd::CoreTriangleShape *result = 0 ;
  
  arg1 = (asd::ObjectSystemFactory *)jarg1; 
  result = (asd::CoreTriangleShape *)(arg1)->CreateTriangleShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectSystemFactory_CreatePolygonShape(void * jarg1) {
  void * jresult ;
  asd::ObjectSystemFactory *arg1 = (asd::ObjectSystemFactory *) 0 ;
  asd::CorePolygonShape *result = 0 ;
  
  arg1 = (asd::ObjectSystemFactory *)jarg1; 
  result = (asd::CorePolygonShape *)(arg1)->CreatePolygonShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoreTransition(void * jarg1) {
  asd::CoreTransition *arg1 = (asd::CoreTransition *) 0 ;
  
  arg1 = (asd::CoreTransition *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreTransition_GetIsSceneChanged(void * jarg1) {
  unsigned int jresult ;
  asd::CoreTransition *arg1 = (asd::CoreTransition *) 0 ;
  bool result;
  
  arg1 = (asd::CoreTransition *)jarg1; 
  result = (bool)((asd::CoreTransition const *)arg1)->GetIsSceneChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTransition_ChangeScene(void * jarg1) {
  asd::CoreTransition *arg1 = (asd::CoreTransition *) 0 ;
  
  arg1 = (asd::CoreTransition *)jarg1; 
  (arg1)->ChangeScene();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreTransition_GetIsFinished(void * jarg1) {
  unsigned int jresult ;
  asd::CoreTransition *arg1 = (asd::CoreTransition *) 0 ;
  bool result;
  
  arg1 = (asd::CoreTransition *)jarg1; 
  result = (bool)((asd::CoreTransition const *)arg1)->GetIsFinished();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTransition_Finish(void * jarg1) {
  asd::CoreTransition *arg1 = (asd::CoreTransition *) 0 ;
  
  arg1 = (asd::CoreTransition *)jarg1; 
  (arg1)->Finish();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTransition_DrawTriangleWithNextScene(void * jarg1, asd::Vector2DF_R jarg2, asd::Vector2DF_R jarg3, asd::Vector2DF_R jarg4, asd::Color_R jarg5, asd::Color_R jarg6, asd::Color_R jarg7, asd::Vector2DF_R jarg8, asd::Vector2DF_R jarg9, asd::Vector2DF_R jarg10) {
  asd::CoreTransition *arg1 = (asd::CoreTransition *) 0 ;
  asd::Vector2DF arg2 ;
  asd::Vector2DF arg3 ;
  asd::Vector2DF arg4 ;
  asd::Color arg5 ;
  asd::Color arg6 ;
  asd::Color arg7 ;
  asd::Vector2DF arg8 ;
  asd::Vector2DF arg9 ;
  asd::Vector2DF arg10 ;
  
  arg1 = (asd::CoreTransition *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg3, &jarg3, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg4, &jarg4, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg5, &jarg5, sizeof(asd::Color_R)); 
  }
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg6, &jarg6, sizeof(asd::Color_R)); 
  }
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg7, &jarg7, sizeof(asd::Color_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg8, &jarg8, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg9, &jarg9, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg10, &jarg10, sizeof(asd::Vector2DF_R)); 
  }
  (arg1)->DrawTriangleWithNextScene(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTransition_DrawRectangleWithNextScene(void * jarg1, asd::Vector2DF_R jarg2, asd::Vector2DF_R jarg3, asd::Vector2DF_R jarg4, asd::Vector2DF_R jarg5, asd::Color_R jarg6, asd::Color_R jarg7, asd::Color_R jarg8, asd::Color_R jarg9, asd::Vector2DF_R jarg10, asd::Vector2DF_R jarg11, asd::Vector2DF_R jarg12, asd::Vector2DF_R jarg13) {
  asd::CoreTransition *arg1 = (asd::CoreTransition *) 0 ;
  asd::Vector2DF arg2 ;
  asd::Vector2DF arg3 ;
  asd::Vector2DF arg4 ;
  asd::Vector2DF arg5 ;
  asd::Color arg6 ;
  asd::Color arg7 ;
  asd::Color arg8 ;
  asd::Color arg9 ;
  asd::Vector2DF arg10 ;
  asd::Vector2DF arg11 ;
  asd::Vector2DF arg12 ;
  asd::Vector2DF arg13 ;
  
  arg1 = (asd::CoreTransition *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg3, &jarg3, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg4, &jarg4, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg5, &jarg5, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg6, &jarg6, sizeof(asd::Color_R)); 
  }
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg7, &jarg7, sizeof(asd::Color_R)); 
  }
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg8, &jarg8, sizeof(asd::Color_R)); 
  }
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg9, &jarg9, sizeof(asd::Color_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg10, &jarg10, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg11, &jarg11, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg12, &jarg12, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg13, &jarg13, sizeof(asd::Vector2DF_R)); 
  }
  (arg1)->DrawRectangleWithNextScene(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTransition_DrawTriangleWithPreviousScene(void * jarg1, asd::Vector2DF_R jarg2, asd::Vector2DF_R jarg3, asd::Vector2DF_R jarg4, asd::Color_R jarg5, asd::Color_R jarg6, asd::Color_R jarg7, asd::Vector2DF_R jarg8, asd::Vector2DF_R jarg9, asd::Vector2DF_R jarg10) {
  asd::CoreTransition *arg1 = (asd::CoreTransition *) 0 ;
  asd::Vector2DF arg2 ;
  asd::Vector2DF arg3 ;
  asd::Vector2DF arg4 ;
  asd::Color arg5 ;
  asd::Color arg6 ;
  asd::Color arg7 ;
  asd::Vector2DF arg8 ;
  asd::Vector2DF arg9 ;
  asd::Vector2DF arg10 ;
  
  arg1 = (asd::CoreTransition *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg3, &jarg3, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg4, &jarg4, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg5, &jarg5, sizeof(asd::Color_R)); 
  }
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg6, &jarg6, sizeof(asd::Color_R)); 
  }
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg7, &jarg7, sizeof(asd::Color_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg8, &jarg8, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg9, &jarg9, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg10, &jarg10, sizeof(asd::Vector2DF_R)); 
  }
  (arg1)->DrawTriangleWithPreviousScene(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreTransition_DrawRectangleWithPreviousScene(void * jarg1, asd::Vector2DF_R jarg2, asd::Vector2DF_R jarg3, asd::Vector2DF_R jarg4, asd::Vector2DF_R jarg5, asd::Color_R jarg6, asd::Color_R jarg7, asd::Color_R jarg8, asd::Color_R jarg9, asd::Vector2DF_R jarg10, asd::Vector2DF_R jarg11, asd::Vector2DF_R jarg12, asd::Vector2DF_R jarg13) {
  asd::CoreTransition *arg1 = (asd::CoreTransition *) 0 ;
  asd::Vector2DF arg2 ;
  asd::Vector2DF arg3 ;
  asd::Vector2DF arg4 ;
  asd::Vector2DF arg5 ;
  asd::Color arg6 ;
  asd::Color arg7 ;
  asd::Color arg8 ;
  asd::Color arg9 ;
  asd::Vector2DF arg10 ;
  asd::Vector2DF arg11 ;
  asd::Vector2DF arg12 ;
  asd::Vector2DF arg13 ;
  
  arg1 = (asd::CoreTransition *)jarg1; 
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg2, &jarg2, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg3, &jarg3, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg4, &jarg4, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg5, &jarg5, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg6, &jarg6, sizeof(asd::Color_R)); 
  }
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg7, &jarg7, sizeof(asd::Color_R)); 
  }
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg8, &jarg8, sizeof(asd::Color_R)); 
  }
  {
    assert(sizeof(asd::Color)==sizeof(asd::Color_R)); memcpy(&arg9, &jarg9, sizeof(asd::Color_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg10, &jarg10, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg11, &jarg11, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg12, &jarg12, sizeof(asd::Vector2DF_R)); 
  }
  {
    assert(sizeof(asd::Vector2DF)==sizeof(asd::Vector2DF_R)); memcpy(&arg13, &jarg13, sizeof(asd::Vector2DF_R)); 
  }
  (arg1)->DrawRectangleWithPreviousScene(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreOption_IsFullScreen_set(void * jarg1, unsigned int jarg2) {
  asd::CoreOption *arg1 = (asd::CoreOption *) 0 ;
  bool arg2 ;
  
  arg1 = (asd::CoreOption *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsFullScreen = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreOption_IsFullScreen_get(void * jarg1) {
  unsigned int jresult ;
  asd::CoreOption *arg1 = (asd::CoreOption *) 0 ;
  bool result;
  
  arg1 = (asd::CoreOption *)jarg1; 
  result = (bool) ((arg1)->IsFullScreen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreOption_GraphicsDevice_set(void * jarg1, int jarg2) {
  asd::CoreOption *arg1 = (asd::CoreOption *) 0 ;
  asd::GraphicsDeviceType arg2 ;
  
  arg1 = (asd::CoreOption *)jarg1; 
  arg2 = (asd::GraphicsDeviceType)jarg2; 
  if (arg1) (arg1)->GraphicsDevice = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreOption_GraphicsDevice_get(void * jarg1) {
  int jresult ;
  asd::CoreOption *arg1 = (asd::CoreOption *) 0 ;
  asd::GraphicsDeviceType result;
  
  arg1 = (asd::CoreOption *)jarg1; 
  result = (asd::GraphicsDeviceType) ((arg1)->GraphicsDevice);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreOption_IsReloadingEnabled_set(void * jarg1, unsigned int jarg2) {
  asd::CoreOption *arg1 = (asd::CoreOption *) 0 ;
  bool arg2 ;
  
  arg1 = (asd::CoreOption *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsReloadingEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoreOption_IsReloadingEnabled_get(void * jarg1) {
  unsigned int jresult ;
  asd::CoreOption *arg1 = (asd::CoreOption *) 0 ;
  bool result;
  
  arg1 = (asd::CoreOption *)jarg1; 
  result = (bool) ((arg1)->IsReloadingEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CoreOption() {
  void * jresult ;
  asd::CoreOption *result = 0 ;
  
  result = (asd::CoreOption *)new asd::CoreOption();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoreOption(void * jarg1) {
  asd::CoreOption *arg1 = (asd::CoreOption *) 0 ;
  
  arg1 = (asd::CoreOption *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Core_Initialize(void * jarg1, ::asd::achar * jarg2, int jarg3, int jarg4, void * jarg5) {
  unsigned int jresult ;
  asd::Core *arg1 = (asd::Core *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  int32_t arg3 ;
  int32_t arg4 ;
  asd::CoreOption arg5 ;
  asd::CoreOption *argp5 ;
  bool result;
  
  arg1 = (asd::Core *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  argp5 = (asd::CoreOption *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null asd::CoreOption", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)(arg1)->Initialize((asd::achar const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Core_InitializeByExternalWindow(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, void * jarg6) {
  unsigned int jresult ;
  asd::Core *arg1 = (asd::Core *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  int32_t arg4 ;
  int32_t arg5 ;
  asd::CoreOption arg6 ;
  asd::CoreOption *argp6 ;
  bool result;
  
  arg1 = (asd::Core *)jarg1; 
  {
    arg2 = jarg2; 
  }
  {
    arg3 = jarg3; 
  }
  arg4 = (int32_t)jarg4; 
  arg5 = (int32_t)jarg5; 
  argp6 = (asd::CoreOption *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null asd::CoreOption", 0);
    return 0;
  }
  arg6 = *argp6; 
  result = (bool)(arg1)->InitializeByExternalWindow(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Core_DoEvents(void * jarg1) {
  unsigned int jresult ;
  asd::Core *arg1 = (asd::Core *) 0 ;
  bool result;
  
  arg1 = (asd::Core *)jarg1; 
  result = (bool)(arg1)->DoEvents();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_Update(void * jarg1) {
  asd::Core *arg1 = (asd::Core *) 0 ;
  
  arg1 = (asd::Core *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_Terminate(void * jarg1) {
  asd::Core *arg1 = (asd::Core *) 0 ;
  
  arg1 = (asd::Core *)jarg1; 
  (arg1)->Terminate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_Reload(void * jarg1) {
  asd::Core *arg1 = (asd::Core *) 0 ;
  
  arg1 = (asd::Core *)jarg1; 
  (arg1)->Reload();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_BeginDrawing(void * jarg1) {
  asd::Core *arg1 = (asd::Core *) 0 ;
  
  arg1 = (asd::Core *)jarg1; 
  (arg1)->BeginDrawing();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_EndDrawing(void * jarg1) {
  asd::Core *arg1 = (asd::Core *) 0 ;
  
  arg1 = (asd::Core *)jarg1; 
  (arg1)->EndDrawing();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_DrawSceneToWindow(void * jarg1, void * jarg2) {
  asd::Core *arg1 = (asd::Core *) 0 ;
  asd::CoreScene *arg2 = (asd::CoreScene *) 0 ;
  
  arg1 = (asd::Core *)jarg1; 
  arg2 = (asd::CoreScene *)jarg2; 
  (arg1)->DrawSceneToWindow(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_DrawSceneToWindowWithTransition(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  asd::Core *arg1 = (asd::Core *) 0 ;
  asd::CoreScene *arg2 = (asd::CoreScene *) 0 ;
  asd::CoreScene *arg3 = (asd::CoreScene *) 0 ;
  asd::CoreTransition *arg4 = (asd::CoreTransition *) 0 ;
  
  arg1 = (asd::Core *)jarg1; 
  arg2 = (asd::CoreScene *)jarg2; 
  arg3 = (asd::CoreScene *)jarg3; 
  arg4 = (asd::CoreTransition *)jarg4; 
  (arg1)->DrawSceneToWindowWithTransition(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_Draw(void * jarg1) {
  asd::Core *arg1 = (asd::Core *) 0 ;
  
  arg1 = (asd::Core *)jarg1; 
  (arg1)->Draw();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_ChangeScene(void * jarg1, void * jarg2) {
  asd::Core *arg1 = (asd::Core *) 0 ;
  asd::CoreScene *arg2 = (asd::CoreScene *) 0 ;
  
  arg1 = (asd::Core *)jarg1; 
  arg2 = (asd::CoreScene *)jarg2; 
  (arg1)->ChangeScene(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_Close(void * jarg1) {
  asd::Core *arg1 = (asd::Core *) 0 ;
  
  arg1 = (asd::Core *)jarg1; 
  (arg1)->Close();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_TakeScreenshot(void * jarg1, ::asd::achar * jarg2) {
  asd::Core *arg1 = (asd::Core *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  
  arg1 = (asd::Core *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  (arg1)->TakeScreenshot((asd::achar const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_CaptureScreenAsGifAnimation(void * jarg1, ::asd::achar * jarg2, int jarg3, float jarg4, float jarg5) {
  asd::Core *arg1 = (asd::Core *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  int32_t arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (asd::Core *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->CaptureScreenAsGifAnimation((asd::achar const *)arg2,arg3,arg4,arg5);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Core_GetDeltaTime(void * jarg1) {
  float jresult ;
  asd::Core *arg1 = (asd::Core *) 0 ;
  float result;
  
  arg1 = (asd::Core *)jarg1; 
  result = (float)((asd::Core const *)arg1)->GetDeltaTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_SetDeltaTime(void * jarg1, float jarg2) {
  asd::Core *arg1 = (asd::Core *) 0 ;
  float arg2 ;
  
  arg1 = (asd::Core *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetDeltaTime(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Core_GetCurrentFPS(void * jarg1) {
  float jresult ;
  asd::Core *arg1 = (asd::Core *) 0 ;
  float result;
  
  arg1 = (asd::Core *)jarg1; 
  result = (float)(arg1)->GetCurrentFPS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Core_GetTargetFPS(void * jarg1) {
  int jresult ;
  asd::Core *arg1 = (asd::Core *) 0 ;
  int32_t result;
  
  arg1 = (asd::Core *)jarg1; 
  result = (int32_t)(arg1)->GetTargetFPS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_SetTargetFPS(void * jarg1, int jarg2) {
  asd::Core *arg1 = (asd::Core *) 0 ;
  int32_t arg2 ;
  
  arg1 = (asd::Core *)jarg1; 
  arg2 = (int32_t)jarg2; 
  (arg1)->SetTargetFPS(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Core_GetTimeSpan(void * jarg1) {
  float jresult ;
  asd::Core *arg1 = (asd::Core *) 0 ;
  float result;
  
  arg1 = (asd::Core *)jarg1; 
  result = (float)((asd::Core const *)arg1)->GetTimeSpan();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_SetTimeSpan(void * jarg1, float jarg2) {
  asd::Core *arg1 = (asd::Core *) 0 ;
  float arg2 ;
  
  arg1 = (asd::Core *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetTimeSpan(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Core_GetFramerateMode(void * jarg1) {
  int jresult ;
  asd::Core *arg1 = (asd::Core *) 0 ;
  asd::FramerateMode result;
  
  arg1 = (asd::Core *)jarg1; 
  result = (asd::FramerateMode)((asd::Core const *)arg1)->GetFramerateMode();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_SetFramerateMode(void * jarg1, int jarg2) {
  asd::Core *arg1 = (asd::Core *) 0 ;
  asd::FramerateMode arg2 ;
  
  arg1 = (asd::Core *)jarg1; 
  arg2 = (asd::FramerateMode)jarg2; 
  (arg1)->SetFramerateMode(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Core_GetWindowHandle(void * jarg1) {
  void * jresult ;
  asd::Core *arg1 = (asd::Core *) 0 ;
  void *result = 0 ;
  
  arg1 = (asd::Core *)jarg1; 
  result = (void *)((asd::Core const *)arg1)->GetWindowHandle();
  {
    jresult = result; 
  }
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Core_GetKeyboard(void * jarg1) {
  void * jresult ;
  asd::Core *arg1 = (asd::Core *) 0 ;
  asd::Keyboard *result = 0 ;
  
  arg1 = (asd::Core *)jarg1; 
  result = (asd::Keyboard *)(arg1)->GetKeyboard();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Core_GetMouse(void * jarg1) {
  void * jresult ;
  asd::Core *arg1 = (asd::Core *) 0 ;
  asd::Mouse *result = 0 ;
  
  arg1 = (asd::Core *)jarg1; 
  result = (asd::Mouse *)(arg1)->GetMouse();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Core_GetJoystickContainer(void * jarg1) {
  void * jresult ;
  asd::Core *arg1 = (asd::Core *) 0 ;
  asd::JoystickContainer *result = 0 ;
  
  arg1 = (asd::Core *)jarg1; 
  result = (asd::JoystickContainer *)(arg1)->GetJoystickContainer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Core_GetFile(void * jarg1) {
  void * jresult ;
  asd::Core *arg1 = (asd::Core *) 0 ;
  asd::File *result = 0 ;
  
  arg1 = (asd::Core *)jarg1; 
  result = (asd::File *)(arg1)->GetFile();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Core_GetLogger(void * jarg1) {
  void * jresult ;
  asd::Core *arg1 = (asd::Core *) 0 ;
  asd::Log *result = 0 ;
  
  arg1 = (asd::Core *)jarg1; 
  result = (asd::Log *)(arg1)->GetLogger();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Core_GetProfiler(void * jarg1) {
  void * jresult ;
  asd::Core *arg1 = (asd::Core *) 0 ;
  asd::Profiler *result = 0 ;
  
  arg1 = (asd::Core *)jarg1; 
  result = (asd::Profiler *)(arg1)->GetProfiler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Core_GetLayerProfiler(void * jarg1) {
  void * jresult ;
  asd::Core *arg1 = (asd::Core *) 0 ;
  asd::LayerProfiler *result = 0 ;
  
  arg1 = (asd::Core *)jarg1; 
  result = (asd::LayerProfiler *)(arg1)->GetLayerProfiler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Core_GetGraphics(void * jarg1) {
  void * jresult ;
  asd::Core *arg1 = (asd::Core *) 0 ;
  asd::Graphics *result = 0 ;
  
  arg1 = (asd::Core *)jarg1; 
  result = (asd::Graphics *)(arg1)->GetGraphics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Core_GetSound(void * jarg1) {
  void * jresult ;
  asd::Core *arg1 = (asd::Core *) 0 ;
  asd::Sound *result = 0 ;
  
  arg1 = (asd::Core *)jarg1; 
  result = (asd::Sound *)(arg1)->GetSound();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Core_GetObjectSystemFactory(void * jarg1) {
  void * jresult ;
  asd::Core *arg1 = (asd::Core *) 0 ;
  asd::ObjectSystemFactory *result = 0 ;
  
  arg1 = (asd::Core *)jarg1; 
  result = (asd::ObjectSystemFactory *)(arg1)->GetObjectSystemFactory();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Core_GetAnimationSyatem(void * jarg1) {
  void * jresult ;
  asd::Core *arg1 = (asd::Core *) 0 ;
  asd::AnimationSystem *result = 0 ;
  
  arg1 = (asd::Core *)jarg1; 
  result = (asd::AnimationSystem *)(arg1)->GetAnimationSyatem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT asd::Vector2DI_R SWIGSTDCALL CSharp_Core_GetWindowSize(void * jarg1) {
  asd::Vector2DI_R jresult ;
  asd::Core *arg1 = (asd::Core *) 0 ;
  asd::Vector2DI result;
  
  arg1 = (asd::Core *)jarg1; 
  result = (arg1)->GetWindowSize();
  {
    assert(sizeof(asd::Vector2DI)==sizeof(asd::Vector2DI_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DI_R)); 
  }
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Core_GetProfilerVisibility(void * jarg1) {
  unsigned int jresult ;
  asd::Core *arg1 = (asd::Core *) 0 ;
  bool result;
  
  arg1 = (asd::Core *)jarg1; 
  result = (bool)((asd::Core const *)arg1)->GetProfilerVisibility();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_SetProfilerVisibility(void * jarg1, unsigned int jarg2) {
  asd::Core *arg1 = (asd::Core *) 0 ;
  bool arg2 ;
  
  arg1 = (asd::Core *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetProfilerVisibility(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Core(void * jarg1) {
  asd::Core *arg1 = (asd::Core *) 0 ;
  
  arg1 = (asd::Core *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Core_Imp_CreateCore() {
  void * jresult ;
  asd::Core_Imp *result = 0 ;
  
  result = (asd::Core_Imp *)asd::Core_Imp::CreateCore();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Core_Imp_Initialize(void * jarg1, ::asd::achar * jarg2, int jarg3, int jarg4, void * jarg5) {
  unsigned int jresult ;
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  int32_t arg3 ;
  int32_t arg4 ;
  asd::CoreOption arg5 ;
  asd::CoreOption *argp5 ;
  bool result;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  argp5 = (asd::CoreOption *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null asd::CoreOption", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)(arg1)->Initialize((asd::achar const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Core_Imp_InitializeByExternalWindow(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, void * jarg6) {
  unsigned int jresult ;
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  int32_t arg4 ;
  int32_t arg5 ;
  asd::CoreOption arg6 ;
  asd::CoreOption *argp6 ;
  bool result;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  {
    arg2 = jarg2; 
  }
  {
    arg3 = jarg3; 
  }
  arg4 = (int32_t)jarg4; 
  arg5 = (int32_t)jarg5; 
  argp6 = (asd::CoreOption *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null asd::CoreOption", 0);
    return 0;
  }
  arg6 = *argp6; 
  result = (bool)(arg1)->InitializeByExternalWindow(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Core_Imp_DoEvents(void * jarg1) {
  unsigned int jresult ;
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  bool result;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  result = (bool)(arg1)->DoEvents();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_Imp_Update(void * jarg1) {
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_Imp_Terminate(void * jarg1) {
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  (arg1)->Terminate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_Imp_Reload(void * jarg1) {
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  (arg1)->Reload();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_Imp_BeginDrawing(void * jarg1) {
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  (arg1)->BeginDrawing();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_Imp_EndDrawing(void * jarg1) {
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  (arg1)->EndDrawing();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_Imp_DrawSceneToWindow(void * jarg1, void * jarg2) {
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  asd::CoreScene *arg2 = (asd::CoreScene *) 0 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  arg2 = (asd::CoreScene *)jarg2; 
  (arg1)->DrawSceneToWindow(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_Imp_DrawSceneToWindowWithTransition(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  asd::CoreScene *arg2 = (asd::CoreScene *) 0 ;
  asd::CoreScene *arg3 = (asd::CoreScene *) 0 ;
  asd::CoreTransition *arg4 = (asd::CoreTransition *) 0 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  arg2 = (asd::CoreScene *)jarg2; 
  arg3 = (asd::CoreScene *)jarg3; 
  arg4 = (asd::CoreTransition *)jarg4; 
  (arg1)->DrawSceneToWindowWithTransition(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_Imp_Draw(void * jarg1) {
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  (arg1)->Draw();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_Imp_ChangeScene(void * jarg1, void * jarg2) {
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  asd::CoreScene *arg2 = (asd::CoreScene *) 0 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  arg2 = (asd::CoreScene *)jarg2; 
  (arg1)->ChangeScene(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_Imp_Close(void * jarg1) {
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  (arg1)->Close();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_Imp_TakeScreenshot(void * jarg1, ::asd::achar * jarg2) {
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  (arg1)->TakeScreenshot((asd::achar const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_Imp_CaptureScreenAsGifAnimation(void * jarg1, ::asd::achar * jarg2, int jarg3, float jarg4, float jarg5) {
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  int32_t arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->CaptureScreenAsGifAnimation((asd::achar const *)arg2,arg3,arg4,arg5);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Core_Imp_GetDeltaTime(void * jarg1) {
  float jresult ;
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  float result;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  result = (float)((asd::Core_Imp const *)arg1)->GetDeltaTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_Imp_SetDeltaTime(void * jarg1, float jarg2) {
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  float arg2 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetDeltaTime(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Core_Imp_GetCurrentFPS(void * jarg1) {
  float jresult ;
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  float result;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  result = (float)(arg1)->GetCurrentFPS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Core_Imp_GetTargetFPS(void * jarg1) {
  int jresult ;
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  int32_t result;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  result = (int32_t)(arg1)->GetTargetFPS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_Imp_SetTargetFPS(void * jarg1, int jarg2) {
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  int32_t arg2 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  arg2 = (int32_t)jarg2; 
  (arg1)->SetTargetFPS(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Core_Imp_GetTimeSpan(void * jarg1) {
  float jresult ;
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  float result;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  result = (float)((asd::Core_Imp const *)arg1)->GetTimeSpan();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_Imp_SetTimeSpan(void * jarg1, float jarg2) {
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  float arg2 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetTimeSpan(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Core_Imp_GetFramerateMode(void * jarg1) {
  int jresult ;
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  asd::FramerateMode result;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  result = (asd::FramerateMode)((asd::Core_Imp const *)arg1)->GetFramerateMode();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_Imp_SetFramerateMode(void * jarg1, int jarg2) {
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  asd::FramerateMode arg2 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  arg2 = (asd::FramerateMode)jarg2; 
  (arg1)->SetFramerateMode(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Core_Imp_GetWindowHandle(void * jarg1) {
  void * jresult ;
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  void *result = 0 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  result = (void *)((asd::Core_Imp const *)arg1)->GetWindowHandle();
  {
    jresult = result; 
  }
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Core_Imp_GetWindow(void * jarg1) {
  void * jresult ;
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  asd::Window_Imp *result = 0 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  result = (asd::Window_Imp *)(arg1)->GetWindow();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Core_Imp_GetKeyboard(void * jarg1) {
  void * jresult ;
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  asd::Keyboard *result = 0 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  result = (asd::Keyboard *)(arg1)->GetKeyboard();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Core_Imp_GetMouse(void * jarg1) {
  void * jresult ;
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  asd::Mouse *result = 0 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  result = (asd::Mouse *)(arg1)->GetMouse();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Core_Imp_GetJoystickContainer(void * jarg1) {
  void * jresult ;
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  asd::JoystickContainer *result = 0 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  result = (asd::JoystickContainer *)(arg1)->GetJoystickContainer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Core_Imp_GetFile(void * jarg1) {
  void * jresult ;
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  asd::File *result = 0 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  result = (asd::File *)(arg1)->GetFile();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Core_Imp_GetLogger(void * jarg1) {
  void * jresult ;
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  asd::Log *result = 0 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  result = (asd::Log *)(arg1)->GetLogger();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Core_Imp_GetProfiler(void * jarg1) {
  void * jresult ;
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  asd::Profiler *result = 0 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  result = (asd::Profiler *)(arg1)->GetProfiler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Core_Imp_GetLayerProfiler(void * jarg1) {
  void * jresult ;
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  asd::LayerProfiler *result = 0 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  result = (asd::LayerProfiler *)(arg1)->GetLayerProfiler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Core_Imp_GetGraphics(void * jarg1) {
  void * jresult ;
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  asd::Graphics *result = 0 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  result = (asd::Graphics *)(arg1)->GetGraphics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Core_Imp_GetGraphics_Imp(void * jarg1) {
  void * jresult ;
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  asd::Graphics_Imp *result = 0 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  result = (asd::Graphics_Imp *)(arg1)->GetGraphics_Imp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Core_Imp_GetSound(void * jarg1) {
  void * jresult ;
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  asd::Sound *result = 0 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  result = (asd::Sound *)(arg1)->GetSound();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Core_Imp_GetObjectSystemFactory(void * jarg1) {
  void * jresult ;
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  asd::ObjectSystemFactory *result = 0 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  result = (asd::ObjectSystemFactory *)(arg1)->GetObjectSystemFactory();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Core_Imp_GetAnimationSyatem(void * jarg1) {
  void * jresult ;
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  asd::AnimationSystem *result = 0 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  result = (asd::AnimationSystem *)(arg1)->GetAnimationSyatem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT asd::Vector2DI_R SWIGSTDCALL CSharp_Core_Imp_GetWindowSize(void * jarg1) {
  asd::Vector2DI_R jresult ;
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  asd::Vector2DI result;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  result = (arg1)->GetWindowSize();
  {
    assert(sizeof(asd::Vector2DI)==sizeof(asd::Vector2DI_R)); memcpy(&jresult, &result, sizeof(asd::Vector2DI_R)); 
  }
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Core_Imp_GetProfilerVisibility(void * jarg1) {
  unsigned int jresult ;
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  bool result;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  result = (bool)((asd::Core_Imp const *)arg1)->GetProfilerVisibility();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Core_Imp_SetProfilerVisibility(void * jarg1, unsigned int jarg2) {
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  bool arg2 ;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetProfilerVisibility(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Core_Imp_IsReloadingEnabeld(void * jarg1) {
  unsigned int jresult ;
  asd::Core_Imp *arg1 = (asd::Core_Imp *) 0 ;
  bool result;
  
  arg1 = (asd::Core_Imp *)jarg1; 
  result = (bool)((asd::Core_Imp const *)arg1)->IsReloadingEnabeld();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CreateCore() {
  void * jresult ;
  asd::Core *result = 0 ;
  
  result = (asd::Core *)asd::CreateCore();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetGlobalReferenceCount__() {
  int jresult ;
  int32_t result;
  
  result = (int32_t)asd::GetGlobalReferenceCount__();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Accessor_Sound_CreateSoundSource(void * jarg1, ::asd::achar * jarg2, unsigned int jarg3) {
  void * jresult ;
  asd::Sound *arg1 = (asd::Sound *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  bool arg3 ;
  asd::SoundSource *result = 0 ;
  
  arg1 = (asd::Sound *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (asd::SoundSource *)asd::Accessor::Sound_CreateSoundSource(arg1,(asd::achar const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Accessor_AnimationClip_GetSource(void * jarg1) {
  void * jresult ;
  asd::AnimationClip *arg1 = (asd::AnimationClip *) 0 ;
  asd::AnimationSource *result = 0 ;
  
  arg1 = (asd::AnimationClip *)jarg1; 
  result = (asd::AnimationSource *)asd::Accessor::AnimationClip_GetSource(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Accessor_Material2D_GetTexture2D(void * jarg1, ::asd::achar * jarg2) {
  void * jresult ;
  asd::Material2D *arg1 = (asd::Material2D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Texture2D *result = 0 ;
  
  arg1 = (asd::Material2D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (asd::Texture2D *)asd::Accessor::Material2D_GetTexture2D(arg1,(asd::achar const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Accessor_Material2D_GetShader2D(void * jarg1) {
  void * jresult ;
  asd::Material2D *arg1 = (asd::Material2D *) 0 ;
  asd::Shader2D *result = 0 ;
  
  arg1 = (asd::Material2D *)jarg1; 
  result = (asd::Shader2D *)asd::Accessor::Material2D_GetShader2D(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Accessor_Material3D_GetTexture2D(void * jarg1, ::asd::achar * jarg2) {
  void * jresult ;
  asd::Material3D *arg1 = (asd::Material3D *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Texture2D *result = 0 ;
  
  arg1 = (asd::Material3D *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (asd::Texture2D *)asd::Accessor::Material3D_GetTexture2D(arg1,(asd::achar const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Accessor_Material3D_GetShader3D(void * jarg1) {
  void * jresult ;
  asd::Material3D *arg1 = (asd::Material3D *) 0 ;
  asd::Shader3D *result = 0 ;
  
  arg1 = (asd::Material3D *)jarg1; 
  result = (asd::Shader3D *)asd::Accessor::Material3D_GetShader3D(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Accessor_MaterialPropertyBlock_GetTexture2D(void * jarg1, ::asd::achar * jarg2) {
  void * jresult ;
  asd::MaterialPropertyBlock *arg1 = (asd::MaterialPropertyBlock *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::Texture2D *result = 0 ;
  
  arg1 = (asd::MaterialPropertyBlock *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (asd::Texture2D *)asd::Accessor::MaterialPropertyBlock_GetTexture2D(arg1,(asd::achar const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Accessor_AnimationSyatem_CreateAnimationClip(void * jarg1) {
  void * jresult ;
  asd::AnimationSystem *arg1 = (asd::AnimationSystem *) 0 ;
  asd::AnimationClip *result = 0 ;
  
  arg1 = (asd::AnimationSystem *)jarg1; 
  result = (asd::AnimationClip *)asd::Accessor::AnimationSyatem_CreateAnimationClip(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Accessor_AnimationSyatem_CreateAnimationSource(void * jarg1) {
  void * jresult ;
  asd::AnimationSystem *arg1 = (asd::AnimationSystem *) 0 ;
  asd::AnimationSource *result = 0 ;
  
  arg1 = (asd::AnimationSystem *)jarg1; 
  result = (asd::AnimationSource *)asd::Accessor::AnimationSyatem_CreateAnimationSource(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Accessor_AnimationSyatem_CreateKeyframeAnimation(void * jarg1) {
  void * jresult ;
  asd::AnimationSystem *arg1 = (asd::AnimationSystem *) 0 ;
  asd::KeyframeAnimation *result = 0 ;
  
  arg1 = (asd::AnimationSystem *)jarg1; 
  result = (asd::KeyframeAnimation *)asd::Accessor::AnimationSyatem_CreateKeyframeAnimation(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Accessor_Model_GetAnimationClip(void * jarg1, int jarg2) {
  void * jresult ;
  asd::Model *arg1 = (asd::Model *) 0 ;
  int32_t arg2 ;
  asd::AnimationClip *result = 0 ;
  
  arg1 = (asd::Model *)jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (asd::AnimationClip *)asd::Accessor::Model_GetAnimationClip(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Accessor_Model_GetMesh(void * jarg1, int jarg2) {
  void * jresult ;
  asd::Model *arg1 = (asd::Model *) 0 ;
  int32_t arg2 ;
  asd::Mesh *result = 0 ;
  
  arg1 = (asd::Model *)jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (asd::Mesh *)asd::Accessor::Model_GetMesh(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Accessor_ImagePackage_GetImage(void * jarg1, int jarg2) {
  void * jresult ;
  asd::ImagePackage *arg1 = (asd::ImagePackage *) 0 ;
  int32_t arg2 ;
  asd::Texture2D *result = 0 ;
  
  arg1 = (asd::ImagePackage *)jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (asd::Texture2D *)asd::Accessor::ImagePackage_GetImage(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Accessor_CoreEffectObject2D_GetEffect(void * jarg1) {
  void * jresult ;
  asd::CoreEffectObject2D *arg1 = (asd::CoreEffectObject2D *) 0 ;
  asd::Effect *result = 0 ;
  
  arg1 = (asd::CoreEffectObject2D *)jarg1; 
  result = (asd::Effect *)asd::Accessor::CoreEffectObject2D_GetEffect(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Accessor_Chip2D_GetTexture(void * jarg1) {
  void * jresult ;
  asd::CoreChip2D *arg1 = (asd::CoreChip2D *) 0 ;
  asd::Texture2D *result = 0 ;
  
  arg1 = (asd::CoreChip2D *)jarg1; 
  result = (asd::Texture2D *)asd::Accessor::Chip2D_GetTexture(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Accessor_File_CreateStaticFile(void * jarg1, ::asd::achar * jarg2) {
  void * jresult ;
  asd::File *arg1 = (asd::File *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::StaticFile *result = 0 ;
  
  arg1 = (asd::File *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (asd::StaticFile *)asd::Accessor::File_CreateStaticFile(arg1,(asd::achar const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Accessor_File_CreateStreamFile(void * jarg1, ::asd::achar * jarg2) {
  void * jresult ;
  asd::File *arg1 = (asd::File *) 0 ;
  asd::achar *arg2 = (asd::achar *) 0 ;
  asd::StreamFile *result = 0 ;
  
  arg1 = (asd::File *)jarg1; 
  arg2 = (asd::achar *)jarg2; 
  result = (asd::StreamFile *)asd::Accessor::File_CreateStreamFile(arg1,(asd::achar const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Accessor_StreamFile_Read_(void * jarg1, int jarg2) {
  int jresult ;
  asd::StreamFile *arg1 = (asd::StreamFile *) 0 ;
  int32_t arg2 ;
  int32_t result;
  
  arg1 = (asd::StreamFile *)jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (int32_t)asd::Accessor::StreamFile_Read_(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Accessor_StreamFile_GetTempBuffer_(void * jarg1) {
  void * jresult ;
  asd::StreamFile *arg1 = (asd::StreamFile *) 0 ;
  void *result = 0 ;
  
  arg1 = (asd::StreamFile *)jarg1; 
  result = (void *)asd::Accessor::StreamFile_GetTempBuffer_(arg1);
  {
    jresult = result; 
  }
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Accessor_StreamFile_GetTempBufferSize_(void * jarg1) {
  int jresult ;
  asd::StreamFile *arg1 = (asd::StreamFile *) 0 ;
  int32_t result;
  
  arg1 = (asd::StreamFile *)jarg1; 
  result = (int32_t)asd::Accessor::StreamFile_GetTempBufferSize_(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StructTranslator_EnqueueVector2DF(float jarg1, float jarg2) {
  float arg1 ;
  float arg2 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  asd::StructTranslator::EnqueueVector2DF(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StructTranslator_EnqueueVector3DF(float jarg1, float jarg2, float jarg3) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  asd::StructTranslator::EnqueueVector3DF(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StructTranslator_EnqueueVector4DF(float jarg1, float jarg2, float jarg3, float jarg4) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  asd::StructTranslator::EnqueueVector4DF(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StructTranslator_EnqueueVector2DI(int jarg1, int jarg2) {
  int32_t arg1 ;
  int32_t arg2 ;
  
  arg1 = (int32_t)jarg1; 
  arg2 = (int32_t)jarg2; 
  asd::StructTranslator::EnqueueVector2DI(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StructTranslator_EnqueueColor(int jarg1, int jarg2, int jarg3, int jarg4) {
  int32_t arg1 ;
  int32_t arg2 ;
  int32_t arg3 ;
  int32_t arg4 ;
  
  arg1 = (int32_t)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  asd::StructTranslator::EnqueueColor(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StructTranslator_EnqueueRectF(float jarg1, float jarg2, float jarg3, float jarg4) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  asd::StructTranslator::EnqueueRectF(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StructTranslator_EnqueueRectI(int jarg1, int jarg2, int jarg3, int jarg4) {
  int32_t arg1 ;
  int32_t arg2 ;
  int32_t arg3 ;
  int32_t arg4 ;
  
  arg1 = (int32_t)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  asd::StructTranslator::EnqueueRectI(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StructTranslator_EnqueueMatrix44(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10, float jarg11, float jarg12, float jarg13, float jarg14, float jarg15, float jarg16) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  arg11 = (float)jarg11; 
  arg12 = (float)jarg12; 
  arg13 = (float)jarg13; 
  arg14 = (float)jarg14; 
  arg15 = (float)jarg15; 
  arg16 = (float)jarg16; 
  asd::StructTranslator::EnqueueMatrix44(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StructTranslator_EnqueueFCurveKeyframe(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, int jarg7) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  int32_t arg7 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (int32_t)jarg7; 
  asd::StructTranslator::EnqueueFCurveKeyframe(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT float SWIGSTDCALL CSharp_StructTranslator_DequeueFloat() {
  float jresult ;
  float result;
  
  result = (float)asd::StructTranslator::DequeueFloat();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StructTranslator_DequeueInt() {
  int jresult ;
  int32_t result;
  
  result = (int32_t)asd::StructTranslator::DequeueInt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StructTranslator() {
  void * jresult ;
  asd::StructTranslator *result = 0 ;
  
  result = (asd::StructTranslator *)new asd::StructTranslator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StructTranslator(void * jarg1) {
  asd::StructTranslator *arg1 = (asd::StructTranslator *) 0 ;
  
  arg1 = (asd::StructTranslator *)jarg1; 
  delete arg1;
}


SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_ReferenceObject_SWIGUpcast(asd::ReferenceObject *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_Window_SWIGUpcast(asd::Window *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::Window * SWIGSTDCALL CSharp_Window_Imp_SWIGUpcast(asd::Window_Imp *jarg1) {
    return (asd::Window *)jarg1;
}

SWIGEXPORT asd::ReferenceObject * SWIGSTDCALL CSharp_Profiler_SWIGUpcast(asd::Profiler *jarg1) {
    return (asd::ReferenceObject *)jarg1;
}

SWIGEXPORT asd::ReferenceObject * SWIGSTDCALL CSharp_LayerProfiler_SWIGUpcast(asd::LayerProfiler *jarg1) {
    return (asd::ReferenceObject *)jarg1;
}

SWIGEXPORT asd::LayerProfiler * SWIGSTDCALL CSharp_LayerProfiler_Imp_SWIGUpcast(asd::LayerProfiler_Imp *jarg1) {
    return (asd::LayerProfiler *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_File_SWIGUpcast(asd::File *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_StaticFile_SWIGUpcast(asd::StaticFile *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_StreamFile_SWIGUpcast(asd::StreamFile *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_SoundSource_SWIGUpcast(asd::SoundSource *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_Sound_SWIGUpcast(asd::Sound *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_Shader2D_SWIGUpcast(asd::Shader2D *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_Material2D_SWIGUpcast(asd::Material2D *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_Shader3D_SWIGUpcast(asd::Shader3D *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_Material3D_SWIGUpcast(asd::Material3D *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_MaterialPropertyBlock_SWIGUpcast(asd::MaterialPropertyBlock *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_Texture_SWIGUpcast(asd::Texture *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::Texture * SWIGSTDCALL CSharp_Texture2D_SWIGUpcast(asd::Texture2D *jarg1) {
    return (asd::Texture *)jarg1;
}

SWIGEXPORT asd::Texture2D * SWIGSTDCALL CSharp_Texture2D_Imp_SWIGUpcast(asd::Texture2D_Imp *jarg1) {
    return (asd::Texture2D *)jarg1;
}

SWIGEXPORT asd::Texture2D * SWIGSTDCALL CSharp_RenderTexture2D_SWIGUpcast(asd::RenderTexture2D *jarg1) {
    return (asd::Texture2D *)jarg1;
}

SWIGEXPORT asd::RenderTexture2D * SWIGSTDCALL CSharp_RenderTexture2D_Imp_SWIGUpcast(asd::RenderTexture2D_Imp *jarg1) {
    return (asd::RenderTexture2D *)jarg1;
}

SWIGEXPORT asd::Texture * SWIGSTDCALL CSharp_CubemapTexture_SWIGUpcast(asd::CubemapTexture *jarg1) {
    return (asd::Texture *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_ImagePackage_SWIGUpcast(asd::ImagePackage *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_Effect_SWIGUpcast(asd::Effect *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_Font_SWIGUpcast(asd::Font *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_Deformer_SWIGUpcast(asd::Deformer *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_Mesh_SWIGUpcast(asd::Mesh *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_Model_SWIGUpcast(asd::Model *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_MassModel_SWIGUpcast(asd::MassModel *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_Terrain3D_SWIGUpcast(asd::Terrain3D *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_KeyframeAnimation_SWIGUpcast(asd::KeyframeAnimation *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_AnimationSource_SWIGUpcast(asd::AnimationSource *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_AnimationClip_SWIGUpcast(asd::AnimationClip *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::ReferenceObject * SWIGSTDCALL CSharp_Graphics_SWIGUpcast(asd::Graphics *jarg1) {
    return (asd::ReferenceObject *)jarg1;
}

SWIGEXPORT asd::Graphics * SWIGSTDCALL CSharp_Graphics_Imp_SWIGUpcast(asd::Graphics_Imp *jarg1) {
    return (asd::Graphics *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_CoreShape_SWIGUpcast(asd::CoreShape *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::CoreShape * SWIGSTDCALL CSharp_CoreTriangleShape_SWIGUpcast(asd::CoreTriangleShape *jarg1) {
    return (asd::CoreShape *)jarg1;
}

SWIGEXPORT asd::CoreShape * SWIGSTDCALL CSharp_CoreCircleShape_SWIGUpcast(asd::CoreCircleShape *jarg1) {
    return (asd::CoreShape *)jarg1;
}

SWIGEXPORT asd::CoreShape * SWIGSTDCALL CSharp_CoreArcShape_SWIGUpcast(asd::CoreArcShape *jarg1) {
    return (asd::CoreShape *)jarg1;
}

SWIGEXPORT asd::CoreShape * SWIGSTDCALL CSharp_CoreLineShape_SWIGUpcast(asd::CoreLineShape *jarg1) {
    return (asd::CoreShape *)jarg1;
}

SWIGEXPORT asd::CoreShape * SWIGSTDCALL CSharp_CoreRectangleShape_SWIGUpcast(asd::CoreRectangleShape *jarg1) {
    return (asd::CoreShape *)jarg1;
}

SWIGEXPORT asd::CoreShape * SWIGSTDCALL CSharp_CorePolygonShape_SWIGUpcast(asd::CorePolygonShape *jarg1) {
    return (asd::CoreShape *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_CoreChip2D_SWIGUpcast(asd::CoreChip2D *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_CoreObject2D_SWIGUpcast(asd::CoreObject2D *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::CoreObject2D * SWIGSTDCALL CSharp_CoreTextureObject2D_SWIGUpcast(asd::CoreTextureObject2D *jarg1) {
    return (asd::CoreObject2D *)jarg1;
}

SWIGEXPORT asd::CoreObject2D * SWIGSTDCALL CSharp_CoreCameraObject2D_SWIGUpcast(asd::CoreCameraObject2D *jarg1) {
    return (asd::CoreObject2D *)jarg1;
}

SWIGEXPORT asd::CoreObject2D * SWIGSTDCALL CSharp_CoreTextObject2D_SWIGUpcast(asd::CoreTextObject2D *jarg1) {
    return (asd::CoreObject2D *)jarg1;
}

SWIGEXPORT asd::CoreObject2D * SWIGSTDCALL CSharp_CoreEffectObject2D_SWIGUpcast(asd::CoreEffectObject2D *jarg1) {
    return (asd::CoreObject2D *)jarg1;
}

SWIGEXPORT asd::CoreObject2D * SWIGSTDCALL CSharp_CoreMapObject2D_SWIGUpcast(asd::CoreMapObject2D *jarg1) {
    return (asd::CoreObject2D *)jarg1;
}

SWIGEXPORT asd::CoreObject2D * SWIGSTDCALL CSharp_CoreGeometryObject2D_SWIGUpcast(asd::CoreGeometryObject2D *jarg1) {
    return (asd::CoreObject2D *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_CoreLayer_SWIGUpcast(asd::CoreLayer *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::CoreLayer * SWIGSTDCALL CSharp_CoreLayer2D_SWIGUpcast(asd::CoreLayer2D *jarg1) {
    return (asd::CoreLayer *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_CoreObject3D_SWIGUpcast(asd::CoreObject3D *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::CoreObject3D * SWIGSTDCALL CSharp_CoreModelObject3D_SWIGUpcast(asd::CoreModelObject3D *jarg1) {
    return (asd::CoreObject3D *)jarg1;
}

SWIGEXPORT asd::CoreObject3D * SWIGSTDCALL CSharp_CoreDirectionalLightObject3D_SWIGUpcast(asd::CoreDirectionalLightObject3D *jarg1) {
    return (asd::CoreObject3D *)jarg1;
}

SWIGEXPORT asd::CoreObject3D * SWIGSTDCALL CSharp_CoreCameraObject3D_SWIGUpcast(asd::CoreCameraObject3D *jarg1) {
    return (asd::CoreObject3D *)jarg1;
}

SWIGEXPORT asd::CoreObject3D * SWIGSTDCALL CSharp_CoreEffectObject3D_SWIGUpcast(asd::CoreEffectObject3D *jarg1) {
    return (asd::CoreObject3D *)jarg1;
}

SWIGEXPORT asd::CoreObject3D * SWIGSTDCALL CSharp_CoreMassModelObject3D_SWIGUpcast(asd::CoreMassModelObject3D *jarg1) {
    return (asd::CoreObject3D *)jarg1;
}

SWIGEXPORT asd::CoreObject3D * SWIGSTDCALL CSharp_CoreTerrainObject3D_SWIGUpcast(asd::CoreTerrainObject3D *jarg1) {
    return (asd::CoreObject3D *)jarg1;
}

SWIGEXPORT asd::CoreLayer * SWIGSTDCALL CSharp_CoreLayer3D_SWIGUpcast(asd::CoreLayer3D *jarg1) {
    return (asd::CoreLayer *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_CoreScene_SWIGUpcast(asd::CoreScene *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_CorePostEffect_SWIGUpcast(asd::CorePostEffect *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::IReference * SWIGSTDCALL CSharp_CoreTransition_SWIGUpcast(asd::CoreTransition *jarg1) {
    return (asd::IReference *)jarg1;
}

SWIGEXPORT asd::ReferenceObject * SWIGSTDCALL CSharp_Core_SWIGUpcast(asd::Core *jarg1) {
    return (asd::ReferenceObject *)jarg1;
}

SWIGEXPORT asd::Core * SWIGSTDCALL CSharp_Core_Imp_SWIGUpcast(asd::Core_Imp *jarg1) {
    return (asd::Core *)jarg1;
}

#ifdef __cplusplus
}
#endif

