
#pragma once

#include <stdio.h>
#include <stdint.h>

namespace asd {


class Sound;
class SoundSource;
class AutoGeneratedWrapperAccessor;

/**
	@brief 音を管理するクラス 
*/
class Sound {
	void* self = nullptr;
	bool isCtrlSelf = false;
	friend class Sound;
	friend class SoundSource;
	friend class AutoGeneratedWrapperAccessor;
	Sound(void* self, bool isCtrlSelf);
	public:
	/**
		@brief 
	*/
	virtual ~Sound();
	
	/**
		@brief 音を読み込む。 
		@param path パス 
		@param isDecompressed 解凍するか? 
		@return 音源 
	*/
	std::shared_ptr<SoundSource> CreateSoundSource(const char16_t* path,bool isDecompressed);
	
	/**
		@brief 音を再生する。 
		@param soundSource 音源 
		@return ID 
	*/
	int32_t Play(std::shared_ptr<SoundSource> soundSource);
	
	/**
		@brief 音が再生中か、取得する。 
		@param id ID 
		@return 再生中か? 
	*/
	bool GetIsPlaying(int32_t id);
	
	/**
		@brief 全ての再生中の音を停止する。 
	*/
	void StopAll();
	
	/**
		@brief 指定した音を停止する。 
		@param id ID 
	*/
	void Stop(int32_t id);
	
	/**
		@brief 指定した音を一時停止する。 
		@param id ID 
	*/
	void Pause(int32_t id);
	
	/**
		@brief 指定した一時停止中の音の一時停止を解除する。 
		@param id ID 
	*/
	void Resume(int32_t id);
	
	/**
		@brief 指定した音の音量を設定する。 
		@param id ID 
		@param volume 音量(0.0～1.0) 
	*/
	void SetVolume(int32_t id,float volume);
	
	/**
		@brief 指定した音をフェードインさせる。 
		@param id ID 
		@param second フェードインに使用する時間(秒) 
	*/
	void FadeIn(int32_t id,float second);
	
	/**
		@brief 指定した音をフェードアウトさせる。 
		@param id ID 
		@param second フェードアウトに使用する時間(秒) 
	*/
	void FadeOut(int32_t id,float second);
	
	/**
		@brief 任意の音量に音量を一定時間かけて変更する。 
		@param id 音のID 
		@param second 変更にかかる時間(秒) 
		@param targetedVolume 変更先の音量(0.0～1.0) 
	*/
	void Fade(int32_t id,float second,float targetedVolume);
	
	/**
		@brief 再生速度変更するかを取得する。 
		@param id 音のID 
		@return 再生速度変更するか? 
	*/
	bool GetIsPlaybackSpeedEnabled(int32_t id);
	
	/**
		@brief 再生速度変更するかを設定する。 
		@param id 音のID 
		@param isPlaybackSpeedEnabled 再生速度変更するか? 
	*/
	void SetIsPlaybackSpeedEnabled(int32_t id,bool isPlaybackSpeedEnabled);
	
	/**
		@brief 再生速度を取得する。 
		@param id 音のID 
		@return 再生速度(比率) 
	*/
	float GetPlaybackSpeed(int32_t id);
	
	/**
		@brief 再生速度を設定する。 
		@param id 音のID 
		@param playbackSpeed 再生速度(比率) 
	*/
	void SetPlaybackSpeed(int32_t id,float playbackSpeed);
	
	/**
		@brief パン位置を取得する。 
		@param id 音のID 
		@return パン位置, 0.0で中央, -1.0で左, 1.0で右。 
	*/
	float GetPanningPosition(int32_t id);
	
	/**
		@brief パン位置を設定する。 
		@param id 音のID 
		@param panningPosition パン位置, 0.0で中央, -1.0で左, 1.0で右。 
	*/
	void SetPanningPosition(int32_t id,float panningPosition);
	
};

/**
	@brief 音源のクラス 
*/
class SoundSource {
	void* self = nullptr;
	bool isCtrlSelf = false;
	friend class Sound;
	friend class SoundSource;
	friend class AutoGeneratedWrapperAccessor;
	SoundSource(void* self, bool isCtrlSelf);
	public:
	/**
		@brief 
	*/
	virtual ~SoundSource();
	
	/**
		@brief ループポイントの開始地点(秒)を取得する。 
		@return 開始地点(秒) 
	*/
	float GetLoopStartingPoint() const;
	
	/**
		@brief ループポイントの開始地点(秒)を設定する。 
		@param startingPoint 開始地点(秒) 
	*/
	void SetLoopStartingPoint(float startingPoint);
	
	/**
		@brief ループポイントの終了地点(秒)を取得する。 
		@return 終了地点(秒) 
	*/
	float GetLoopEndPoint() const;
	
	/**
		@brief ループポイントの終了地点(秒)を設定する。 
		@param endPoint 終了地点(秒) 
	*/
	void SetLoopEndPoint(float endPoint);
	
	/**
		@brief ループするかを取得する。 
		@return ループするか? 
	*/
	bool GetIsLoopingMode() const;
	
	/**
		@brief ループするかを設定する。 
		@param isLoopingMode ループするか? 
	*/
	void SetIsLoopingMode(bool isLoopingMode);
	
	/**
		@brief 音の長さを取得する。 
		@return 長さ(秒) 
	*/
	float GetLength();
	
};


};

