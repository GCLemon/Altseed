
//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
#include "ace.ReferenceObject.h"
#include "Core/ace.CreateCore.h"

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
namespace ace {
	//----------------------------------------------------------------------------------
	// extern経由で他から参照される部分
	//----------------------------------------------------------------------------------
	std::atomic<int32_t>	g_globalRefCount__(0);

	//----------------------------------------------------------------------------------
	// エンジンにもほぼ同じ動作をしつつ、違うコードが存在(この関数はlib経由、もしくはDLL内部使用時に使用)
	//----------------------------------------------------------------------------------
	int32_t GetGlobalReferenceCount()
	{
		return GetGlobalReferenceCount__();
	}

	//----------------------------------------------------------------------------------
	// エンジンにもほぼ同じ動作をしつつ、違うコードが存在(この関数はlib経由、もしくはDLL内部使用時に使用)
	//----------------------------------------------------------------------------------
	void CheckDLL()
	{

	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	ReferenceObject::ReferenceObject()
		: m_reference(1)
	{
		g_globalRefCount__++;
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	ReferenceObject::~ReferenceObject()
	{}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	int ReferenceObject::AddRef()
	{
		std::atomic_fetch_add_explicit(&g_globalRefCount__, 1u, std::memory_order_consume);
		std::atomic_fetch_add_explicit(&m_reference, 1u, std::memory_order_consume);

		return m_reference;
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	int ReferenceObject::GetRef()
	{
		return m_reference;
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	int ReferenceObject::Release()
	{
		assert(m_reference > 0);

		std::atomic_fetch_sub_explicit(&g_globalRefCount__, 1u, std::memory_order_consume);
		bool destroy = std::atomic_fetch_sub_explicit(&m_reference, 1u, std::memory_order_consume) == 1;
		if (destroy)
		{
			delete this;
			return 0;
		}

		return m_reference;
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
};