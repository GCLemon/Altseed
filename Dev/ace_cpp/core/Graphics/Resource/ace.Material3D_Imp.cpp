
//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
#include "ace.Material3D_Imp.h"
#include "ace.Shader3D_Imp.h"
#include "ace.NativeShader_Imp.h"

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
namespace ace {

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	Material3DCommand::Material3DCommand(Shader3D_Imp* shader, std::shared_ptr<MaterialPropertyBlock>& values)
		: MaterialCommand(shader->GetNativeShader().get(), values)
		, m_shader(shader)
		, m_target(nullptr)
	{
		SafeAddRef(m_shader);
	}

	Material3DCommand::~Material3DCommand()
	{
		SafeRelease(m_shader);
		SafeRelease(m_target);
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	RenderTexture2D* Material3DCommand::GetTarget()
	{
		return m_target;
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	void Material3DCommand::SetTarget(RenderTexture2D* target)
	{
		SafeSubstitute(m_target, target);
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	Material3D_Imp::Material3D_Imp(Shader3D_Imp* shader)
		: m_shader(shader)
	{
		SafeAddRef(m_shader);
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	Material3D_Imp::~Material3D_Imp()
	{
		SafeRelease(m_shader);
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	Shader3D* Material3D_Imp::GetShader3D_()
	{
		return m_shader;
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	void Material3D_Imp::SetShader3D(Shader3D* shader)
	{
		auto s = (Shader3D_Imp*) shader;
		SafeSubstitute(m_shader, s);
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	std::shared_ptr <Material3DCommand> Material3D_Imp::GenerateShaderCommand()
	{
		auto command = std::make_shared < Material3DCommand>(m_shader, block);
		return command;
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	Material3D_Imp* Material3D_Imp::Create(Shader3D_Imp* shader)
	{
		if (shader == nullptr) return nullptr;

		return new Material3D_Imp(shader);
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------

}