//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
#include "../ace.Graphics_Imp.h"
#include "../../ObjectSystem/2D/ace.CoreMapObject2D_Imp.h"
#include "ace.Chip2D_Imp.h"

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
namespace ace {

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	Chip2D_Imp::Chip2D_Imp(Graphics* graphics)
		: DeviceObject(graphics)
		, m_graphics(graphics)
		, m_src(RectF())
		, m_color(Color())
		, m_alphaBlend(AlphaBlend::Blend)
		, m_texture(nullptr)
		, m_turnLR(false)
		, m_turnUL(false)
#if __CULLING_2D__
		, cullingObject(nullptr)
		, alreadyCullingUpdated(false)
#endif
		, mapObject2D(nullptr)
	{

	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	CoreMapObject2D_Imp* Chip2D_Imp::GetMapObject2D() const
	{
		return mapObject2D;
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	void Chip2D_Imp::SetMapObject2D(CoreMapObject2D_Imp* mapObject)
	{
		mapObject2D = mapObject;
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	Chip2D_Imp::~Chip2D_Imp()
	{
		SafeRelease(m_texture);
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
#if __CULLING_2D__
	bool Chip2D_Imp::GetAlreadyCullingUpdated() const
	{
		return alreadyCullingUpdated;
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	void Chip2D_Imp::SetCullingObject(culling2d::Object *cullingObj)
	{
		cullingObject = cullingObj;
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	culling2d::Object* Chip2D_Imp::GetCullingObject() const
	{
		return cullingObject;
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	void Chip2D_Imp::SetAlreadyCullingUpdated(bool cullingUpdated)
	{
		alreadyCullingUpdated = cullingUpdated;
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	culling2d::Circle Chip2D_Imp::GetBoundingCircle()
	{
		return mapObject2D->GetChipBoundingCircle(this);
	}
#endif

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	Texture2D* Chip2D_Imp::GetTexture_() const
	{
		return m_texture;
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	void Chip2D_Imp::SetTexture(Texture2D* texture)
	{
		SafeSubstitute(m_texture, texture);
	}

#if !SWIG
	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	void Chip2D_Imp::SetTexture(std::shared_ptr<Texture2D> texture)
	{
		SetTexture(texture.get());
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	std::shared_ptr<Texture2D> Chip2D_Imp::GetTexture()
	{
		auto v = GetTexture_();
		SafeAddRef(v);
		return CreateSharedPtrWithReleaseDLL(v);
	}

#endif

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	RectF Chip2D_Imp::GetSrc() const
	{
		return m_src;
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	void Chip2D_Imp::SetSrc(RectF src)
	{
		m_src = src;

#if __CULLING_2D__
		if (!alreadyCullingUpdated&&mapObject2D != nullptr&&mapObject2D->GetLayer() != nullptr)
		{
			auto layerImp = (CoreLayer2D_Imp*)mapObject2D->GetLayer();
			layerImp->TransformedObjects.push_back(cullingObject);
			alreadyCullingUpdated = true;
		}
#endif
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	Color Chip2D_Imp::GetColor() const
	{
		return m_color;
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	void Chip2D_Imp::SetColor(Color color)
	{
		m_color = color;
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	bool Chip2D_Imp::GetTurnLR() const
	{
		return m_turnLR;
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	void Chip2D_Imp::SetTurnLR(bool turnLR)
	{
		m_turnLR = turnLR;
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	bool Chip2D_Imp::GetTurnUL() const
	{
		return m_turnUL;
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	void Chip2D_Imp::SetTurnUL(bool turnUL)
	{
		m_turnUL = turnUL;
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	AlphaBlend Chip2D_Imp::GetAlphaBlendMode() const
	{
		return m_alphaBlend;
	}

	//----------------------------------------------------------------------------------
	//
	//----------------------------------------------------------------------------------
	void Chip2D_Imp::SetAlphaBlendMode(AlphaBlend alphaBlend)
	{
		m_alphaBlend = alphaBlend;
	}
}