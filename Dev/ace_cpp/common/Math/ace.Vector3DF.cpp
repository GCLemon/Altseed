

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
#if defined(_M_X86) && defined(__x86__)
#include <emmintrin.h>
#endif
#include "ace.Vector3DF.h"
#include "ace.Matrix43.h"
#include "ace.Matrix44.h"

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
namespace ace {
	
inline float Rsqrt(float x)
{
#if defined(_M_X86) && defined(__x86__)
	_mm_store_ss(&x, _mm_rsqrt_ss(_mm_load_ss(&x)));
	return x;
#else
	float xhalf = 0.5f * x;
	int i = *(int*)&x;
	i = 0x5f3759df - (i >> 1);
	x = *(float*)&i;
	x = x * (1.5f - xhalf * x * x);
	x = x * (1.5f - xhalf * x * x);
	return x;
#endif
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
Vector3DF::Vector3DF()
	: X		( 0.0f )
	, Y		( 0.0f )
	, Z		( 0.0f )
{

}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
Vector3DF::Vector3DF( float x, float y, float z )
	: X		( x )
	, Y		( y )
	, Z		( z )
{

}

//-----------------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------------
Vector3DF Vector3DF::operator + ( const Vector3DF& o ) const
{
	return Vector3DF( X + o.X, Y + o.Y, Z + o.Z );
}

//-----------------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------------
Vector3DF Vector3DF::operator - ( const Vector3DF& o ) const
{
	return Vector3DF( X - o.X, Y - o.Y, Z - o.Z );
}

//-----------------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------------
Vector3DF Vector3DF::operator * ( const float& o ) const
{
	return Vector3DF( X * o, Y * o, Z * o );
}

//-----------------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------------
Vector3DF Vector3DF::operator / ( const float& o ) const
{
	return Vector3DF( X / o, Y / o, Z / o );
}

//-----------------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------------
bool Vector3DF::operator == (const Vector3DF& o)
{
	return X == o.X && Y == o.Y && Z == o.Z;
}

//-----------------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------------
bool Vector3DF::operator != (const Vector3DF& o)
{
	return !(X == o.X && Y == o.Y && Z == o.Z);
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
void Vector3DF::Add( Vector3DF* pOut, const Vector3DF* pIn1, const Vector3DF* pIn2 )
{
	float x = pIn1->X + pIn2->X;
	float y = pIn1->Y + pIn2->Y;
	float z = pIn1->Z + pIn2->Z;
	pOut->X = x;
	pOut->Y = y;
	pOut->Z = z;
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
Vector3DF& Vector3DF::Sub( Vector3DF& o, const Vector3DF& in1, const Vector3DF& in2 )
{
	o.X = in1.X - in2.X;
	o.Y = in1.Y - in2.Y;
	o.Z = in1.Z - in2.Z;
	return o;
}

//-----------------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------------
Vector3DF& Vector3DF::operator += ( const Vector3DF& o )
{
	X += o.X;
	Y += o.Y;
	Z += o.Z;
	return *this;
}

//-----------------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------------
Vector3DF& Vector3DF::operator -= ( const Vector3DF& o )
{
	X -= o.X;
	Y -= o.Y;
	Z -= o.Z;
	return *this;
}

//-----------------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------------
Vector3DF& Vector3DF::operator *= ( const float& o )
{
	X *= o;
	Y *= o;
	Z *= o;
	return *this;
}

//-----------------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------------
Vector3DF& Vector3DF::operator /= ( const float& o )
{
	X /= o;
	Y /= o;
	Z /= o;
	return *this;
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
float Vector3DF::Length( const Vector3DF& in )
{
	return sqrt( in.X * in.X + in.Y * in.Y + in.Z * in.Z );
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
float Vector3DF::LengthSq( const Vector3DF& in )
{
	return in.X * in.X + in.Y * in.Y + in.Z * in.Z;
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
float Vector3DF::Dot( const Vector3DF& in1, const Vector3DF& in2 )
{
	return in1.X * in2.X + in1.Y * in2.Y + in1.Z * in2.Z;
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
void Vector3DF::Normal( Vector3DF& o, const Vector3DF& in )
{
	float inv = Rsqrt( in.X * in.X + in.Y * in.Y + in.Z * in.Z );
	o.X = in.X * inv;
	o.Y = in.Y * inv;
	o.Z = in.Z * inv;
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
Vector3DF& Vector3DF::Cross( Vector3DF& o, const Vector3DF& in1, const Vector3DF& in2 )
{
	float x = in1.Y * in2.Z - in1.Z * in2.Y;
	float y = in1.Z * in2.X - in1.X * in2.Z;
	float z = in1.X * in2.Y - in1.Y * in2.X;
	o.X = x;
	o.Y = y;
	o.Z = z;
	return o;
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
Vector3DF& Vector3DF::Transform( Vector3DF& o, const Vector3DF& in, const Matrix44& mat )
{
	float values[3];

	for( int i = 0; i < 3; i++ )
	{
		values[i] = 0;
		values[i] += in.X * mat.Values[0][i];
		values[i] += in.Y * mat.Values[1][i];
		values[i] += in.Z * mat.Values[2][i];
		values[i] += mat.Values[3][i];
	}

	o.X = values[0];
	o.Y = values[1];
	o.Z = values[2];
	return o;
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
 } 
//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------